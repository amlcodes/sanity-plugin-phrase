/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  '/api2/v1/additionalWorkflowSteps/{id}': {
    delete: operations['deleteAWFStep']
  }
  '/api2/v1/additionalWorkflowSteps': {
    get: operations['listAWFSteps']
    post: operations['createAWFStep']
  }
  '/api2/v1/analyses/bulk': {
    delete: operations['bulkDeleteAnalyses']
  }
  '/api2/v1/analyses/{analyseUid}': {
    delete: operations['delete']
  }
  '/api2/v1/analyses/byProviders': {
    post: operations['createAnalysesForProviders']
  }
  '/api2/v1/analyses/byLanguages': {
    post: operations['createAnalysesForLangs']
  }
  '/api2/v1/analyses/recalculate': {
    post: operations['recalculate']
  }
  '/api2/v1/analyses/{analyseUid}/analyseLanguageParts/{analyseLanguagePartId}': {
    /** Returns analysis language pair */
    get: operations['getAnalyseLanguagePart']
  }
  '/api2/v1/analyses/{analyseUid}/analyseLanguageParts/{analyseLanguagePartId}/jobs': {
    /** Returns list of job's analyses */
    get: operations['listJobParts']
  }
  '/api2/v1/analyses/{analyseUid}/jobs/{jobUid}': {
    /** Returns job's analyse */
    get: operations['getJobPartAnalyse']
  }
  '/api2/v1/analyses/{analyseUid}/download': {
    get: operations['downloadAnalyse']
  }
  '/api2/v1/async/{asyncRequestId}': {
    get: operations['getAsyncRequest']
  }
  '/api2/v1/async': {
    get: operations['listPendingRequests']
  }
  '/api2/v1/async/status': {
    get: operations['getCurrentLimitStatus']
  }
  '/api2/v1/auth/login': {
    post: operations['login']
  }
  '/api2/v1/auth/logout': {
    post: operations['logout']
  }
  '/api2/v1/auth/loginToSession': {
    post: operations['loginToSession']
  }
  '/api2/v1/auth/loginOther': {
    /** Available only for admin */
    post: operations['loginOther']
  }
  '/api2/v1/auth/whoAmI': {
    get: operations['whoAmI']
  }
  '/api2/v1/auth/loginWithGoogle': {
    post: operations['loginByGoogle']
  }
  '/api2/v1/auth/loginWithApple/refreshToken': {
    post: operations['loginByAppleWithRefreshToken']
  }
  '/api2/v1/auth/loginWithApple/code': {
    post: operations['loginByAppleWithCode']
  }
  '/api2/v1/auth/refreshAppleToken': {
    get: operations['refreshAppleToken']
  }
  '/api2/v1/bilingualFiles/compare': {
    /** Compares bilingual file to job state. Returns list of compared segments. */
    post: operations['compareBilingualFile']
  }
  '/api2/v1/bilingualFiles/preview': {
    /** Supports mxliff format */
    post: operations['getPreviewFile']
  }
  '/api2/v1/bilingualFiles/convert': {
    post: operations['convertBilingualFile']
  }
  '/api2/v1/businessUnits/{businessUnitUid}': {
    get: operations['getBusinessUnit']
    put: operations['updateBusinessUnit']
    delete: operations['deleteBusinessUnit']
  }
  '/api2/v1/businessUnits': {
    get: operations['listBusinessUnits']
    post: operations['createBusinessUnit']
  }
  '/api2/v1/clients/{clientUid}': {
    get: operations['getClient']
    put: operations['updateClient']
    delete: operations['deleteClient']
  }
  '/api2/v1/clients': {
    get: operations['listClients']
    post: operations['createClient']
  }
  '/api2/v1/connectors/{connectorId}': {
    get: operations['getConnector']
    /** Edit selected connector */
    put: operations['editConnector']
  }
  '/api2/v1/connectors': {
    get: operations['getConnectorList']
  }
  '/api2/v1/connectors/{connectorId}/folders/{folder}': {
    /** List files in a subfolder of the selected connector */
    get: operations['getFolder']
    /** Upload a file to a subfolder of the selected connector */
    post: operations['uploadFile']
  }
  '/api2/v1/connectors/{connectorId}/folders': {
    /** List files in a root folder of the selected connector */
    get: operations['getRootFolder']
  }
  '/api2/v1/connectors/{connectorId}/folders/{folder}/files/{file}': {
    /** Download a file from a subfolder of the selected connector */
    get: operations['getFile']
  }
  '/api2/v1/jobs/{jobUid}/conversations': {
    get: operations['listAllConversations']
  }
  '/api2/v1/jobs/conversations/find': {
    post: operations['findConversations']
  }
  '/api2/v1/costCenters/{costCenterUid}': {
    get: operations['getCostCenter']
    put: operations['updateCostCenter']
    delete: operations['deleteCostCenter']
  }
  '/api2/v1/costCenters': {
    get: operations['listCostCenters']
    post: operations['createCostCenter']
  }
  '/api2/v1/customFields/{fieldUid}': {
    get: operations['getCustomField']
  }
  '/api2/v1/customFields': {
    get: operations['getCustomFieldList']
    post: operations['createCustomField']
  }
  '/api2/v1/customFields/{fieldUid}/options': {
    get: operations['getCustomFieldOptionList']
  }
  '/api2/v1/customFileTypes': {
    get: operations['getAllCustomFileType']
    post: operations['createCustomFileTypes']
    delete: operations['deleteBatchCustomFileType']
  }
  '/api2/v1/customFileTypes/{customFileTypeUid}': {
    get: operations['getCustomFileType']
    put: operations['updateCustomFileType']
    delete: operations['deleteCustomFileType']
  }
  '/api2/v1/customFileTypes/find': {
    /** If no matching custom file type is found it returns status 200 and empty body. */
    get: operations['findCustomFileType']
  }
  '/api2/v1/netRateSchemes/{netRateSchemeUid}': {
    get: operations['getDiscountScheme']
    put: operations['updateDiscountScheme']
  }
  '/api2/v1/netRateSchemes': {
    get: operations['getDiscountSchemes']
    post: operations['createDiscountScheme']
  }
  '/api2/v1/netRateSchemes/{netRateSchemeUid}/workflowStepNetSchemes/{netRateSchemeWorkflowStepId}': {
    get: operations['getDiscountSchemeWorkflowStep']
    put: operations['editDiscountSchemeWorkflowStep']
  }
  '/api2/v1/netRateSchemes/{netRateSchemeUid}/workflowStepNetSchemes': {
    get: operations['getDiscountSchemeWorkflowSteps']
  }
  '/api2/v1/domains/{domainUid}': {
    get: operations['getDomain']
    put: operations['updateDomain']
    delete: operations['deleteDomain']
  }
  '/api2/v1/domains': {
    get: operations['listDomains']
    post: operations['createDomain']
  }
  '/api2/v1/emailTemplates/{templateUid}': {
    get: operations['getOrgEmailTemplate']
  }
  '/api2/v1/emailTemplates': {
    get: operations['listOrgEmailTemplates']
  }
  '/api2/v1/projects/{projectUid}/fileHandovers': {
    /**
     * For downloading multiple files as ZIP file provide multiple IDs in query parameters.
     * * For example `?jobUid={id1}&jobUid={id2}`
     * * When no files matched given IDs error 404 is returned, otherwise ZIP file will include those that were found
     */
    get: operations['getHandoverFiles']
    /**
     * For following jobs the handover file is not supported:
     * * Continuous jobs
     * * Jobs from connectors
     * * Split jobs
     * * Multilingual jobs
     */
    put: operations['uploadHandoverFile']
    delete: operations['deleteHandoverFile']
  }
  '/api2/v1/files': {
    get: operations['getFiles']
    /** Accepts multipart/form-data, application/octet-stream or application/json. */
    post: operations['createUrlFile']
  }
  '/api2/v1/files/{fileUid}': {
    /** Get uploaded file as <b>octet-stream</b> or as <b>json</b> based on 'Accept' header */
    get: operations['getFileJson']
    delete: operations['deletesFile']
  }
  '/api2/v1/glossaries/{glossaryUid}': {
    get: operations['getGlossary']
    /** Languages can only be added, their removal is not supported */
    put: operations['updateGlossary']
    delete: operations['deleteGlossary']
  }
  '/api2/v1/glossaries': {
    get: operations['listGlossaries']
    post: operations['createGlossary']
  }
  '/api2/v1/glossaries/{glossaryUid}/activate': {
    put: operations['activateGlossary']
  }
  '/api2/v1/projects/{projectUid}/jobs/{jobUid}/transMemories/searchSegment': {
    /**
     * Returns at most <i>maxSegments</i>
     *             records with <i>score >= scoreThreshold</i> and at most <i>maxSubsegments</i> records which are subsegment,
     *             i.e. the source text is substring of the query text.
     */
    post: operations['searchSegmentByJob']
  }
  '/api2/v1/jobs/{jobUid}/conversations/lqas/{conversationId}/comments/{commentId}': {
    delete: operations['deleteLQAComment']
  }
  '/api2/v1/jobs/{jobUid}/conversations/lqas/{conversationId}': {
    get: operations['getLQAConversation']
    delete: operations['deleteLQAConversation']
  }
  '/api2/v1/jobs/{jobUid}/conversations/lqas': {
    get: operations['listLQAConversations']
  }
  '/api2/v1/languages': {
    get: operations['listOfLanguages']
  }
  '/api2/v1/lqa/assessments/reports': {
    /**
     * Returns a single xlsx report or ZIP archive with multiple reports.
     * If any given jobPart is not from LQA workflow step, reports from successive workflow steps may be returned
     * If none were found returns 404 error, otherwise returns those that were found.
     */
    get: operations['downloadLqaReports']
  }
  '/api2/v1/lqa/profiles': {
    get: operations['getLqaProfiles']
    post: operations['createLqaProfile']
  }
  '/api2/v1/lqa/profiles/{profileUid}': {
    get: operations['getLqaProfile']
    put: operations['updateLqaProfile']
    delete: operations['deleteLqaProfile']
  }
  '/api2/v1/lqa/profiles/defaultValues': {
    get: operations['getLqaProfileDefaultValues']
  }
  '/api2/v1/lqa/profiles/{profileUid}/default': {
    post: operations['makeDefault']
  }
  '/api2/v1/lqa/profiles/{profileUid}/duplicate': {
    post: operations['duplicateProfile']
  }
  '/api2/v1/lqa/profiles/authors': {
    get: operations['getLqaProfileAuthors']
  }
  '/api2/v1/machineTranslateSettings/{mtsUid}/status': {
    get: operations['getStatus']
  }
  '/api2/v1/machineTranslateSettings': {
    get: operations['getList']
  }
  '/api2/v1/machineTranslateSettings/{mtsUid}': {
    get: operations['getMTSettings']
  }
  '/api2/v1/machineTranslateSettings/thirdPartyEngines': {
    get: operations['getThirdPartyEnginesList']
  }
  '/api2/v1/machineTranslateSettings/types': {
    get: operations['getMTTypes']
  }
  '/api2/v1/machineTranslations/{mtSettingsUid}/translate': {
    post: operations['machineTranslation']
  }
  '/api2/v1/mappings/tasks/{id}': {
    get: operations['getMappingForTask']
  }
  '/api2/v1/importSettings/default': {
    get: operations['getImportSettings']
  }
  '/api2/v1/importSettings/{uid}': {
    get: operations['getImportSettings_1']
    delete: operations['deleteImportSettings']
  }
  '/api2/v1/importSettings': {
    get: operations['listImportSettings']
    put: operations['editImportSettings']
    /**
     * Pre-defined import settings is handy for [Create Job](#operation/createJob).
     *                   See [supported file types](https://wiki.memsource.com/wiki/API_File_Type_List)
     */
    post: operations['createImportSettings']
  }
  '/api2/v1/jobs/{jobUid}/conversations/plains/{conversationId}': {
    get: operations['getPlainConversation']
    put: operations['updatePlainConversation']
    delete: operations['deletePlainConversation']
  }
  '/api2/v1/jobs/{jobUid}/conversations/plains': {
    get: operations['listPlainConversations']
  }
  '/api2/v1/jobs/{jobUid}/conversations/plains/{conversationId}/comments/{commentId}': {
    delete: operations['deletePlainComment']
  }
  '/api2/v1/projects/{projectUid}': {
    get: operations['getProject']
    delete: operations['deleteProject']
    patch: operations['patchProject']
  }
  '/api2/v1/projects/{projectUid}/assignableTemplates': {
    get: operations['assignableTemplates']
  }
  '/api2/v1/projects/{projectUid}/applyTemplate/{templateUid}/assignProviders': {
    post: operations['assignLinguistsFromTemplate']
  }
  '/api2/v1/projects/{projectUid}/applyTemplate/{templateUid}/assignProviders/forJobParts': {
    post: operations['assignLinguistsFromTemplateToJobParts']
  }
  '/api2/v1/projects': {
    get: operations['listProjects']
  }
  '/api2/v1/projects/{projectUid}/workflowSteps': {
    post: operations['addWorkflowSteps']
  }
  '/api2/v1/projects/{projectUid}/targetLangs': {
    /** Add target languages to project */
    post: operations['addTargetLanguageToProject']
  }
  '/api2/v1/projects/{projectUid}/assignVendor': {
    /**
     * To unassign Vendor from Project, use empty body:
     * ```
     * {}
     * ```
     */
    post: operations['assignVendorToProject']
  }
  '/api2/v1/projects/{projectUid}/clone': {
    post: operations['cloneProject']
  }
  '/api2/v1/projects/{projectUid}/providers': {
    get: operations['getProjectAssignments']
  }
  '/api2/v1/projects/{projectUid}/setStatus': {
    post: operations['setProjectStatus']
  }
  '/api2/v1/projects/{projectUid}/financialSettings': {
    get: operations['getFinancialSettings']
    put: operations['setFinancialSettings']
  }
  '/api2/v1/projects/{projectUid}/qaSettingsChecks': {
    /** Returns enabled quality assurance settings. */
    get: operations['enabledQualityChecks']
  }
  '/api2/v1/projects/{projectUid}/lqaSettings': {
    get: operations['getProjectSettings']
  }
  '/api2/v1/projects/{projectUid}/mtSettings': {
    get: operations['getMtSettingsForProject']
    /**
     * This will erase all mtSettings per language for project.
     *         To remove all machine translate settings from project call without a machineTranslateSettings parameter.
     */
    put: operations['setMtSettingsForProject']
  }
  '/api2/v1/projects/{projectUid}/quotes': {
    get: operations['getQuotesForProject']
  }
  '/api2/v1/projects/{projectUid}/mtSettingsPerLanguage': {
    /** This will erase mtSettings for project */
    put: operations['setMtSettingsPerLanguageForProject']
  }
  '/api2/v1/projects/{projectUid}/analyseSettings': {
    get: operations['getAnalyseSettingsForProject']
  }
  '/api2/v1/projects/{projectUid}/importSettings': {
    get: operations['getImportSettings_2']
    put: operations['editImportSettings_1']
  }
  '/api2/v1/projects/{projectUid}/fileNamingSettings': {
    get: operations['getFileNamingSettings']
    put: operations['updateFileNamingSettings']
  }
  '/api2/v1/projects/{projectUid}/customFields': {
    get: operations['getCustomFieldsPage']
    put: operations['editCustomFields']
    post: operations['createCustomFields']
  }
  '/api2/v1/projects/{projectUid}/customFields/{fieldInstanceUid}': {
    get: operations['getCustomField_1']
    put: operations['editCustomField']
    delete: operations['deleteCustomField_1']
  }
  '/api2/v1/projects/{projectUid}/jobs/{jobUid}/setStatus': {
    post: operations['setStatus']
  }
  '/api2/v1/projects/{projectUid}/jobs/{jobUid}': {
    get: operations['getPart']
    put: operations['editPart']
    patch: operations['patchPart']
  }
  '/api2/v1/projects/{projectUid}/jobs/{jobUid}/pseudoTranslate': {
    post: operations['pseudoTranslateJobPart']
  }
  '/api2/v1/projects/{projectUid}/jobs/translations': {
    delete: operations['deleteAllTranslations']
  }
  '/api2/v1/projects/{projectUid}/jobs/{jobUid}/qualityAssurances/ignoredWarnings': {
    post: operations['addIgnoredWarnings']
    delete: operations['deleteIgnoredWarnings']
  }
  '/api2/v1/projects/{projectUid}/jobs/{jobUid}/importSettings': {
    get: operations['getImportSettings_3']
    put: operations['editJobImportSettings']
  }
  '/api2/v1/projects/{projectUid}/jobs/{jobUid}/statusChanges': {
    get: operations['statusChanges']
  }
  '/api2/v1/projects/{projectUid}/jobs/copySourceToTarget': {
    post: operations['copySourceToTarget']
  }
  '/api2/v1/projects/{projectUid}/jobs/{jobUid}/copySourceToTarget': {
    post: operations['copySourceToTargetJobPart']
  }
  '/api2/v1/projects/{projectUid}/jobs/{jobUid}/translationResources': {
    get: operations['getTranslationResources']
  }
  '/api2/v1/projects/{projectUid}/jobs/{jobUid}/segments': {
    get: operations['listSegments']
  }
  '/api2/v1/projects/{projectUid}/jobs/{jobUid}/original': {
    get: operations['getOriginalFile']
  }
  '/api2/v1/projects/{projectUid}/jobs/{jobUid}/preview': {
    get: operations['filePreviewJob']
    /** Takes bilingual file (.mxliff only) as argument. If not passed, data will be taken from database */
    post: operations['filePreview']
  }
  '/api2/v1/projects/{projectUid}/jobs/{jobUid}/targetFileWarnings': {
    /** This call will return target file's warnings. This means even for other jobs that were created via 'split jobs' etc. */
    get: operations['getCompletedFileWarnings']
  }
  '/api2/v1/projects/{projectUid}/jobs/{jobUid}/previewUrl': {
    get: operations['previewUrls']
  }
  '/api2/v1/projects/{projectUid}/jobs': {
    /**
     * Job file can be provided directly in the message body or downloaded from connector.
     *
     * Please supply job metadata in `Memsource` header.
     *
     * For file in the request body provide also the filename in `Content-Disposition` header.
     *
     * Accepted metadata:
     *
     *   - `targetLangs` - **required**
     *   - `due` - ISO 8601
     *   - `workflowSettings` - project with workflow - see examples bellow
     *   - `assignments` - project without workflows - see examples bellow
     *   - `importSettings` - re-usable import settings - see [Create import settings](#operation/createImportSettings)
     *   - `useProjectFileImportSettings` - mutually exclusive with importSettings
     *   - `callbackUrl` - consumer callback
     *   - `path` - original destination directory
     *   - `preTranslate` - set pre translate job after import
     *   - `semanticMarkup` - set semantic markup processing after import when enabled for organization
     *
     *   for remote file jobs also `remoteFile` - see examples bellow:
     *   - `connectorToken` - remote connector token
     *   - `remoteFolder`
     *   - `remoteFileName`
     *   - `continuous` - true for continuous job
     *
     * Create and assign job in project without workflow step:
     * ```
     *
     * {
     *   "targetLangs": [
     *     "cs_cz"
     *   ],
     *   "callbackUrl": "https://my-shiny-service.com/consumeCallback",
     *   "importSettings": {
     *     "uid": "abcd123"
     *   },
     *   "due": "2007-12-03T10:15:30.00Z",
     *   "path": "destination directory",
     *   "assignments": [
     *     {
     *       "targetLang": "cs_cz",
     *       "providers": [
     *         {
     *           "id": "4321",
     *           "type": "USER"
     *         }
     *       ]
     *     }
     *   ],
     *   "notifyProvider": {
     *     "organizationEmailTemplate": {
     *       "id": "39"
     *     },
     *     "notificationIntervalInMinutes": "10"
     *   }
     * }
     * ```
     *
     * Create job from remote file without workflow steps:
     * ```
     *
     * {
     *   "remoteFile": {
     *     "connectorToken": "948123ef-e1ef-4cd3-a90e-af1617848af3",
     *     "remoteFolder": "/",
     *     "remoteFileName": "Few words.docx",
     *     "continuous": false
     *   },
     *   "assignments": [],
     *   "workflowSettings": [],
     *   "targetLangs": [
     *     "cs"
     *   ]
     * }
     * ```
     *
     * Create and assign job in project with workflow step:
     * ```
     *
     * {
     *   "targetLangs": [
     *     "de"
     *   ],
     *   "useProjectFileImportSettings": "true",
     *   "workflowSettings": [
     *     {
     *       "id": "64",
     *       "due": "2007-12-03T10:15:30.00Z",
     *       "assignments": [
     *         {
     *           "targetLang": "de",
     *           "providers": [
     *             {
     *               "id": "3",
     *               "type": "VENDOR"
     *             }
     *           ]
     *         }
     *       ],
     *       "notifyProvider": {
     *         "organizationEmailTemplate": {
     *           "id": "39"
     *         },
     *         "notificationIntervalInMinutes": "10"
     *       }
     *     }
     *   ]
     * }
     * ```
     */
    post: operations['createJob']
  }
  '/api2/v1/projects/{projectUid}/jobs/connectorTask': {
    /**
     * Creates the job in project specified by path param projectUid. Source file is defined by downloadTaskId parameter. That is value of finished download async task
     * [Connector - Download file (async)](#operation/getFile_1).
     *
     * Please supply job metadata in body.
     *
     * Accepted metadata:
     *
     *   - `targetLangs` - **required**
     *   - `due` - ISO 8601
     *   - `workflowSettings` - project with workflow - see examples bellow
     *   - `assignments` - project without workflows - see examples bellow
     *   - `importSettings` - re-usable import settings - see [Create import settings](#operation/createImportSettings)
     *   - `useProjectFileImportSettings` - mutually exclusive with importSettings
     *   - `callbackUrl` - consumer callback
     *   - `path` - original destination directory
     *   - `preTranslate` - set pre translate job after import
     *   - `semanticMarkup` - set semantic markup processing after import when enabled for organization
     *
     * Create job simple (without workflow steps, without assignments):
     * ```
     * {
     *   "targetLangs": [
     *     "cs_cz",
     *     "es_es"
     *   ]
     * }
     * ```
     *
     * Create and assign job in project without workflow step:
     * ```
     * {
     *   "targetLangs": [
     *     "cs_cz"
     *   ],
     *   "callbackUrl": "https://my-shiny-service.com/consumeCallback",
     *   "importSettings": {
     *     "uid": "abcd123"
     *   },
     *   "due": "2007-12-03T10:15:30.00Z",
     *   "path": "destination directory",
     *   "assignments": [
     *     {
     *       "targetLang": "cs_cz",
     *       "providers": [
     *         {
     *           "id": "4321",
     *           "type": "USER"
     *         }
     *       ]
     *     }
     *   ],
     *   "notifyProvider": {
     *     "organizationEmailTemplate": {
     *       "id": "39"
     *     },
     *     "notificationIntervalInMinutes": "10"
     *   }
     * }
     * ```
     *
     * Create and assign job in project with workflow step:
     * ```
     * {
     *   "targetLangs": [
     *     "de"
     *   ],
     *   "useProjectFileImportSettings": "true",
     *   "workflowSettings": [
     *     {
     *       "id": "64",
     *       "due": "2007-12-03T10:15:30.00Z",
     *       "assignments": [
     *         {
     *           "targetLang": "de",
     *           "providers": [
     *             {
     *               "id": "3",
     *               "type": "VENDOR"
     *             }
     *           ]
     *         }
     *       ],
     *       "notifyProvider": {
     *         "organizationEmailTemplate": {
     *           "id": "39"
     *         },
     *         "notificationIntervalInMinutes": "10"
     *       }
     *     }
     *   ]
     * }
     * ```
     */
    post: operations['createJobFromAsyncDownloadTask']
  }
  '/api2/v1/projects/{projectUid}/jobs/source': {
    /**
     * API updated source file for specified job
     *
     * Job file can be provided directly in the message body.
     *
     * Please supply jobs in `Memsource` header.
     *
     * For file in the request body provide also the filename in `Content-Disposition` header.
     *
     * If a job from a multilingual file is updated, all jobs from the same file are update too even if their UIDs aren't
     * listed in the jobs field.
     *
     * Accepted metadata:
     *
     *   - `jobs` - **required** - list of jobs UID reference (maximum size `100`)
     *   - `preTranslate` - pre translate flag (default `false`)
     *   - `allowAutomaticPostAnalysis` - if automatic post editing analysis should be created. If not specified then value
     *                                    is taken from the analyse settings of the project
     *   - `callbackUrl` - consumer callback
     *
     * Job restrictions:
     *   - job must belong to project specified in path (`projectUid`)
     *   - job `UID` must be from the first workflow step
     *   - job cannot be split
     *   - job cannot be continuous
     *   - job cannot originate in a connector
     *   - status in any of the job's workflow steps cannot be a final
     *     status (`COMPLETED_BY_LINGUIST`, `COMPLETED`, `CANCELLED`)
     *   - job UIDs must be from the same multilingual file if a multilingual file is updated
     *   - multiple multilingual files or a mixture of multilingual and other jobs cannot be updated in one call
     *
     * File restrictions:
     *   - file cannot be a `.zip` file
     *
     * Example:
     *
     * ```
     * {
     *   "jobs": [
     *     {
     *         "uid": "jobIn1stWfStepAndNonFinalStatusUid"
     *     }
     *   ],
     *   "preTranslate": false,
     *   "allowAutomaticPostAnalysis": false
     *   "callbackUrl": "https://my-shiny-service.com/consumeCallback"
     * }
     * ```
     */
    post: operations['updateSource']
  }
  '/api2/v1/projects/{projectUid}/jobs/target': {
    /**
     * API update target file for specified job
     *
     * Job file can be provided directly in the message body.
     *
     * Please supply jobs in `Memsource` header.
     *
     * For file in the request body provide also the filename in `Content-Disposition` header.
     *
     * Accepted metadata:
     *
     *   - `jobs` - **required** - list of jobs UID reference (maximum size `1`)
     *   - `propagateConfirmedToTm` - sets if confirmed segments should be stored in TM (default value: true)
     *   - `callbackUrl` - consumer callback
     *   - `targetSegmentationRule` - ID reference to segmentation rule of organization to use for update target
     *   - `unconfirmChangedSegments` - sets if segments should stay unconfirmed
     *
     * Job restrictions:
     *   - job must belong to project specified in path (`projectUid`)
     *   - job cannot be split
     *   - job cannot be continuous
     *   - job cannot be multilingual
     *   - job cannot originate in a connector
     *   - job cannot have different file extension than original file
     *
     * File restrictions:
     *   - file cannot be a `.zip` file
     *   - update target is not allowed for jobs with file extensions: xliff, po, tbx, tmx, ttx, ts
     *
     * Example:
     *
     * ```
     * {
     *   "jobs": [
     *     {
     *         "uid": "jobUid"
     *     }
     *   ],
     *   "propagateConfirmedToTm": true,
     *   "targetSegmentationRule": {
     *         "id": "1"
     *    },
     *   "callbackUrl": "https://my-shiny-service.com/consumeCallback"
     * }
     * ```
     */
    post: operations['updateTarget']
  }
  '/api2/v1/projects/{projectUid}/jobs/batch': {
    /** Returns only jobs which were updated by the batch operation. */
    put: operations['editParts']
    delete: operations['deleteParts']
  }
  '/api2/v1/projects/{projectUid}/jobs/humanTranslate': {
    post: operations['humanTranslate']
  }
  '/api2/v1/projects/{projectUid}/jobs/notifyAssigned': {
    post: operations['notifyAssigned']
  }
  '/api2/v1/projects/{projectUid}/jobs/compare': {
    post: operations['comparePart']
  }
  '/api2/v1/projects/{projectUid}/jobs/bilingualFile': {
    post: operations['getBilingualFile']
  }
  '/api2/v1/projects/{projectUid}/jobs/{jobUid}/qualityAssurances/ignoreChecks': {
    post: operations['updateIgnoredChecks']
  }
  '/api2/v1/projects/{projectUid}/jobs/{jobUid}/workflowStep': {
    get: operations['getPartsWorkflowStep']
  }
  '/api2/v1/projects/{projectUid}/jobs/search': {
    post: operations['searchPartsInProject']
  }
  '/api2/v1/projects/{projectUid}/jobs/segmentsCount': {
    /** Provides segments count (progress data) */
    post: operations['getSegmentsCount']
  }
  '/api2/v1/projects/{projectUid}/jobs/{jobUid}/split': {
    /**
     * Splits job by one of the following methods:
     * * **After specific segments** - fill in `segmentOrdinals`
     * * **Into X parts** - fill in `partCount`
     * * **Into parts with specific size** - fill in `partSize`. partSize represents segment count in each part.
     * * **Into parts with specific word count** - fill in `wordCount`
     * * **By document parts** - fill in `byDocumentParts`, works only with **PowerPoint** files
     *
     * Only one option at a time is allowed.
     */
    post: operations['split']
  }
  '/api2/v1/projects/{projectUid}/jobs/{jobUid}/termBases/createByJob': {
    /** Create new term in the write term base assigned to the job */
    post: operations['createTermByJob']
  }
  '/api2/v1/projects/{projectUid}/references': {
    get: operations['listReferenceFiles']
    delete: operations['batchDeleteReferenceFiles']
  }
  '/api2/v1/projects/{projectUid}/references/{referenceFileId}': {
    get: operations['downloadReference']
  }
  '/api2/v1/projects/{projectUid}/references/download': {
    post: operations['batchDownloadReferenceFiles']
  }
  '/api2/v1/projects/{projectUid}/references/creators': {
    /**
     * The result is not paged and returns up to 50 users.
     *                 If the requested user is not included, the search can be narrowed down with the `userName` parameter.
     */
    get: operations['listReferenceFileCreators']
  }
  '/api2/v1/projectTemplates/{projectTemplateUid}/transMemories/relevant': {
    get: operations['relevantTransMemories']
  }
  '/api2/v1/projectTemplates/{projectTemplateUid}/qaSettings': {
    get: operations['getProjectTemplateQASettings']
    put: operations['setProjectTemplateQASettings']
  }
  '/api2/v1/projectTemplates': {
    get: operations['getProjectTemplates']
    post: operations['createProjectTemplate']
  }
  '/api2/v1/projectTemplates/{projectTemplateUid}': {
    /** Note: importSettings in response is deprecated and will be always null */
    get: operations['getProjectTemplate']
    put: operations['editProjectTemplate']
    delete: operations['deleteProjectTemplate']
  }
  '/api2/v1/projectTemplates/{projectTemplateUid}/analyseSettings': {
    get: operations['getAnalyseSettingsForProjectTemplate']
    put: operations['updateAnalyseSettingsForProjectTemplate']
  }
  '/api2/v1/projectTemplates/{projectTemplateUid}/importSettings': {
    get: operations['getImportSettingsForProjectTemplate']
    put: operations['editProjectTemplateImportSettings']
  }
  '/api2/v1/projectTemplates/{projectTemplateUid}/mtSettings': {
    get: operations['getMachineTranslateSettingsForProjectTemplate']
  }
  '/api2/v1/projectTemplates/{projectTemplateUid}/termBases': {
    get: operations['getProjectTemplateTermBases']
    put: operations['setProjectTemplateTermBases']
  }
  '/api2/v1/projectTemplates/{projectTemplateUid}/accessSettings': {
    get: operations['getProjectTemplateAccessSettings']
    put: operations['editProjectTemplateAccessSettings']
  }
  '/api2/v1/projectTemplates/{projectTemplateUid}/customFields': {
    get: operations['getCustomFieldsPage_1']
    put: operations['editCustomFields_1']
    post: operations['createCustomFields_1']
  }
  '/api2/v1/projectTemplates/{projectTemplateUid}/customFields/{fieldInstanceUid}': {
    get: operations['getCustomField_2']
    put: operations['editCustomField_1']
    delete: operations['deleteCustomField_2']
  }
  '/api2/v1/projects/{projectUid}/termBases': {
    get: operations['getProjectTermBases']
    put: operations['setProjectTermBases']
  }
  '/api2/v1/projects/{projectUid}/termBases/relevant': {
    get: operations['relevantTermBases']
  }
  '/api2/v1/projects/{projectUid}/transMemories/relevant': {
    get: operations['relevantTransMemories_1']
  }
  '/api2/v1/projects/{projectUid}/transMemories/searchSegmentInProject': {
    /**
     * Returns at most <i>maxSegments</i>
     *             records with <i>score >= scoreThreshold</i> and at most <i>maxSubsegments</i> records which are subsegment,
     *             i.e. the source text is substring of the query text.
     */
    post: operations['searchSegment_1']
  }
  '/api2/v1/quotes/{quoteUid}': {
    get: operations['get_2']
    delete: operations['deleteQuote']
  }
  '/api2/v1/quotes/email': {
    post: operations['emailQuotes']
  }
  '/api2/v1/scim/ServiceProviderConfig': {
    get: operations['getServiceProviderConfigDto']
  }
  '/api2/v1/scim/ResourceTypes': {
    get: operations['getResourceTypes']
  }
  '/api2/v1/scim/Schemas': {
    get: operations['getSchemas']
  }
  '/api2/v1/scim/Schemas/{schemaUrn}': {
    get: operations['getSchemaByUrn']
  }
  '/api2/v1/scim/Users/{userId}': {
    get: operations['getScimUser']
    put: operations['editUser']
    delete: operations['deleteUser']
    patch: operations['patchUser']
  }
  '/api2/v1/scim/Users': {
    /**
     * This operation supports <a href="http://ldapwiki.com/wiki/SCIM%20Filtering" target="_blank">SCIM Filter</a>,
     * <a href="http://ldapwiki.com/wiki/SCIM%20Search%20Request" target="_blank">SCIM attributes</a> and
     * <a href="http://ldapwiki.com/wiki/SCIM%20Sorting" target="_blank">SCIM sort</a>
     *
     * Supported attributes:
     *   - `id`
     *   - `active`
     *   - `userName`
     *   - `name.givenName`
     *   - `name.familyName`
     *   - `emails.value`
     *   - `meta.created`
     */
    get: operations['searchUsers']
    /**
     * Supported schema: `"urn:ietf:params:scim:schemas:core:2.0:User"`
     *
     * Create active user:
     * ```
     * {
     *     "schemas": [
     *         "urn:ietf:params:scim:schemas:core:2.0:User"
     *     ],
     *     "active": true,
     *     "userName": "john.doe",
     *     "emails": [
     *         {
     *             "primary": true,
     *             "value": "john.doe@example.com",
     *             "type": "work"
     *         }
     *     ],
     *     "name": {
     *         "givenName": "John",
     *         "familyName": "Doe"
     *     }
     * }
     * ```
     */
    post: operations['createUserSCIM']
  }
  '/api2/v1/segmentationRules/{segRuleId}': {
    get: operations['getSegmentationRule']
    put: operations['updatesSegmentationRule']
    delete: operations['deletesSegmentationRule']
  }
  '/api2/v1/segmentationRules': {
    get: operations['getListOfSegmentationRules']
    /** Creates new Segmentation Rule with file and segRule JSON Object as header parameter. The same object is used for GET action. */
    post: operations['createSegmentationRule']
  }
  '/api2/v1/spellCheck/check/{jobUid}': {
    /** Spell check using the settings from the project of the job */
    post: operations['checkByJob']
  }
  '/api2/v1/spellCheck/suggest': {
    /** Spell check suggest using the users's spell check dictionary */
    post: operations['suggest']
  }
  '/api2/v1/spellCheck/words': {
    post: operations['addWord']
  }
  '/api2/v1/spellCheck/check': {
    /** Spell check using the settings of the user's organization */
    post: operations['check']
  }
  '/api2/v1/subDomains/{subDomainUid}': {
    get: operations['getSubDomain']
    put: operations['updateSubDomain']
    delete: operations['deleteSubDomain']
  }
  '/api2/v1/subDomains': {
    get: operations['listSubDomains']
    post: operations['createSubDomain']
  }
  '/api2/v1/termBases/{termBaseUid}': {
    get: operations['getTermBase']
    /** It is possible to add new languages only */
    put: operations['updateTermBase']
    delete: operations['deleteTermBase']
  }
  '/api2/v1/termBases': {
    get: operations['listTermBases']
    post: operations['createTermBase']
  }
  '/api2/v1/termBases/{termBaseUid}/upload': {
    /**
     * Terms can be imported from XLS/XLSX and TBX file formats into a term base.
     * See <a target="_blank" href="https://support.phrase.com/hc/en-us/articles/5709733372188">Phrase Help Center</a>
     */
    post: operations['importTermBase']
  }
  '/api2/v1/termBases/{termBaseUid}/concepts': {
    get: operations['listConcepts']
    post: operations['createConcept']
    delete: operations['deleteConcepts']
  }
  '/api2/v1/termBases/{termBaseUid}/concepts/{conceptUid}': {
    get: operations['getConcept']
    put: operations['updateConcept']
  }
  '/api2/v1/termBases/{termBaseUid}/terms': {
    /** Set conceptId to assign the term to an existing concept, otherwise a new concept will be created. */
    post: operations['createTerm']
    /** Deletes all terms */
    delete: operations['clearTermBase']
  }
  '/api2/v1/termBases/{termBaseUid}/terms/{termId}': {
    get: operations['getTerm']
    put: operations['updateTerm']
    delete: operations['deleteTerm']
  }
  '/api2/v1/termBases/{termBaseUid}/concepts/{conceptId}': {
    delete: operations['deleteConcept']
  }
  '/api2/v1/termBases/{termBaseUid}/concepts/{conceptId}/terms': {
    get: operations['listTermsOfConcept']
  }
  '/api2/v1/termBases/{termBaseUid}/lastBackgroundTask': {
    get: operations['getLastBackgroundTask']
  }
  '/api2/v1/termBases/{termBaseUid}/browse': {
    post: operations['browseTerms']
  }
  '/api2/v1/termBases/{termBaseUid}/search': {
    post: operations['searchTerms']
  }
  '/api2/v1/termBases/{termBaseUid}/export': {
    get: operations['exportTermBase']
  }
  '/api2/v1/termBases/{termBaseUid}/metadata': {
    get: operations['getTermBaseMetadata']
  }
  '/api2/v1/transMemories': {
    get: operations['listTransMemories']
    post: operations['createTransMemory']
  }
  '/api2/v1/transMemories/{transMemoryUid}': {
    get: operations['getTransMemory']
    put: operations['editTransMemory']
    delete: operations['deleteTransMemory']
  }
  '/api2/v1/transMemories/{transMemoryUid}/targetLanguages': {
    post: operations['addTargetLangToTransMemory']
  }
  '/api2/v1/transMemories/extractCleaned': {
    /** Returns a ZIP file containing the cleaned translation memories in the specified outputFormat. */
    post: operations['exportCleanedTMs']
  }
  '/api2/v1/transMemories/downloadCleaned/{asyncRequestId}': {
    get: operations['downloadCleanedTM']
  }
  '/api2/v1/transMemories/{transMemoryUid}/segments': {
    post: operations['insertToTransMemory']
    delete: operations['clearTransMemory']
  }
  '/api2/v1/transMemories/{transMemoryUid}/relatedProjects': {
    get: operations['getRelatedProjects']
  }
  '/api2/v1/transMemories/{transMemoryUid}/metadata': {
    get: operations['getMetadata']
  }
  '/api2/v1/transMemories/{transMemoryUid}/segments/{segmentId}': {
    put: operations['updateTranslation']
    /** Not recommended for bulk removal of segments */
    delete: operations['deleteSourceAndTranslations']
  }
  '/api2/v1/transMemories/{transMemoryUid}/segments/{segmentId}/lang/{lang}': {
    /** Not recommended for bulk removal of segments */
    delete: operations['deleteTranslation']
  }
  '/api2/v1/transMemories/{transMemoryUid}/lastBackgroundTask': {
    get: operations['getBackgroundTasks_1']
  }
  '/api2/v1/transMemories/{transMemoryUid}/wildCardSearch': {
    post: operations['wildcardSearch']
  }
  '/api2/v1/transMemories/downloadExport/{asyncRequestId}': {
    get: operations['downloadSearchResult']
  }
  '/api2/v1/transMemories/{transMemoryUid}/exportByQueryAsync': {
    /** Use [this API](#operation/downloadSearchResult) to download result */
    post: operations['exportByQueryAsync']
  }
  '/api2/v1/transMemories/{transMemoryUid}/search': {
    post: operations['search']
  }
  '/api2/v1/projects/{projectUid}/jobs/{jobUid}/translations/translateWithMachineTranslation': {
    /** Configured machine translate settings is used */
    post: operations['machineTranslationJob']
  }
  '/api2/v1/priceLists/{priceListUid}': {
    get: operations['getPriceList']
    put: operations['updatePriceList']
    delete: operations['deletePriceList']
  }
  '/api2/v1/priceLists': {
    get: operations['getListOfPriceList']
    post: operations['createPriceList']
  }
  '/api2/v1/priceLists/{priceListUid}/priceSets': {
    get: operations['getPricesWithWorkflowSteps']
    post: operations['createLanguagePair']
    delete: operations['deleteLanguagePairs']
  }
  '/api2/v1/priceLists/{priceListUid}/priceSets/{sourceLanguage}/{targetLanguage}': {
    delete: operations['deleteLanguagePair']
  }
  '/api2/v1/priceLists/{priceListUid}/priceSets/minimumPrices': {
    post: operations['setMinimumPriceForSet']
  }
  '/api2/v1/priceLists/{priceListUid}/priceSets/prices': {
    /** If object contains only price, all languages and workflow steps will be updated */
    post: operations['setPrices']
  }
  '/api2/v1/users/{userUid}': {
    delete: operations['deleteUser_1']
  }
  '/api2/v1/users/{userUid}/projects': {
    /** List projects in which the user is assigned to at least one job matching the criteria */
    get: operations['listAssignedProjects']
  }
  '/api2/v1/users/{userUid}/updatePassword': {
    /**
     * * Password length must be between 8 and 255
     * * Password must not be same as the username
     */
    post: operations['updatePassword']
  }
  '/api2/v1/users/{userUid}/emailLoginInformation': {
    post: operations['sendLoginInfo']
  }
  '/api2/v1/users/{userUid}/undelete': {
    post: operations['cancelDeletion']
  }
  '/api2/v1/users/{userUid}/loginStatistics': {
    get: operations['loginActivity']
  }
  '/api2/v1/users': {
    get: operations['getListOfUsersFiltered']
  }
  '/api2/v1/users/{userUid}/jobs': {
    get: operations['listJobs']
  }
  '/api2/v1/users/{userUid}/workflowSteps': {
    get: operations['listWorkflowSteps']
  }
  '/api2/v1/users/{userUid}/targetLangs': {
    get: operations['listTargetLangs']
  }
  '/api2/v1/users/lastLogins': {
    get: operations['user-lastLogins']
  }
  '/api2/v1/vendors/{vendorUid}': {
    get: operations['getVendor']
  }
  '/api2/v1/vendors': {
    get: operations['listVendors']
    post: operations['createVendor']
  }
  '/api2/v1/webhooksCalls': {
    get: operations['getWebhookCallsList']
  }
  '/api2/v1/webhooksCalls/replay': {
    /** Replays given list of Webhook Calls in specified order in the request */
    post: operations['replayWebhookCalls']
  }
  '/api2/v1/webhooksCalls/replay/latest': {
    /** Replays specified number of last Webhook calls from oldest to the newest one */
    post: operations['replayLast']
  }
  '/api2/v1/workflowSteps': {
    get: operations['listWFSteps']
    post: operations['createWFStep']
  }
  '/api2/v1/workflowSteps/{workflowStepUid}': {
    put: operations['editWFStep']
  }
  '/api2/v2/analyses': {
    /** Returns created analyses - batching analyses by number of segments (api.segment.count.approximation, default 100000), in case request contains more segments than maximum (api.segment.max.count, default 300000), returns 400 bad request. */
    post: operations['createAnalyseAsync_1']
  }
  '/api2/v2/analyses/{analyseUid}': {
    /**
     * If no netRateScheme is provided in
     * request, then netRateScheme associated with provider will be used if it exists, otherwise it will remain the same
     * as it was.
     */
    put: operations['editAnalysis']
  }
  '/api2/v2/analyses/bulk': {
    /**
     * If no netRateScheme is provided in request, then netRateScheme associated with provider will
     * be used if it exists, otherwise it will remain the same as it was.
     */
    put: operations['analyses-batchEdit-v2']
  }
  '/api2/v2/bilingualFiles': {
    /** Returns updated job parts and projects */
    post: operations['uploadBilingualFileV2']
  }
  '/api2/v2/connectors/{connectorId}/folders/{folder}/files/{file}/tasks/{taskId}': {
    /** Download the file by referencing successfully finished async download request [Connector - Download file (async)](#operation/getFile_1). */
    get: operations['getPreparedFile']
  }
  '/api2/v2/connectors/{connectorId}/folders/{folder}/files/{fileName}/upload': {
    /** Upload a file to a subfolder of the selected connector */
    post: operations['uploadFile_1']
  }
  '/api2/v2/connectors/{connectorId}/folders/{folder}/files/{file}': {
    /**
     * Create an asynchronous request to download a file from a (sub)folder of the selected connector.
     * After a callback with successful response is received, prepared file can be downloaded by [Download prepared file](#operation/getPreparedFile)
     * or [Create job from connector asynchronous download task](#operation/createJobFromAsyncDownloadTask).
     */
    post: operations['getFile_1']
  }
  '/api2/v2/jobs/workflowChanges': {
    post: operations['downloadWorkflowChanges']
  }
  '/api2/v2/jobs/{jobUid}/conversations/lqas': {
    post: operations['createLqaConversation_1']
  }
  '/api2/v2/jobs/{jobUid}/conversations/lqas/{conversationId}': {
    put: operations['updateLqaConversation_1']
  }
  '/api2/v2/jobs/{jobUid}/conversations/lqas/{conversationId}/comments': {
    post: operations['addLQAComment_1']
  }
  '/api2/v2/jobs/{jobUid}/conversations/lqas/{conversationId}/comments/{commentId}': {
    put: operations['updateLQAComment_1']
  }
  '/api2/v2/lqa/profiles/authors': {
    get: operations['getLqaProfileAuthorsV2']
  }
  '/api2/v2/projects/{projectUid}/providers/suggest': {
    post: operations['listProviders_3']
  }
  '/api2/v2/projects/{projectUid}/qaSettings': {
    put: operations['setProjectQASettingsV2']
  }
  '/api2/v2/projects/applyTemplate/{templateUid}': {
    post: operations['createProjectFromTemplateV2']
  }
  '/api2/v2/projects/applyTemplate/async/{templateUid}': {
    post: operations['createProjectFromTemplateV2Async']
  }
  '/api2/v2/projects/{projectUid}/accessSettings': {
    get: operations['getProjectAccessSettingsV2']
    put: operations['editProjectAccessSettingsV2']
  }
  '/api2/v2/projects/{projectUid}/workflowSteps': {
    get: operations['getProjectWorkflowStepsV2']
  }
  '/api2/v2/projects/{projectUid}': {
    put: operations['editProjectV2']
  }
  '/api2/v2/projects/{projectUid}/jobs': {
    get: operations['listPartsV2']
  }
  '/api2/v2/projects/{projectUid}/jobs/qualityAssurances/settings': {
    /** Returns enabled quality assurance checks and settings. */
    get: operations['enabledQualityChecksForJob']
  }
  '/api2/v2/projects/{projectUid}/jobs/{jobUid}/qualityAssurances/settings': {
    /** Returns enabled quality assurance checks and settings for job. */
    get: operations['enabledQualityChecksForJob_1']
  }
  '/api2/v2/projects/{projectUid}/jobs/webEditor': {
    /**
     * Possible warning codes are:
     *   - `NOT_ACCEPTED_BY_LINGUIST` - Job is not accepted by linguist
     *   - `NOT_ASSIGNED_TO_LINGUIST` - Job is not assigned to linguist
     *   - `PDF` - One of requested jobs is PDF
     *   - `PREVIOUS_WORKFLOW_NOT_COMPLETED` - Previous workflow step is not completed
     *   - `PREVIOUS_WORKFLOW_NOT_COMPLETED_STRICT` - Previous workflow step is not completed and project has strictWorkflowFinish set to true
     *   - `IN_DELIVERED_STATE` - Jobs in DELIVERED state
     *   - `IN_COMPLETED_STATE` - Jobs in COMPLETED state
     *   - `IN_REJECTED_STATE` - Jobs in REJECTED state
     *
     * Possible error codes are:
     *   - `ASSIGNED_TO_OTHER_USER` - Job is accepted by other user
     *   - `NOT_UNIQUE_TARGET_LANG` - Requested jobs contains different target locales
     *   - `TOO_MANY_SEGMENTS` - Count of requested job's segments is higher than **40000**
     *   - `TOO_MANY_JOBS` - Count of requested jobs is higher than **290**
     *   - `COMPLETED_JOINED_WITH_OTHER` - Jobs in COMPLETED state cannot be joined with jobs in other states
     *   - `DELIVERED_JOINED_WITH_OTHER` - Jobs in DELIVERED state cannot be joined with jobs in other states
     *   - `REJECTED_JOINED_WITH_OTHER` - Jobs in REJECTED state cannot be joined with jobs in other states
     *
     * Warning response example:
     * ```
     * {
     *     "warnings": [
     *         {
     *             "message": "Not accepted by linguist",
     *             "args": {
     *                 "jobs": [
     *                     "abcd1234"
     *                 ]
     *             },
     *             "code": "NOT_ACCEPTED_BY_LINGUIST"
     *         },
     *         {
     *             "message": "Previous workflow step not completed",
     *             "args": {
     *                 "jobs": [
     *                     "abcd1234"
     *                 ]
     *             },
     *             "code": "PREVIOUS_WORKFLOW_NOT_COMPLETED"
     *         }
     *     ],
     *     "url": "/web/job/abcd1234-efgh5678/translate"
     * }
     * ```
     *
     * Error response example:
     * Status: `400 Bad Request`
     * ```
     * {
     *     "errorCode": "NOT_UNIQUE_TARGET_LANG",
     *     "errorDescription": "Only files with identical target languages can be joined",
     *     "errorDetails": [
     *         {
     *             "code": "NOT_UNIQUE_TARGET_LANG",
     *             "args": {
     *                 "targetLocales": [
     *                     "de",
     *                     "en"
     *                 ]
     *             },
     *             "message": "Only files with identical target languages can be joined"
     *         },
     *         {
     *             "code": "TOO_MANY_SEGMENTS",
     *             "args": {
     *                 "maxSegments": 40000,
     *                 "segments": 400009
     *             },
     *             "message": "Up to 40000 segments can be opened in the Memsource Web Editor, job has 400009 segments"
     *         }
     *     ]
     * }
     * ```
     */
    post: operations['webEditorLinkV2']
  }
  '/api2/v2/projects/{projectUid}/jobs/pseudoTranslate': {
    post: operations['pseudoTranslate_1']
  }
  '/api2/v2/projects/{projectUid}/jobs/preTranslate': {
    post: operations['preTranslate_1']
  }
  '/api2/v2/projects/{projectUid}/jobs/translations': {
    delete: operations['deleteAllTranslations_1']
  }
  '/api2/v2/projects/{projectUid}/jobs/{jobUid}/providers/suggest': {
    post: operations['listProviders_4']
  }
  '/api2/v2/projects/{projectUid}/jobs/{jobUid}/targetFile': {
    /**
     * This call will create async request for downloading target file with translation that can be downloaded when
     *     finished. This means even for other jobs that were created via 'split jobs' etc.
     */
    put: operations['completedFile_1']
  }
  '/api2/v2/projects/{projectUid}/jobs/{jobUid}/downloadTargetFile/{asyncRequestId}': {
    /**
     * This call will return target file with translation. This means even for other jobs that were created via
     *     'split jobs' etc.
     */
    get: operations['downloadCompletedFile']
  }
  '/api2/v2/projects/{projectUid}/jobs/qualityAssurances/ignoredWarnings': {
    post: operations['addIgnoredWarnings_1']
    delete: operations['deleteIgnoredWarnings_1']
  }
  '/api2/v2/projects/{projectUid}/references': {
    /**
     * The `json` request part allows sending additional data as JSON,
     * such as a text note that will be used for all the given reference files.
     * In case no `file` parts are sent, only 1 reference is created with the given note.
     * Either at least one file must be sent or the note must be specified.
     * Example:
     *
     * ```
     * {
     *     "note": "Sample text"
     * }
     * ```
     */
    post: operations['createReferenceFiles']
  }
  '/api2/v2/projectTemplates/{projectTemplateUid}/transMemories': {
    /**
     * If user wants to edit “All target languages” or "All workflow steps”,
     *                        but there are already varied TM settings for individual languages or steps,
     *                        then the user risks to overwrite these individual choices.
     */
    put: operations['setProjectTemplateTransMemoriesV2']
  }
  '/api2/v2/quotes': {
    /** Either WorkflowSettings or Units must be sent for billingUnit "Hour". */
    post: operations['createQuoteV2']
  }
  '/api2/v2/termBases/{termBaseUid}/upload': {
    /**
     * Terms can be imported from XLS/XLSX and TBX file formats into a term base.
     * See <a target="_blank" href="https://support.phrase.com/hc/en-us/articles/5709733372188">Phrase Help Center</a>
     */
    post: operations['importTermBaseV2']
  }
  '/api2/v2/transMemories/{transMemoryUid}/export': {
    /** Use [this API](#operation/downloadSearchResult) to download result */
    post: operations['exportV2']
  }
  '/api2/v2/transMemories/{transMemoryUid}/segments': {
    /** This call is **asynchronous**, use [this API](#operation/getAsyncRequest) to check the result */
    delete: operations['clearTransMemoryV2']
  }
  '/api2/v2/transMemories/{transMemoryUid}/import': {
    post: operations['importTransMemoryV2']
  }
  '/api2/v2/webhooks': {
    get: operations['getWebHookList_1']
    post: operations['createWebHook_1']
  }
  '/api2/v2/webhooks/{webHookUid}': {
    get: operations['getWebHook_1']
    put: operations['updateWebHook_1']
    delete: operations['deleteWebHook_1']
  }
  '/api2/v2/webhooks/previews': {
    get: operations['getWebhookPreviews']
  }
  '/api2/v2/webhooks/{webhookUid}/test': {
    post: operations['sendTestWebhook']
  }
  '/api2/v2/projects/{projectUid}/jobs/{jobUid}/termBases/searchInTextByJob': {
    /** Search in text in all read term bases assigned to the job */
    post: operations['searchTermsInTextByJobV2']
  }
  '/api2/v2/projects/{projectUid}/jobs/{jobUid}/termBases/searchByJob': {
    /** Search all read term bases assigned to the job */
    post: operations['searchTermsByJob_1']
  }
  '/api2/v3/analyses/{analyseUid}': {
    get: operations['getAnalyseV3']
  }
  '/api2/v3/auth/login': {
    post: operations['login_1']
  }
  '/api2/v3/auth/loginToSession': {
    post: operations['loginToSession_2']
  }
  '/api2/v3/auth/loginOther': {
    /** Available only for admin */
    post: operations['loginOther_1']
  }
  '/api2/v3/jobs': {
    /** Allows partial update, not breaking whole batch if single job fails and returns list of errors */
    patch: operations['patchUpdateJobParts']
  }
  '/api2/v3/projects/{projectUid}/jobs/{jobUid}/transMemories/search': {
    post: operations['searchByJob3']
  }
  '/api2/v3/projects/{projectUid}/jobs/{jobUid}/transMemories/wildCardSearch': {
    post: operations['wildCardSearchByJob3']
  }
  '/api2/v3/jobs/{jobUid}/conversations/plains/{conversationId}/comments': {
    post: operations['addPlainComment_2']
  }
  '/api2/v3/jobs/{jobUid}/conversations/plains': {
    post: operations['createSegmentTargetConversation_1']
  }
  '/api2/v3/jobs/{jobUid}/conversations/plains/{conversationId}/comments/{commentId}': {
    put: operations['updatePlainComment_1']
  }
  '/api2/v3/projects/{projectUid}/preTranslateSettings': {
    get: operations['getPreTranslateSettingsForProject_2']
    put: operations['editProjectPreTranslateSettings_2']
  }
  '/api2/v3/projects/{projectUid}/analyses': {
    get: operations['listByProjectV3']
  }
  '/api2/v3/projects': {
    post: operations['createProjectV3']
  }
  '/api2/v3/projects/{projectUid}/jobs/{jobUid}/qualityAssurances/run': {
    /** Call "Get QA settings" endpoint to get the list of enabled QA checks */
    post: operations['runQaForJobPartV3']
  }
  '/api2/v3/projects/{projectUid}/jobs/qualityAssurances/run': {
    /** Call "Get QA settings" endpoint to get the list of enabled QA checks */
    post: operations['runQaForJobPartsV3']
  }
  '/api2/v3/projects/{projectUid}/jobs/qualityAssurances/segments/run': {
    /** By default runs only fast running checks. Source and target language of jobs have to match. */
    post: operations['runQaForSegmentsV3']
  }
  '/api2/v3/projects/{projectUid}/jobs/{jobUid}/analyses': {
    get: operations['listPartAnalyseV3']
  }
  '/api2/v3/projects/{projectUid}/jobs/export': {
    post: operations['exportToOnlineRepository']
  }
  '/api2/v3/projectTemplates/{projectTemplateUid}/preTranslateSettings': {
    get: operations['getPreTranslateSettingsForProjectTemplate_2']
    put: operations['updatePreTranslateSettingsForProjectTemplate_2']
  }
  '/api2/v3/projectTemplates/{projectTemplateUid}/transMemories': {
    get: operations['getProjectTemplateTransMemories_2']
  }
  '/api2/v3/projects/{projectUid}/transMemories': {
    get: operations['getProjectTransMemories_1']
    /**
     * If user wants to edit “All target languages” or "All workflow steps”,
     *                        but there are already varied TM settings for individual languages or steps,
     *                        then the user risks to overwrite these individual choices.
     */
    put: operations['setProjectTransMemoriesV3']
  }
  '/api2/v3/users': {
    post: operations['createUserV3']
  }
  '/api2/v3/users/{userUid}': {
    get: operations['getUserV3']
    put: operations['updateUserV3']
  }
  '/api2/v3/users/{userUid}/disableTwoFactorAuth': {
    post: operations['disableTwoFactorAuthV3']
  }
}

export interface definitions {
  UserReference: {
    firstName?: string
    lastName?: string
    userName?: string
    email?: string
    /** @enum {string} */
    role?:
      | 'SYS_ADMIN'
      | 'SYS_ADMIN_READ'
      | 'ADMIN'
      | 'PROJECT_MANAGER'
      | 'LINGUIST'
      | 'GUEST'
      | 'SUBMITTER'
    id?: string
    uid?: string
  }
  AdditionalWorkflowStepDto: {
    id?: string
    name?: string
  }
  AdditionalWorkflowStepRequestDto: {
    /** @description Name of the additional workflow step */
    name: string
  }
  PageDtoAdditionalWorkflowStepDto: {
    /** Format: int32 */
    totalElements?: number
    /** Format: int32 */
    totalPages?: number
    /** Format: int32 */
    pageSize?: number
    /** Format: int32 */
    pageNumber?: number
    /** Format: int32 */
    numberOfElements?: number
    content?: definitions['AdditionalWorkflowStepDto'][]
  }
  AsyncAnalyseResponseDto: {
    asyncRequest?: definitions['AsyncRequestDto']
    analyse?: definitions['ObjectReference']
  }
  AsyncRequestDto: {
    id?: string
    createdBy?: definitions['UserReference']
    /** Format: date-time */
    dateCreated?: string
    /** @enum {string} */
    action?:
      | 'PRE_ANALYSE'
      | 'POST_ANALYSE'
      | 'COMPARE_ANALYSE'
      | 'PARENT_ANALYSE'
      | 'PRE_TRANSLATE'
      | 'ASYNC_TRANSLATE'
      | 'IMPORT_JOB'
      | 'IMPORT_FILE'
      | 'ALIGN'
      | 'EXPORT_TMX_BY_QUERY'
      | 'EXPORT_TMX'
      | 'IMPORT_TMX'
      | 'IMPORT_TBX'
      | 'INSERT_INTO_TM'
      | 'DELETE_TM'
      | 'CLEAR_TM'
      | 'QA'
      | 'QA_V3'
      | 'UPDATE_CONTINUOUS_JOB'
      | 'UPDATE_SOURCE'
      | 'UPDATE_TARGET'
      | 'EXTRACT_CLEANED_TMS'
      | 'GLOSSARY_PUT'
      | 'GLOSSARY_DELETE'
      | 'CREATE_PROJECT'
      | 'EXPORT_COMPLETE_FILE'
      | 'IMPORT_ANNOTATIONS'
      | 'FILE_FLOW_CONVERTER_IMPORT'
      | 'FILE_FLOW_MT_PRETRANSLATE'
    asyncResponse?: definitions['AsyncResponseDto']
    parent?: definitions['AsyncRequestDto']
    project?: definitions['ProjectReference']
  }
  AsyncResponseDto: {
    /** Format: date-time */
    dateCreated?: string
    errorCode?: string
    errorDesc?: string
    errorDetails?: definitions['ErrorDetailDto'][]
    warnings?: definitions['ErrorDetailDto'][]
    /** Format: int64 */
    acceptedSegmentsCount?: number
  }
  ErrorDetailDto: {
    /** @description Code, e.g. NOT_FOUND. */
    code?: string
    /** @description Related arguments, e.g. number => "hello world" */
    args?: {[key: string]: {[key: string]: unknown}}
    /** @description Optional human-readable message. */
    message?: string
  }
  ObjectReference: {[key: string]: unknown}
  ProjectReference: {
    uid?: string
    /** Format: int32 */
    innerId?: number
    name?: string
    businessUnit?: definitions['BusinessUnitReference']
    domain?: definitions['DomainReference']
    subDomain?: definitions['SubDomainReference']
    client?: definitions['ClientReference']
    costCenter?: definitions['CostCenterReference']
    /** Format: date-time */
    dueDate?: string
    /** Format: date-time */
    createdDate?: string
    createdBy?: definitions['UserReference']
    owner?: definitions['UserReference']
    vendor?: definitions['VendorUserReference']
    purchaseOrder?: string
    sourceLang?: string
    targetLangs?: string[]
    status?: string
    progress?: definitions['ProgressReference']
    metadata?: definitions['MetadataReference'][]
    note?: string
    deleted?: boolean
    archived?: boolean
  }
  IdReference: {
    id: string
  }
  UidReference: {
    uid: string
  }
  AnalyseJobReference: {
    uid?: string
    filename?: string
    innerId?: string
  }
  AnalyseLanguagePartDto: {
    id?: string
    sourceLang?: string
    targetLang?: string
    data?: definitions['DataDtoV1']
    discountedData?: definitions['DataDtoV1']
    jobs?: definitions['AnalyseJobReference'][]
  }
  CountsDto: {
    /** Format: double */
    segments?: number
    /** Format: double */
    words?: number
    /** Format: double */
    characters?: number
    /** Format: double */
    normalizedPages?: number
    /** Format: double */
    percent?: number
    /** Format: double */
    editingTime?: number
  }
  DataDtoV1: {
    available?: boolean
    all?: definitions['CountsDto']
    repetitions?: definitions['CountsDto']
    transMemoryMatches?: definitions['MatchCounts101Dto']
    machineTranslationMatches?: definitions['MatchCountsDto']
    nonTranslatablesMatches?: definitions['MatchCountsNTDtoV1']
    internalFuzzyMatches?: definitions['MatchCountsDto']
  }
  MatchCounts101Dto: {
    match100?: definitions['CountsDto']
    match95?: definitions['CountsDto']
    match85?: definitions['CountsDto']
    match75?: definitions['CountsDto']
    match50?: definitions['CountsDto']
    match0?: definitions['CountsDto']
    match101?: definitions['CountsDto']
  }
  MatchCountsDto: {
    match100?: definitions['CountsDto']
    match95?: definitions['CountsDto']
    match85?: definitions['CountsDto']
    match75?: definitions['CountsDto']
    match50?: definitions['CountsDto']
    match0?: definitions['CountsDto']
  }
  MatchCountsNTDtoV1: {
    match100?: definitions['CountsDto']
    match99?: definitions['CountsDto']
  }
  NetRateSchemeReference: {
    id?: string
    uid?: string
    name?: string
    /** Format: date-time */
    dateCreated?: string
    createdBy?: definitions['UserReference']
  }
  AsyncAnalyseListResponseDto: {
    analyses?: definitions['AsyncAnalyseResponseDto'][]
  }
  CreateAnalyseListAsyncDto: {
    jobs: definitions['UidReference'][]
    /**
     * @description default: PreAnalyse
     * @enum {string}
     */
    type?: 'PreAnalyse' | 'PostAnalyse' | 'Compare'
    /** @description Default: true */
    includeFuzzyRepetitions?: boolean
    /** @description Default: false */
    separateFuzzyRepetitions?: boolean
    /** @description Default: true */
    includeConfirmedSegments?: boolean
    /** @description Default: true */
    includeNumbers?: boolean
    /** @description Default: true */
    includeLockedSegments?: boolean
    /** @description Default: true */
    countSourceUnits?: boolean
    /** @description Default: true. Works only for type=PreAnalyse. */
    includeTransMemory?: boolean
    /** @description Default: false. Works only for type=PreAnalyse. */
    includeNonTranslatables?: boolean
    /** @description Default: false. Works only for type=PreAnalyse. */
    includeMachineTranslationMatches?: boolean
    /** @description Default: false. Works only for type=PostAnalyse. */
    transMemoryPostEditing?: boolean
    /** @description Default: false. Works only for type=PostAnalyse. */
    nonTranslatablePostEditing?: boolean
    /** @description Default: false. Works only for type=PostAnalyse. */
    machineTranslatePostEditing?: boolean
    name?: string
    netRateScheme?: definitions['IdReference']
    /**
     * Format: int32
     * @description Required for type=Compare
     */
    compareWorkflowLevel?: number
    /**
     * @description Default: false. Use default project settings. Will be overwritten with setting sent
     *         in the API call.
     */
    useProjectAnalysisSettings?: boolean
    callbackUrl?: string
  }
  AnalyseRecalculateResponseDto: {
    analyses?: definitions['AsyncAnalyseResponseDto'][]
  }
  AnalyseRecalculateRequestDto: {
    analyses: definitions['IdReference'][]
    callbackUrl?: string
  }
  AnalyseJobDto: {
    uid?: string
    filename?: string
    data?: definitions['DataDtoV1']
    discountedData?: definitions['DataDtoV1']
  }
  PageDtoAnalyseJobDto: {
    /** Format: int32 */
    totalElements?: number
    /** Format: int32 */
    totalPages?: number
    /** Format: int32 */
    pageSize?: number
    /** Format: int32 */
    pageNumber?: number
    /** Format: int32 */
    numberOfElements?: number
    content?: definitions['AnalyseJobDto'][]
  }
  CleanupTask: {[key: string]: unknown}
  InputStream: {[key: string]: unknown}
  InputStreamLength: {
    stream?: definitions['InputStream']
    /** Format: int64 */
    length?: number
    name?: string
    characterEncoding?: string
    extension?: string
    cleanupTask?: definitions['CleanupTask']
  }
  BulkDeleteAnalyseDto: {
    analyses: definitions['IdReference'][]
    /** @description Default: false */
    purge?: boolean
  }
  PageDtoAsyncRequestDto: {
    /** Format: int32 */
    totalElements?: number
    /** Format: int32 */
    totalPages?: number
    /** Format: int32 */
    pageSize?: number
    /** Format: int32 */
    pageNumber?: number
    /** Format: int32 */
    numberOfElements?: number
    content?: definitions['AsyncRequestDto'][]
  }
  AsyncRequestStatusDto: {
    /** @description Current count of running requests and the allowed limit */
    concurrentRequests?: definitions['ConcurrentRequestsDto']
  }
  ConcurrentRequestsDto: {
    /**
     * Format: int32
     * @description Max number of allowed concurrent request, null value means no limit
     */
    limit?: number
    /**
     * Format: int32
     * @description Current count of running concurrent requests
     */
    count?: number
  }
  LoginResponseDto: {
    user?: definitions['UserReference']
    token?: string
    /** Format: date-time */
    expires?: string
    /** Format: date-time */
    lastInvalidateAllSessionsPerformed?: string
  }
  LoginDto: {
    userName: string
    password: string
    /** @description Required only for 2-factor authentication */
    code?: string
  }
  LoginToSessionResponseDto: {
    user?: definitions['UserReference']
    cookie?: string
    csrfToken?: string
  }
  LoginToSessionDto: {
    userName: string
    password: string
    rememberMe?: boolean
  }
  LoginOtherDto: {
    userName: string
  }
  EditionDto: {
    id?: string
    name?: string
    title?: string
  }
  FeaturesDto: {
    icuEnabled?: boolean
    rejectJobs?: boolean
    qaHighlightsEnabled?: boolean
    lqaBulkCommentsCreation?: boolean
    mtForTMAbove100Enabled?: boolean
    mqmQualityEstimationEnabled?: boolean
  }
  LoginUserDto: {
    user?: definitions['UserReference']
    csrfToken?: string
    organization?: definitions['OrganizationReference']
    edition?: definitions['EditionDto']
    features?: definitions['FeaturesDto']
  }
  OrganizationReference: {
    uid?: string
    name?: string
  }
  LoginWithGoogleDto: {
    idToken: string
  }
  LoginWithAppleDto: {
    codeOrRefreshToken: string
  }
  AppleTokenResponseDto: {
    access_token?: string
    token_type?: string
    expires_in?: string
    refresh_token?: string
    id_token?: string
  }
  ComparedSegmentDto: {
    uid?: string
    /** @enum {string} */
    state?: 'Miss' | 'Diff'
  }
  ComparedSegmentsDto: {
    segments?: definitions['ComparedSegmentDto'][]
  }
  JobPartReference: {
    uid?: string
    /** @enum {string} */
    status?:
      | 'NEW'
      | 'ACCEPTED'
      | 'DECLINED'
      | 'REJECTED'
      | 'DELIVERED'
      | 'EMAILED'
      | 'COMPLETED'
      | 'COMPLETED_BY_LINGUIST'
      | 'CANCELLED'
    providers?: definitions['ProviderReference'][]
    targetLang?: string
    /** Format: int32 */
    workflowLevel?: number
    workflowStep?: definitions['WorkflowStepReference']
    filename?: string
    /** Format: date-time */
    dateDue?: string
    /** Format: date-time */
    dateCreated?: string
    /** Format: date-time */
    updateSourceDate?: string
    imported?: boolean
    jobAssignedEmailTemplate?: definitions['ObjectReference']
    /** Format: int32 */
    notificationIntervalInMinutes?: number
    continuous?: boolean
    sourceFileUid?: string
  }
  ProjectJobPartsDto: {
    jobs?: definitions['JobPartReference'][]
    project?: definitions['ProjectReference']
  }
  ProviderReference: {
    type: string
    id?: string
    uid?: string
  }
  USER: definitions['ProviderReference'] & {
    userName?: string
    firstName?: string
    lastName?: string
    email?: string
    active?: boolean
  }
  VENDOR: definitions['ProviderReference'] & {
    name?: string
    /** Format: int64 */
    defaultProjectOwnerId?: number
  }
  WorkflowStepReference: {
    name?: string
    id?: string
    uid?: string
    /** Format: int32 */
    order?: number
    lqaEnabled?: boolean
  }
  BusinessUnitDto: {
    id?: string
    uid?: string
    name?: string
    createdBy?: definitions['UserReference']
  }
  PageDtoBusinessUnitDto: {
    /** Format: int32 */
    totalElements?: number
    /** Format: int32 */
    totalPages?: number
    /** Format: int32 */
    pageSize?: number
    /** Format: int32 */
    pageNumber?: number
    /** Format: int32 */
    numberOfElements?: number
    content?: definitions['BusinessUnitDto'][]
  }
  BusinessUnitEditDto: {
    name: string
  }
  ClientReference: {
    id?: string
    uid?: string
    name?: string
  }
  ClientDto: {
    id?: string
    uid?: string
    name?: string
    externalId?: string
    note?: string
    /** @description Default: false */
    displayNoteInProject?: boolean
    priceList?: definitions['PriceListReference']
    netRateScheme?: definitions['NetRateSchemeReference']
    createdBy?: definitions['UserReference']
  }
  PriceListReference: {
    id?: string
    name?: string
    uid?: string
  }
  ClientEditDto: {
    name: string
    externalId?: string
    note?: string
    /** @description Default: false */
    displayNoteInProject?: boolean
    priceList?: definitions['IdReference']
    netRateScheme?: definitions['IdReference']
  }
  PageDtoClientDto: {
    /** Format: int32 */
    totalElements?: number
    /** Format: int32 */
    totalPages?: number
    /** Format: int32 */
    pageSize?: number
    /** Format: int32 */
    pageNumber?: number
    /** Format: int32 */
    numberOfElements?: number
    content?: definitions['ClientDto'][]
  }
  AutomatedProjectSettingsDto: {
    id?: string
    name?: string
    organization?: definitions['NameDto']
    active?: boolean
    sourceLang?: string
    targetLangs?: string[]
    connector?: definitions['NameDto']
    remoteFolder?: string
  }
  ConnectorDto: {
    id?: string
    name?: string
    /** @enum {string} */
    type?:
      | 'DROPBOX'
      | 'GOOGLE'
      | 'FTP'
      | 'WORDPRESS'
      | 'GITHUB'
      | 'SFTP'
      | 'DRUPAL'
      | 'BOX'
      | 'GIT'
      | 'ZENDESK'
      | 'ONEDRIVE'
      | 'GITLAB'
      | 'MARKETO'
      | 'HUBSPOT'
      | 'HELPSCOUT'
      | 'SALESFORCE'
      | 'BITBUCKET'
      | 'BITBUCKETSERVER'
      | 'BRAZE'
      | 'SHAREPOINT'
      | 'AZURE'
      | 'SITECORE'
      | 'KENTICO'
      | 'KENTICO_KONTENT'
      | 'MAGENTO'
      | 'CONTENTFULENTRYLEVEL'
      | 'CONTENTFUL'
      | 'CONTENTSTACK'
      | 'JOOMLA'
      | 'CONFLUENCE'
      | 'TRIDION'
      | 'TYPO3'
      | 'AEM_PLUGIN'
      | 'DRUPAL_PLUGIN'
      | 'AMAZON_S3'
      | 'PARDOT'
      | 'PHRASE'
    organization?: definitions['NameDto']
    createdBy?: definitions['NameDto']
    /** Format: date-time */
    createdAt?: string
    localToken?: string
    automatedProjectSettings?: definitions['AutomatedProjectSettingsDto'][]
  }
  NameDto: {
    id?: string
    name?: string
  }
  ConnectorCreateResponseDto: {
    id?: string
    name?: string
    type?: string
    /** Format: date-time */
    created?: string
    status?: string
    linkedAccount?: string
  }
  AbstractConnectorDto: {
    /** @description Name of the connector */
    name: string
    /** @description Connector type */
    type: string
  }
  AdobeExperienceManager: definitions['AbstractConnectorDto'] & {
    urlRewriteFind?: string
    urlRewriteReplace?: string
    host: string
  }
  AmazonS3: definitions['AbstractConnectorDto'] & {
    apiKey: string
    apiSecret: string
  }
  BitbucketServer: definitions['AbstractConnectorDto'] & {
    host: string
    commitMessage?: string
    token: string
  }
  Contentstack: definitions['AbstractConnectorDto'] & {
    authType: string
    region?: string
    nonLocalizableBlocksUids?: string
    targetLangsFieldId?: string
    apiKey: string
    sourceLang?: string
    /** @description Default false */
    translateUrls?: boolean
    /** @description Default false */
    translateTags?: boolean
    managementToken?: string
    password?: string
    userName?: string
    stackWFObserved?: string
    stackWFUponImport?: string
    stackWFExportSource?: string
    stackWFExportTranslate?: string
  }
  Ftp: definitions['AbstractConnectorDto'] & {
    userName: string
    password: string
    host: string
    /** Format: int32 */
    port: number
    /** @description Default TLS_IF_AVAILABLE */
    encryption?: string
  }
  Git: definitions['AbstractConnectorDto'] & {
    userName: string
    password: string
    host: string
    commitMessage?: string
    sshKeyName?: string
    sshKey?: string
    sshPassPhrase?: string
  }
  GitLab: definitions['AbstractConnectorDto'] & {
    commitMessage?: string
    host: string
    token: string
  }
  Google: definitions['AbstractConnectorDto'] & {
    code?: string
    redirectUri?: string
    /** @enum {string} */
    encryption?:
      | 'NOT_USED'
      | 'INSECURE'
      | 'IMPLICIT_TLS_REQUIRED'
      | 'EXPLICIT_TLS_REQUIRED'
      | 'TLS_IF_AVAILABLE'
    oauthClientId?: string
  }
  Joomla: definitions['AbstractConnectorDto'] & {
    host: string
    token: string
  }
  Kentico: definitions['AbstractConnectorDto'] & {
    userName: string
    password: string
    host: string
    sourceLang?: string
  }
  Magento: definitions['AbstractConnectorDto'] & {
    host: string
    token: string
  }
  Marketo: definitions['AbstractConnectorDto'] & {
    apiKey: string
    apiSecret: string
    identityURL: string
    connectorType: string
    variables?: definitions['VariableDto'][]
    segmentationMapping?: definitions['MarketoSegmentationMappingDto']
    translateTokens?: boolean
    debugMode?: boolean
  }
  MarketoSegmentMappingDto: {
    /** Format: int64 */
    segmentId?: number
    locale?: string
    source?: boolean
  }
  MarketoSegmentationMappingDto: {
    /** Format: int64 */
    segmentationId?: number
    segmentsMapping?: definitions['MarketoSegmentMappingDto'][]
  }
  MicrosoftAzure: definitions['AbstractConnectorDto'] & {
    /** @description Microsoft azure connection string */
    connectionString: string
  }
  Sftp: definitions['AbstractConnectorDto'] & {
    host: string
    /** Format: int32 */
    port: number
    userName: string
    password: string
    sshKeyName?: string
    sshKey?: string
    sshPassPhrase?: string
  }
  Sitecore: definitions['AbstractConnectorDto'] & {
    userName: string
    password: string
    host: string
    sitecoreDatabase: string
    sourceLang?: string
    /** @enum {string} */
    authenticationType?: 'STANDARD' | 'OWIN'
  }
  Tridion: definitions['AbstractConnectorDto'] & {
    host: string
    /** Format: int32 */
    port: number
    userName: string
    password: string
    sshKeyName?: string
    sshKey?: string
    sshPassPhrase?: string
  }
  Typo3: definitions['AbstractConnectorDto'] & {
    host: string
    sourceLang?: string
    token: string
  }
  VariableDto: {
    name?: string
    value?: string
  }
  Wordpress: definitions['AbstractConnectorDto'] & {
    basicAuthUserName: string
    basicAuthPassword: string
    host: string
    /** @description Memsource plugin token */
    token: string
  }
  ConnectorErrorDetailDto: {
    code?: string
    message?: string
    messageCode?: string
    args?: {[key: string]: {[key: string]: unknown}}
    skipPrefix?: boolean
  }
  ConnectorErrorsDto: {
    errors?: definitions['ConnectorErrorDetailDto'][]
  }
  UploadResultDto: {
    id?: string
    name?: string
    folder?: string
    encodedName?: string
    /** Format: int64 */
    size?: number
    error?: string
    asyncTaskId?: string
    errors?: definitions['ConnectorErrorsDto']
  }
  ConnectorListDto: {
    connectors?: definitions['ConnectorDto'][]
    /** Format: int32 */
    totalCount?: number
  }
  ErrorDto: {
    code?: string
    message?: string
  }
  FileDto: {
    id?: string
    name?: string
    encodedName?: string
    contentType?: string
    note?: string
    /** Format: int64 */
    size?: number
    directory?: boolean
    /** Format: date-time */
    lastModified?: string
    /** Format: date-time */
    dueDate?: string
    selected?: boolean
    error?: definitions['ErrorDto']
  }
  FileListDto: {
    files?: definitions['FileDto'][]
    currentFolder?: string
    encodedCurrentFolder?: string
    rootFolder?: boolean
    lastChangedFiles?: definitions['FileDto'][]
  }
  CommentDto: {
    id?: string
    text?: string
    createdBy?: definitions['MentionableUserDto']
    /** Format: date-time */
    dateCreated?: string
    /** Format: date-time */
    dateModified?: string
    mentions?: definitions['MentionDto'][]
  }
  CommonConversationDto: {
    id?: string
    /** @description Field references differs based on the Conversation Type. */
    type?: string
    /** Format: date-time */
    dateCreated?: string
    /** Format: date-time */
    dateModified?: string
    /** Format: date-time */
    dateEdited?: string
    createdBy?: definitions['MentionableUserDto']
    comments?: definitions['CommentDto'][]
    status?: definitions['StatusDto']
    deleted?: boolean
  }
  ConversationListDto: {
    conversations?: definitions['CommonConversationDto'][]
  }
  JobRoleDto: {
    /** @enum {string} */
    type: 'PROJECT_OWNER' | 'JOB_OWNER' | 'PROVIDER' | 'GUEST'
    /** @description not null only for `PROVIDER` type and project with defined workflow steps */
    workflowStep?: definitions['ProjectWorkflowStepDtoV2']
    /**
     * @description not null only for shared projects
     * @enum {string}
     */
    organizationType?: 'VENDOR' | 'BUYER'
  }
  LQA: definitions['CommonConversationDto'] & {
    references?: definitions['LQAReferences']
    lqaDescription?: string
  }
  LQAReference: {
    /** Format: int32 */
    errorCategoryId: number
    /** Format: int32 */
    severityId: number
    user?: definitions['IdReference']
    /**
     * @description Default: `NOT_REPEATED`
     * @enum {string}
     */
    repeated?: 'REPEATED' | 'NOT_REPEATED'
  }
  LQAReferences: {
    taskId?: string
    jobPartUid?: string
    /** Format: int32 */
    transGroupId: number
    segmentId: string
    conversationTitle?: string
    /** Format: int32 */
    conversationTitleOffset?: number
    commentedText?: string
    correlation?: definitions['ReferenceCorrelation']
    lqa: definitions['LQAReference'][]
  }
  MentionDto: {
    /** @enum {string} */
    mentionType: 'USER' | 'GROUP'
    /** @enum {string} */
    mentionGroupType?: 'JOB' | 'OWNERS' | 'PROVIDERS' | 'GUESTS' | 'WORKFLOW_STEP'
    uidReference?: definitions['UidReference']
    userReferences?: definitions['MentionableUserDto'][]
    mentionableGroup?: definitions['MentionableGroupDto']
    tag?: string
  }
  MentionableGroupDto: {
    /** @enum {string} */
    groupType?: 'JOB' | 'OWNERS' | 'PROVIDERS' | 'GUESTS' | 'WORKFLOW_STEP'
    groupName?: string
    groupReference?: definitions['UidReference']
  }
  MentionableUserDto: {
    firstName?: string
    lastName?: string
    userName?: string
    email?: string
    /** @enum {string} */
    role?:
      | 'SYS_ADMIN'
      | 'SYS_ADMIN_READ'
      | 'ADMIN'
      | 'PROJECT_MANAGER'
      | 'LINGUIST'
      | 'GUEST'
      | 'SUBMITTER'
    id?: string
    uid?: string
    unavailable?: boolean
    jobRoles?: definitions['JobRoleDto'][]
  }
  PlainReferences: {
    taskId?: string
    jobPartUid?: string
    /** Format: int32 */
    transGroupId: number
    segmentId: string
    conversationTitle?: string
    /** Format: int32 */
    conversationTitleOffset?: number
    commentedText?: string
    correlation?: definitions['ReferenceCorrelation']
  }
  ProjectWorkflowStepDtoV2: {
    /** Format: int32 */
    id?: number
    abbreviation?: string
    name?: string
    /** Format: int32 */
    workflowLevel?: number
    workflowStep?: definitions['WorkflowStepReferenceV2']
  }
  ReferenceCorrelation: {
    uid?: string
    /** @enum {string} */
    role?: 'PARENT'
  }
  SEGMENT_TARGET: definitions['CommonConversationDto'] & {
    references?: definitions['PlainReferences']
  }
  StatusDto: {
    /** @enum {string} */
    name?: 'resolved' | 'unresolved'
    by?: definitions['MentionableUserDto']
    /** Format: date-time */
    date?: string
  }
  WorkflowStepReferenceV2: {
    name?: string
    uid?: string
    id?: string
    /** Format: int32 */
    order?: number
    lqaEnabled?: boolean
  }
  FindConversationsDto: {
    jobs: definitions['UidReference'][]
    since?: string
    /** @description Default: false */
    includeDeleted?: boolean
  }
  CostCenterDto: {
    id?: string
    uid?: string
    name?: string
    createdBy?: definitions['UserReference']
  }
  CostCenterEditDto: {
    name?: string
  }
  PageDtoCostCenterDto: {
    /** Format: int32 */
    totalElements?: number
    /** Format: int32 */
    totalPages?: number
    /** Format: int32 */
    pageSize?: number
    /** Format: int32 */
    pageNumber?: number
    /** Format: int32 */
    numberOfElements?: number
    content?: definitions['CostCenterDto'][]
  }
  CustomFieldDto: {
    uid?: string
    name?: string
    /** @enum {string} */
    type?: 'MULTI_SELECT' | 'SINGLE_SELECT' | 'STRING' | 'NUMBER' | 'URL' | 'DATE'
    allowedEntities?: 'PROJECT'[]
    options?: definitions['CustomFieldOptionsTruncatedDto']
    /** Format: date-time */
    createdAt?: string
    createdBy?: definitions['UserReference']
    /** Format: date-time */
    lastModified?: string
    lastModifiedBy?: definitions['UserReference']
    /** Format: date-time */
    requiredFrom?: string
    required?: boolean
    description?: string
  }
  CustomFieldOptionDto: {
    uid?: string
    value?: string
  }
  CustomFieldOptionsTruncatedDto: {
    /**
     * @description Truncated list of options with size 5.
     *     To get all options use endpoint for getting options of the specific field
     */
    truncatedOptions?: definitions['CustomFieldOptionDto'][]
    /** Format: int32 */
    remainingCount?: number
  }
  CreateCustomFieldDto: {
    name: string
    allowedEntities: 'PROJECT'[]
    options?: string[]
    /** @enum {string} */
    type?: 'MULTI_SELECT' | 'SINGLE_SELECT' | 'STRING' | 'NUMBER' | 'URL' | 'DATE'
    required?: boolean
    description?: string
  }
  PageDtoCustomFieldDto: {
    /** Format: int32 */
    totalElements?: number
    /** Format: int32 */
    totalPages?: number
    /** Format: int32 */
    pageSize?: number
    /** Format: int32 */
    pageNumber?: number
    /** Format: int32 */
    numberOfElements?: number
    content?: definitions['CustomFieldDto'][]
  }
  PageDtoCustomFieldOptionDto: {
    /** Format: int32 */
    totalElements?: number
    /** Format: int32 */
    totalPages?: number
    /** Format: int32 */
    pageSize?: number
    /** Format: int32 */
    pageNumber?: number
    /** Format: int32 */
    numberOfElements?: number
    content?: definitions['CustomFieldOptionDto'][]
  }
  AndroidSettingsDto: {
    tagRegexp?: string
    /** @description Default: `false` */
    icuSubFilter?: boolean
  }
  AsciidocSettingsDto: {
    tagRegexp?: string
    /** @description Default: `false` */
    htmlInPassthrough?: boolean
    nontranslatableMonospaceCustomStylesRegexp?: string
    /** @description Default: `.*` */
    extractCustomDocumentAttributeNameRegexp?: string
    /** @description Default: `false` */
    extractBtnMenuLabels?: boolean
  }
  CsvSettingsDto: {
    /** @description Default: , */
    delimiter?: string
    /**
     * @description Default: COMMA
     * @enum {string}
     */
    delimiterType?: 'TAB' | 'COMMA' | 'SEMICOLON' | 'OTHER'
    /** @description Default: false */
    htmlSubFilter?: boolean
    tagRegexp?: string
    importColumns?: string
    contextNoteColumns?: string
    contextKeyColumn?: string
    maxLenColumn?: string
    importRows?: string
  }
  CustomFileTypeDto: {
    uid?: string
    name?: string
    filenamePattern?: string
    type?: string
    createdBy?: definitions['UserReference']
    /** Format: date-time */
    dateCreated?: string
    fileImportSettings?: definitions['FileImportSettingsDto']
    supportsContinuousJob?: boolean
  }
  DitaSettingsDto: {
    includeTags?: string
    excludeTags?: string
    inlineTags?: string
    inlineTagsNonTranslatable?: string
    tagRegexp?: string
  }
  DocBookSettingsDto: {
    includeTags?: string
    excludeTags?: string
    inlineTags?: string
    inlineTagsNonTranslatable?: string
    tagRegexp?: string
  }
  DocSettingsDto: {
    /** @description Default: false */
    comments?: boolean
    /** @description Default: true */
    index?: boolean
    /** @description Default: false */
    other?: boolean
    tagRegexp?: string
    /** @description Default: false */
    hyperlinkTarget?: boolean
    /** @description Default: false */
    joinSimilarRuns?: boolean
    targetFont?: string
    /** @description Default: false */
    properties?: boolean
    /** @description Default: false */
    hidden?: boolean
    /** @description Default: true */
    headerFooter?: boolean
  }
  FileImportSettingsDto: {
    inputCharset?: string
    outputCharset?: string
    zipCharset?: string
    fileFormat?: string
    autodetectMultilingualFiles?: boolean
    targetLength?: boolean
    /** Format: int32 */
    targetLengthMax?: number
    targetLengthPercent?: boolean
    /** Format: double */
    targetLengthPercentValue?: number
    android?: definitions['AndroidSettingsDto']
    idml?: definitions['IdmlSettingsDto']
    xls?: definitions['XlsSettingsDto']
    multilingualXml?: definitions['MultilingualXmlSettingsDto']
    php?: definitions['PhpSettingsDto']
    resx?: definitions['ResxSettingsDto']
    json?: definitions['JsonSettingsDto']
    html?: definitions['HtmlSettingsDto']
    multilingualXls?: definitions['MultilingualXlsSettingsDto']
    multilingualCsv?: definitions['MultilingualCsvSettingsDto']
    csv?: definitions['CsvSettingsDto']
    txt?: definitions['TxtSettingsDto']
    xlf2?: definitions['Xlf2SettingsDto']
    quarkTag?: definitions['QuarkTagSettingsDto']
    pdf?: definitions['PdfSettingsDto']
    tmMatch?: definitions['TMMatchSettingsDto']
    xml?: definitions['XmlSettingsDto']
    mif?: definitions['MifSettingsDto']
    properties?: definitions['PropertiesSettingsDto']
    doc?: definitions['DocSettingsDto']
    xlf?: definitions['XlfSettingsDto']
    sdlXlf?: definitions['SdlXlfSettingsDto']
    ttx?: definitions['TtxSettingsDto']
    ppt?: definitions['PptSettingsDto']
    yaml?: definitions['YamlSettingsDto']
    dita?: definitions['DitaSettingsDto']
    docBook?: definitions['DocBookSettingsDto']
    po?: definitions['PoSettingsDto']
    mac?: definitions['MacSettingsDto']
    md?: definitions['MdSettingsDto']
    psd?: definitions['PsdSettingsDto']
    asciidoc?: definitions['AsciidocSettingsDto']
    segRule?: definitions['SegRuleReference']
    targetSegRule?: definitions['SegRuleReference']
  }
  HtmlSettingsDto: {
    /** @description Default: true */
    breakTagCreatesSegment?: boolean
    /** @description Default: true */
    unknownTagCreatesTag?: boolean
    /** @description Default: false */
    preserveWhitespace?: boolean
    /** @description Default: true */
    importComments?: boolean
    /** @description Example: "script,blockquote" */
    excludeElements?: string
    tagRegexp?: string
    charEntitiesToTags?: string
    translateMetaTagRegexp?: string
    /** @description Default: true */
    importDefaultMetaTags?: boolean
    translatableAttributes?: string
    /** @description Default: true */
    importDefaultAttributes?: boolean
    /** @description Example: "code" */
    nonTranslatableInlineElements?: string
    /** @description Example: "span" */
    translatableInlineElements?: string
    /** @description Default: false */
    updateLang?: boolean
    /** @description Default: `false` */
    escapeDisabled?: boolean
  }
  IdmlSettingsDto: {
    /** @description Default: false */
    extractNotes?: boolean
    /** @description Default: true */
    simplifyCodes?: boolean
    /** @description Default: true */
    extractMasterSpreads?: boolean
    /** @description Default: true */
    extractLockedLayers?: boolean
    /** @description Default: false */
    extractInvisibleLayers?: boolean
    /** @description Default: false */
    extractHiddenConditionalText?: boolean
    /** @description Default: false */
    extractHyperlinks?: boolean
    /** @description Default: false */
    keepKerning?: boolean
    /** @description Default: false */
    keepTracking?: boolean
    targetFont?: string
    /** @description Default: true */
    replaceFont?: boolean
    /** @description Default: false */
    removeXmlElements?: boolean
    tagRegexp?: string
    /** @description Default: true */
    extractCrossReferenceFormats?: boolean
    /** @description Default: true */
    extractVariables?: boolean
  }
  JsonSettingsDto: {
    tagRegexp?: string
    /** @description Default: true */
    htmlSubFilter?: boolean
    /** @description Default: false */
    icuSubFilter?: boolean
    excludeKeyRegexp?: string
    includeKeyRegexp?: string
    contextNotePath?: string
    maxLenPath?: string
    contextKeyPath?: string
  }
  MacSettingsDto: {
    /** @description Default: false */
    htmlSubfilter?: boolean
    tagRegexp?: string
    /** @description Default: `false` */
    icuSubFilter?: boolean
  }
  MdSettingsDto: {
    /** @description Default: true */
    hardLineBreaksSegments?: boolean
    /** @description Default: false */
    preserveWhiteSpaces?: boolean
    tagRegexp?: string
    customElements?: string
    ignoredBlockPrefixes?: string
    /**
     * @description Default: PLAIN
     * @enum {string}
     */
    flavor?: 'PLAIN' | 'PHP' | 'GITHUB'
    /** @description Default: false */
    processJekyllFrontMatter?: boolean
    /** @description Default: true */
    extractCodeBlocks?: boolean
    notEscapedCharacters?: string
    /** @description Default: false */
    excludeCodeElements?: boolean
  }
  MetadataField: {
    /** @enum {string} */
    type?: 'CLIENT' | 'DOMAIN' | 'SUBDOMAIN' | 'FILENAME'
  }
  MetadataPrioritySettingsDto: {
    prioritizedFields: definitions['MetadataField'][]
  }
  MifSettingsDto: {
    /** @description Default: true */
    extractBodyPages?: boolean
    /** @description Default: false */
    extractReferencePages?: boolean
    /** @description Default: true */
    extractMasterPages?: boolean
    /** @description Default: false */
    extractHiddenPages?: boolean
    /** @description Default: false */
    extractVariables?: boolean
    /** @description Default: true */
    extractIndexMarkers?: boolean
    /** @description Default: false */
    extractLinks?: boolean
    /** @description Default: false */
    extractXRefDef?: boolean
    /** @description Default: true */
    extractPgfNumFormat?: boolean
    /** @description Default: true */
    extractCustomReferencePages?: boolean
    /** @description Default: false */
    extractDefaultReferencePages?: boolean
    /** @description Default: true */
    extractUsedVariables?: boolean
    /** @description Default: false */
    extractHiddenCondText?: boolean
    /** @description Default: true */
    extractUsedXRefDef?: boolean
    /** @description Default: true */
    extractUsedPgfNumFormat?: boolean
    tagRegexp?: string
  }
  MultilingualCsvSettingsDto: {
    sourceColumns?: string
    targetColumns?: string
    contextNoteColumns?: string
    contextKeyColumns?: string
    tagRegexp?: string
    /** @description Default: false */
    htmlSubFilter?: boolean
    /** @description Default: true */
    segmentation?: boolean
    /** @description Default: , */
    delimiter?: string
    /**
     * @description Default: COMMA
     * @enum {string}
     */
    delimiterType?: 'TAB' | 'COMMA' | 'SEMICOLON' | 'OTHER'
    importRows?: string
    maxLenColumns?: string
    /** @description Format: "language":"column"; example: {"en": "A", "sk": "B"} */
    allTargetColumns?: {[key: string]: string}
    /** @enum {string} */
    nonEmptySegmentAction?: 'NONE' | 'CONFIRM' | 'LOCK' | 'CONFIRM_LOCK'
    saveConfirmedSegmentsToTm?: boolean
  }
  MultilingualXlsSettingsDto: {
    sourceColumn?: string
    /** @description Format: "language":"column"; example: {"en": "A", "sk": "B"} */
    targetColumns?: {[key: string]: string}
    contextNoteColumn?: string
    contextKeyColumn?: string
    tagRegexp?: string
    /** @description Default: false */
    htmlSubFilter?: boolean
    /** @description Default: true */
    segmentation?: boolean
    importRows?: string
    maxLenColumn?: string
    /** @enum {string} */
    nonEmptySegmentAction?: 'NONE' | 'CONFIRM' | 'LOCK' | 'CONFIRM_LOCK'
    saveConfirmedSegmentsToTm?: boolean
  }
  MultilingualXmlSettingsDto: {
    translatableElementsXPath?: string
    sourceElementsXPath?: string
    /**
     * @description 'Format: "language":"xpath";
     *             example = '{"en": "tuv[@lang='en']/seg", "sk": "tuv[@lang='sk']/seg"}
     */
    targetElementsXPaths?: {[key: string]: string}
    inlineElementsNonTranslatableXPath?: string
    tagRegexp?: string
    /** @description Default: `true` */
    segmentation?: boolean
    /** @description Default: `false` */
    htmlSubFilter?: boolean
    contextKeyXPath?: string
    contextNoteXPath?: string
    maxLenXPath?: string
    /** @description Default: `false` */
    preserveWhitespace?: boolean
    preserveCharEntities?: string
    xslUrl?: string
    /** @description UID of uploaded XSL file, overrides xslUrl */
    xslFile?: string
    /** @enum {string} */
    nonEmptySegmentAction?: 'NONE' | 'CONFIRM' | 'LOCK' | 'CONFIRM_LOCK'
    saveConfirmedSegmentsToTm?: boolean
    /** @description Default: `false` */
    icuSubFilter?: boolean
  }
  PdfSettingsDto: {
    /**
     * @description Default: TRANS_PDF
     * @enum {string}
     */
    filter?: 'TRANS_PDF' | 'DEFAULT'
  }
  PhpSettingsDto: {
    tagRegexp?: string
    /** @description Default: false */
    htmlSubFilter?: boolean
  }
  PoSettingsDto: {
    tagRegexp?: string
    /** @description Default: true */
    exportMultiline?: boolean
    /** @description Default: false */
    htmlSubFilter?: boolean
    /** @description Default: false */
    segment?: boolean
    markupSubFilterTranslatable?: string
    markupSubFilterNonTranslatable?: string
    /** @enum {string} */
    contextKeySuffixType?: 'MSGCTXT' | 'MSGID' | 'MSGCTXT_AND_MSGID' | 'MSGCTXT_OR_MSGID'
    saveConfirmedSegments?: boolean
    /** @enum {string} */
    importSetSegmentConfirmedWhen?: 'FUZZY' | 'NONFUZZY'
    /** @enum {string} */
    importSetSegmentLockedWhen?: 'FUZZY' | 'NONFUZZY'
    /** @enum {string} */
    exportConfirmedLocked?: 'FUZZY' | 'NONFUZZY'
    /** @enum {string} */
    exportConfirmedNotLocked?: 'FUZZY' | 'NONFUZZY'
    /** @enum {string} */
    exportNotConfirmedLocked?: 'FUZZY' | 'NONFUZZY'
    /** @enum {string} */
    exportNotConfirmedNotLocked?: 'FUZZY' | 'NONFUZZY'
    /** @description Default: `false` */
    icuSubFilter?: boolean
  }
  PptSettingsDto: {
    /** @description Default: false */
    hiddenSlides?: boolean
    /** @description Default: false */
    other?: boolean
    /** @description Default: false */
    notes?: boolean
    /** @description Default: false */
    masterSlides?: boolean
  }
  PropertiesSettingsDto: {
    tagRegexp?: string
  }
  PsdSettingsDto: {
    /** @description Default: true */
    extractHiddenLayers?: boolean
    /** @description Default: true */
    extractLockedLayers?: boolean
    tagRegexp?: string
  }
  QuarkTagSettingsDto: {
    /** @description Default: false */
    removeKerningTrackingTags?: boolean
    tagRegexp?: string
  }
  ResxSettingsDto: {
    tagRegexp?: string
    htmlSubFilter?: boolean
  }
  SdlXlfSettingsDto: {
    /** @description Default: false */
    icuSubFilter?: boolean
    /** @description Default: translate=no */
    skipImportRules?: string
    importAsConfirmedRules?: string
    /** @description Default: locked=true */
    importAsLockedRules?: string
    /** @description Default: locked=true */
    exportAttrsWhenConfirmedAndLocked?: string
    exportAttrsWhenConfirmedAndNotLocked?: string
    /** @description Default: locked=true */
    exportAttrsWhenNotConfirmedAndLocked?: string
    exportAttrsWhenNotConfirmedAndNotLocked?: string
    /** @description Default: true */
    saveConfirmedSegments?: boolean
    tagRegexp?: string
  }
  SegRuleReference: {
    id?: string
    uid?: string
    language?: string
    name?: string
    filename?: string
    primary?: boolean
  }
  TMMatchSettingsDto: {
    /**
     * @description Default: PREV_AND_NEXT_SEGMENT
     * @enum {string}
     */
    contextType?: 'AUTO' | 'PREV_AND_NEXT_SEGMENT' | 'SEGMENT_KEY' | 'NO_CONTEXT'
    /** @description Default: false */
    prevOrNextSegment?: boolean
    /** @description Default: false */
    penalizeMultiContextMatch?: boolean
    /** @description Default: true */
    ignoreTagMetadata?: boolean
    metadataPriority?: definitions['MetadataPrioritySettingsDto']
  }
  TtxSettingsDto: {
    /** @description Default: true */
    saveConfirmedSegments?: boolean
  }
  TxtSettingsDto: {
    tagRegexp?: string
    translatableTextRegexp?: string
    contextKey?: string
    /** @description Default: false */
    regexpCapturingGroups?: boolean
  }
  Xlf2SettingsDto: {
    /** @description Default: false */
    icuSubFilter?: boolean
    /** @description Default: true */
    importNotes?: boolean
    /** @description Default: true */
    saveConfirmedSegments?: boolean
    /** @description Default: true */
    segmentation?: boolean
    /** @description Default: false */
    lineBreakTags?: boolean
    /** @description Default: true */
    preserveWhitespace?: boolean
    /** @description Default: true */
    copySourceToTargetIfNotImported?: boolean
    /** @description Default: true */
    respectTranslateAttr?: boolean
    skipImportRules?: string
    /** @description Default: state=final */
    importAsConfirmedRules?: string
    importAsLockedRules?: string
    /** @description Default: state=final */
    exportAttrsWhenConfirmedAndLocked?: string
    /** @description Default: state=final */
    exportAttrsWhenConfirmedAndNotLocked?: string
    exportAttrsWhenNotConfirmedAndLocked?: string
    exportAttrsWhenNotConfirmedAndNotLocked?: string
    contextKeyXPath?: string
    preserveCharEntities?: string
    xslUrl?: string
    /** @description UID of uploaded XSL file, overrides xslUrl */
    xslFile?: string
    tagRegexp?: string
  }
  XlfSettingsDto: {
    /** @description Default: false */
    icuSubFilter?: boolean
    /** @description Default: true */
    importNotes?: boolean
    /** @description Default: true */
    segmentation?: boolean
    /** @description Default: translate=no; examples: translate=no;approved=no;state=needs-adaptation */
    skipImportRules?: string
    /** @description Multiple rules must be separated by semicolon */
    importAsConfirmedRules?: string
    importAsLockedRules?: string
    exportAttrsWhenConfirmedAndLocked?: string
    exportAttrsWhenConfirmedAndNotLocked?: string
    exportAttrsWhenNotConfirmedAndLocked?: string
    exportAttrsWhenNotConfirmedAndNotLocked?: string
    /** @description Default: true */
    saveConfirmedSegments?: boolean
    /** @description Default: false */
    lineBreakTags?: boolean
    /** @description Default: true */
    preserveWhitespace?: boolean
    contextType?: string
    preserveCharEntities?: string
    /** @description Default: true */
    copySourceToTargetIfNotImported?: boolean
    importXPath?: string
    importAsConfirmedXPath?: string
    importAsLockedXPath?: string
    xslUrl?: string
    /** @description UID of uploaded XSL file, overrides xslUrl */
    xslFile?: string
    tagRegexp?: string
  }
  XlsSettingsDto: {
    /** @description Default: false */
    sheetNames?: boolean
    /** @description Default: false */
    hidden?: boolean
    /** @description Default: false */
    comments?: boolean
    /** @description Default: false */
    other?: boolean
    /**
     * @description Default: DownRight
     * @enum {string}
     */
    cellFlow?: 'DownRight' | 'RightDown' | 'DownLeft' | 'LeftDown'
    /** @description Default: false */
    htmlSubfilter?: boolean
    tagRegexp?: string
    specifiedColumns?: string
  }
  XmlSettingsDto: {
    /**
     * @description Default: `"PLAIN"`
     * @enum {string}
     */
    rulesFormat?: 'PLAIN' | 'XPATH'
    /** @description Default: `"*"`, example: `"para,heading"` */
    includeElementsPlain?: string
    /** @description Example: `"script,par"` */
    excludeElementsPlain?: string
    /** @description Example: `"title"` */
    includeAttributesPlain?: string
    /** @description Example: `"lang,href"` */
    excludeAttributesPlain?: string
    /** @description Example: `"tt,b"` */
    inlineElementsNonTranslatablePlain?: string
    inlineElementsPlain?: string
    /** @description Default: `false` */
    inlineElementsAutoPlain?: boolean
    /** @description Example: `"tt,b"` */
    htmlSubfilterElementsPlain?: string
    /** @description Default: `false` */
    entities?: boolean
    lockElementsPlain?: string
    lockAttributesPlain?: string
    includeXPath?: string
    inlineElementsXpath?: string
    inlineElementsNonTranslatableXPath?: string
    /** @description Default: `false` */
    inlineElementsAutoXPath?: boolean
    htmlSubfilterElementsXpath?: string
    lockXPath?: string
    /** @description Default: `true` */
    segmentation?: boolean
    tagRegexp?: string
    contextNoteXpath?: string
    maxLenXPath?: string
    preserveWhitespaceXPath?: string
    preserveCharEntities?: string
    contextKeyXPath?: string
    xslUrl?: string
    /** @description UID of uploaded XSL file, overrides `xslUrl` */
    xslFile?: string
    /** @description Default: `true` */
    importComments?: boolean
    /** @description Default: `false` */
    icuSubFilter?: boolean
    assistantProfile?: string
  }
  YamlSettingsDto: {
    /** @description Default: false */
    htmlSubFilter?: boolean
    tagRegexp?: string
    includeKeyRegexp?: string
    excludeValueRegexp?: string
    contextPath?: string
    contextKeyPath?: string
    /** @description Default: false */
    markdownSubfilter?: boolean
    /** @description Default: false */
    updateRootElementLang?: boolean
    /** @enum {string} */
    localeFormat?: 'MEMSOURCE' | 'RFC_5646' | 'ANDROID_QUALIFIER' | 'ANDROID_QUALIFIER_BCP'
    /** @description Default: true */
    indentEmptyLinesInString?: boolean
    /** @description Default: `false` */
    icuSubFilter?: boolean
  }
  CreateCustomFileTypeDto: {
    name: string
    filenamePattern: string
    /** @enum {string} */
    type: 'html' | 'json' | 'xml' | 'multiling_xml' | 'txt'
    fileImportSettings?: definitions['FileImportSettingsCreateDto']
  }
  FileImportSettingsCreateDto: {
    inputCharset?: string
    outputCharset?: string
    zipCharset?: string
    /**
     * @description default: auto-detect
     * @enum {string}
     */
    fileFormat?:
      | 'doc'
      | 'ppt'
      | 'xls'
      | 'xlf'
      | 'xlf2'
      | 'sdlxlif'
      | 'ttx'
      | 'html'
      | 'xml'
      | 'mif'
      | 'tmx'
      | 'idml'
      | 'dita'
      | 'json'
      | 'po'
      | 'ts'
      | 'icml'
      | 'yaml'
      | 'properties'
      | 'csv'
      | 'android_string'
      | 'desktop_entry'
      | 'mac_strings'
      | 'pdf'
      | 'windows_rc'
      | 'xml_properties'
      | 'joomla_ini'
      | 'magento_csv'
      | 'dtd'
      | 'mozilla_properties'
      | 'plist'
      | 'plain_text'
      | 'srt'
      | 'sub'
      | 'sbv'
      | 'wiki'
      | 'resx'
      | 'resjson'
      | 'chrome_json'
      | 'epub'
      | 'svg'
      | 'docbook'
      | 'wpxliff'
      | 'multiling_xml'
      | 'multiling_xls'
      | 'mqxliff'
      | 'php'
      | 'psd'
      | 'tag'
      | 'md'
      | 'vtt'
    /** @description Try to use multilingual variants for auto-detected CSV and Excel files. Default: true */
    autodetectMultilingualFiles?: boolean
    /** @description Default: false */
    targetLength?: boolean
    /**
     * Format: int32
     * @description default: 1000
     */
    targetLengthMax?: number
    /** @description Default: false */
    targetLengthPercent?: boolean
    /**
     * Format: double
     * @description default: 130
     */
    targetLengthPercentValue?: number
    /** Format: int64 */
    segmentationRuleId?: number
    /** Format: int64 */
    targetSegmentationRuleId?: number
    android?: definitions['AndroidSettingsDto']
    csv?: definitions['CsvSettingsDto']
    dita?: definitions['DitaSettingsDto']
    docBook?: definitions['DocBookSettingsDto']
    doc?: definitions['DocSettingsDto']
    html?: definitions['HtmlSettingsDto']
    idml?: definitions['IdmlSettingsDto']
    json?: definitions['JsonSettingsDto']
    mac?: definitions['MacSettingsDto']
    md?: definitions['MdSettingsDto']
    mif?: definitions['MifSettingsDto']
    multilingualXls?: definitions['MultilingualXlsSettingsDto']
    multilingualCsv?: definitions['MultilingualCsvSettingsDto']
    multilingualXml?: definitions['MultilingualXmlSettingsDto']
    pdf?: definitions['PdfSettingsDto']
    php?: definitions['PhpSettingsDto']
    po?: definitions['PoSettingsDto']
    ppt?: definitions['PptSettingsDto']
    properties?: definitions['PropertiesSettingsDto']
    psd?: definitions['PsdSettingsDto']
    quarkTag?: definitions['QuarkTagSettingsDto']
    resx?: definitions['ResxSettingsDto']
    sdlXlf?: definitions['SdlXlfSettingsDto']
    tmMatch?: definitions['TMMatchSettingsDto']
    ttx?: definitions['TtxSettingsDto']
    txt?: definitions['TxtSettingsDto']
    xlf2?: definitions['Xlf2SettingsDto']
    xlf?: definitions['XlfSettingsDto']
    xls?: definitions['XlsSettingsDto']
    xml?: definitions['XmlSettingsDto']
    yaml?: definitions['YamlSettingsDto']
    asciidoc?: definitions['AsciidocSettingsDto']
  }
  PageDtoCustomFileTypeDto: {
    /** Format: int32 */
    totalElements?: number
    /** Format: int32 */
    totalPages?: number
    /** Format: int32 */
    pageSize?: number
    /** Format: int32 */
    pageNumber?: number
    /** Format: int32 */
    numberOfElements?: number
    content?: definitions['CustomFileTypeDto'][]
  }
  UpdateCustomFileTypeDto: {
    name?: string
    filenamePattern?: string
    /** @enum {string} */
    type?: 'html' | 'json' | 'xml' | 'multiling_xml' | 'txt'
    fileImportSettings?: definitions['FileImportSettingsCreateDto']
  }
  DeleteCustomFileTypeDto: {
    customFileTypes: definitions['UidReference'][]
  }
  DiscountSettingsDto: {
    /** Format: double */
    repetition?: number
    /** Format: double */
    tm101?: number
    /** Format: double */
    tm100?: number
    /** Format: double */
    tm95?: number
    /** Format: double */
    tm85?: number
    /** Format: double */
    tm75?: number
    /** Format: double */
    tm50?: number
    /** Format: double */
    tm0?: number
    /** Format: double */
    mt100?: number
    /** Format: double */
    mt95?: number
    /** Format: double */
    mt85?: number
    /** Format: double */
    mt75?: number
    /** Format: double */
    mt50?: number
    /** Format: double */
    mt0?: number
    /** Format: double */
    nt100?: number
    /** Format: double */
    nt99?: number
    /** Format: double */
    nt85?: number
    /** Format: double */
    nt75?: number
    /** Format: double */
    nt50?: number
    /** Format: double */
    nt0?: number
    /** Format: double */
    if100?: number
    /** Format: double */
    if95?: number
    /** Format: double */
    if85?: number
    /** Format: double */
    if75?: number
    /** Format: double */
    if50?: number
    /** Format: double */
    if0?: number
  }
  NetRateScheme: {
    id?: string
    uid?: string
    name?: string
    organization?: definitions['OrganizationReference']
    /** Format: date-time */
    dateCreated?: string
    createdBy?: definitions['UserReference']
    workflowStepNetSchemes?: definitions['NetRateSchemeWorkflowStepReference'][]
    rates?: definitions['DiscountSettingsDto']
  }
  NetRateSchemeWorkflowStepReference: {
    id?: string
    workflowStep?: definitions['WorkflowStepReference']
  }
  PageDtoNetRateSchemeReference: {
    /** Format: int32 */
    totalElements?: number
    /** Format: int32 */
    totalPages?: number
    /** Format: int32 */
    pageSize?: number
    /** Format: int32 */
    pageNumber?: number
    /** Format: int32 */
    numberOfElements?: number
    content?: definitions['NetRateSchemeReference'][]
  }
  DiscountSchemeCreateDto: {
    name: string
    rates?: definitions['DiscountSettingsDto']
    workflowStepNetSchemes?: definitions['NetRateSchemeWorkflowStepCreate'][]
  }
  NetRateSchemeWorkflowStepCreate: {
    workflowStep: definitions['IdReference']
    rates?: definitions['DiscountSettingsDto']
  }
  NetRateSchemeEdit: {
    name: string
    rates?: definitions['DiscountSettingsDto']
  }
  NetRateSchemeWorkflowStep: {
    id?: string
    workflowStep?: definitions['WorkflowStepReference']
    rates?: definitions['DiscountSettingsDto']
  }
  NetRateSchemeWorkflowStepEdit: {
    rates?: definitions['DiscountSettingsDto']
  }
  PageDtoNetRateSchemeWorkflowStepReference: {
    /** Format: int32 */
    totalElements?: number
    /** Format: int32 */
    totalPages?: number
    /** Format: int32 */
    pageSize?: number
    /** Format: int32 */
    pageNumber?: number
    /** Format: int32 */
    numberOfElements?: number
    content?: definitions['NetRateSchemeWorkflowStepReference'][]
  }
  DomainDto: {
    id?: string
    uid?: string
    name?: string
    createdBy?: definitions['UserReference']
  }
  PageDtoDomainDto: {
    /** Format: int32 */
    totalElements?: number
    /** Format: int32 */
    totalPages?: number
    /** Format: int32 */
    pageSize?: number
    /** Format: int32 */
    pageNumber?: number
    /** Format: int32 */
    numberOfElements?: number
    content?: definitions['DomainDto'][]
  }
  DomainEditDto: {
    name?: string
  }
  OrganizationEmailTemplateDto: {
    id?: string
    uid?: string
    /** @enum {string} */
    type?:
      | 'JobAssigned'
      | 'JobStatusChanged'
      | 'NextWorkflowStep'
      | 'JobRejected'
      | 'LoginInfo'
      | 'ProjectTransferredToBuyer'
      | 'SharedProjectAssigned'
      | 'SharedProjectStatusChanged'
      | 'AutomatedProjectCreated'
      | 'AutomatedProjectSourceUpdated'
      | 'AutomatedProjectStatusChanged'
      | 'JobWidgetProjectQuotePrepared'
      | 'JobWidgetProjectQuotePreparationFailure'
      | 'JobWidgetProjectCreated'
      | 'JobWidgetProjectCompleted'
      | 'CmsQuoteReady'
      | 'CmsWorkCompleted'
      | 'CmsJobRejected'
      | 'QUOTE_UPDATED'
      | 'QUOTE_STATUS_CHANGED'
      | 'LQA_SHARE_REPORT'
    name?: string
    subject?: string
    body?: string
    ccAddress?: string
    bccAddress?: string
  }
  PageDtoOrganizationEmailTemplateDto: {
    /** Format: int32 */
    totalElements?: number
    /** Format: int32 */
    totalPages?: number
    /** Format: int32 */
    pageSize?: number
    /** Format: int32 */
    pageNumber?: number
    /** Format: int32 */
    numberOfElements?: number
    content?: definitions['OrganizationEmailTemplateDto'][]
  }
  FileHandoverDto: {
    /** @description ID of the uploaded file */
    fileId?: string
    /** @description Filename of the uploaded file */
    filename?: string
  }
  JobPartReferences: {
    jobs: definitions['UidReference'][]
  }
  UploadedFileDto: {
    uid?: string
    name?: string
    /** Format: int64 */
    size?: number
    type?: string
  }
  RemoteUploadedFileDto: {
    uid?: string
    name?: string
    /** Format: int64 */
    size?: number
    type?: string
    url?: string
  }
  PageDtoUploadedFileDto: {
    /** Format: int32 */
    totalElements?: number
    /** Format: int32 */
    totalPages?: number
    /** Format: int32 */
    pageSize?: number
    /** Format: int32 */
    pageNumber?: number
    /** Format: int32 */
    numberOfElements?: number
    content?: definitions['UploadedFileDto'][]
  }
  GlossaryDto: {
    id?: string
    uid?: string
    /** Format: int64 */
    internalId?: number
    name: string
    langs?: string[]
    createdBy?: definitions['UserReference']
    owner?: definitions['UserReference']
    /** Format: date-time */
    dateCreated?: string
    /** Format: int32 */
    profileCount?: number
    active?: boolean
    profiles?: definitions['MemsourceTranslateProfileSimpleDto'][]
  }
  MachineTranslateSettingsLangsDto: {
    /** @description Id */
    id?: string
    /** @description Source language for CUSTOMIZABLE engine */
    sourceLang?: string
    /** @description List of target languages for the CUSTOMIZABLE engine */
    targetLangs?: string[]
  }
  MemTransMachineTranslateSettingsDto: {
    id?: string
    uid?: string
    baseName?: string
    name?: string
    type?: string
    category?: string
    default_?: boolean
    includeTags?: boolean
    mtQualityEstimation?: boolean
    enabled?: boolean
    glossarySupported?: boolean
    args?: {[key: string]: string}
    langs?: definitions['MachineTranslateSettingsLangsDto']
    /**
     * Format: int32
     * @description Unknown value is represented by value: -1
     */
    charCount?: number
  }
  MemsourceTranslateProfileSimpleDto: {
    uid?: string
    name?: string
    /** Format: date-time */
    dateCreated?: string
    createdBy?: definitions['UserReference']
    memsourceTranslate?: definitions['MemTransMachineTranslateSettingsDto']
    locked?: boolean
  }
  PageDtoGlossaryDto: {
    /** Format: int32 */
    totalElements?: number
    /** Format: int32 */
    totalPages?: number
    /** Format: int32 */
    pageSize?: number
    /** Format: int32 */
    pageNumber?: number
    /** Format: int32 */
    numberOfElements?: number
    content?: definitions['GlossaryDto'][]
  }
  GlossaryEditDto: {
    name: string
    langs: string[]
    /** @description Owner of the TM must be Admin or PM */
    owner?: definitions['IdReference']
  }
  GlossaryActivationDto: {
    active?: boolean
  }
  SearchResponseListTmDto: {
    searchResults?: definitions['SearchTMResponseDto'][]
  }
  SearchTMClientDto: {
    /** Format: int64 */
    id?: number
    name?: string
  }
  SearchTMDomainDto: {
    /** Format: int64 */
    id?: number
    name?: string
  }
  SearchTMProjectDto: {
    /** Format: int64 */
    id?: number
    uid?: string
    name?: string
  }
  SearchTMResponseDto: {
    segmentId?: string
    source?: definitions['SearchTMSegmentDto']
    translations?: definitions['SearchTMSegmentDto'][]
    transMemory?: definitions['SearchTMTransMemoryDto']
    /** Format: double */
    grossScore?: number
    /** Format: double */
    score?: number
    subSegment?: boolean
  }
  SearchTMSegmentDto: {
    id?: string
    text?: string
    lang?: string
    rtl?: boolean
    /** Format: int64 */
    modifiedAt?: number
    /** Format: int64 */
    createdAt?: number
    modifiedBy?: definitions['UserReference']
    createdBy?: definitions['UserReference']
    filename?: string
    project?: definitions['SearchTMProjectDto']
    client?: definitions['SearchTMClientDto']
    domain?: definitions['SearchTMDomainDto']
    subDomain?: definitions['SearchTMSubDomainDto']
    tagMetadata?: definitions['TagMetadata'][]
    previousSegment?: string
    nextSegment?: string
    key?: string
  }
  SearchTMSubDomainDto: {
    /** Format: int64 */
    id?: number
    name?: string
  }
  SearchTMTransMemoryDto: {
    uid?: string
    id?: string
    name?: string
    reverse?: boolean
  }
  TagMetadata: {
    id?: string
    type?: string
    content?: string
    transAttributes?: string
  }
  SearchTMByJobRequestDto: {
    segment: string
    /** Format: int32 */
    workflowLevel?: number
    /** Format: double */
    scoreThreshold?: number
    previousSegment?: string
    nextSegment?: string
    contextKey?: string
    /**
     * Format: int32
     * @description Default: 5
     */
    maxSegments?: number
    /**
     * Format: int32
     * @description Default: 5
     */
    maxSubSegments?: number
    tagMetadata?: definitions['TagMetadataDto'][]
  }
  TagMetadataDto: {
    id?: string
    type?: string
    content?: string
    transAttributes?: string
  }
  LQAConversationDto: {
    id?: string
    /** @description LQA */
    type?: string
    /** Format: date-time */
    dateCreated?: string
    /** Format: date-time */
    dateModified?: string
    /** Format: date-time */
    dateEdited?: string
    createdBy?: definitions['MentionableUserDto']
    comments?: definitions['CommentDto'][]
    status?: definitions['StatusDto']
    deleted?: boolean
    references?: definitions['LQAReferences']
    lqaDescription?: string
  }
  AddCommentDto: {
    text: string
  }
  LQAConversationsListDto: {
    conversations?: definitions['LQAConversationDto'][]
  }
  LanguageDto: {
    code?: string
    name?: string
    rfc?: string
    android?: string
    androidBcp?: string
  }
  /** @description envelope for list of languages */
  LanguageListDto: {
    languages: definitions['LanguageDto'][]
  }
  AccuracyWeightsDto: {
    accuracy?: definitions['ToggleableWeightDto']
    addition?: definitions['ToggleableWeightDto']
    omission?: definitions['ToggleableWeightDto']
    mistranslation?: definitions['ToggleableWeightDto']
    underTranslation?: definitions['ToggleableWeightDto']
    untranslated?: definitions['ToggleableWeightDto']
    improperTmMatch?: definitions['ToggleableWeightDto']
    overTranslation?: definitions['ToggleableWeightDto']
  }
  DesignWeightsDto: {
    design?: definitions['ToggleableWeightDto']
    length?: definitions['ToggleableWeightDto']
    localFormatting?: definitions['ToggleableWeightDto']
    markup?: definitions['ToggleableWeightDto']
    missingText?: definitions['ToggleableWeightDto']
    truncation?: definitions['ToggleableWeightDto']
  }
  /** @description Error categories and their importance weight. If not provided, defaults will be created. */
  ErrorCategoriesDto: {
    accuracy?: definitions['AccuracyWeightsDto']
    fluency?: definitions['FluencyWeightsDto']
    terminology?: definitions['TerminologyWeightsDto']
    style?: definitions['StyleWeightsDto']
    localeConvention?: definitions['LocaleConventionWeightsDto']
    verity?: definitions['VerityWeightsDto']
    design?: definitions['DesignWeightsDto']
    other?: definitions['OtherWeightsDto']
  }
  FluencyWeightsDto: {
    fluency?: definitions['ToggleableWeightDto']
    punctuation?: definitions['ToggleableWeightDto']
    spelling?: definitions['ToggleableWeightDto']
    grammar?: definitions['ToggleableWeightDto']
    grammaticalRegister?: definitions['ToggleableWeightDto']
    inconsistency?: definitions['ToggleableWeightDto']
    crossReference?: definitions['ToggleableWeightDto']
    characterEncoding?: definitions['ToggleableWeightDto']
  }
  LocaleConventionWeightsDto: {
    localeConvention?: definitions['ToggleableWeightDto']
    addressFormat?: definitions['ToggleableWeightDto']
    dateFormat?: definitions['ToggleableWeightDto']
    currencyFormat?: definitions['ToggleableWeightDto']
    measurementFormat?: definitions['ToggleableWeightDto']
    shortcutKey?: definitions['ToggleableWeightDto']
    telephoneFormat?: definitions['ToggleableWeightDto']
  }
  OtherWeightsDto: {
    other?: definitions['ToggleableWeightDto']
  }
  PassFailThresholdDto: {
    /**
     * Format: double
     * @description Minimum allowed LQA score in percentage in line with MQM scoring (1 - penalties/word-count)
     * @example 99
     */
    minScorePercentage: number
  }
  /** @description Penalty points for each severity level. By default neutral is 0, minor is 1, major is 5, critical is 10. */
  PenaltyPointsDto: {
    neutral?: definitions['SeverityDto']
    minor?: definitions['SeverityDto']
    major?: definitions['SeverityDto']
    critical?: definitions['SeverityDto']
  }
  SeverityDto: {
    /**
     * Format: int32
     * @description Code of the severity category
     */
    code?: number
    /**
     * Format: double
     * @description Allowed values 0.0-100,000.0
     */
    value?: number
  }
  StyleWeightsDto: {
    style?: definitions['ToggleableWeightDto']
    awkward?: definitions['ToggleableWeightDto']
    companyStyle?: definitions['ToggleableWeightDto']
    inconsistentStyle?: definitions['ToggleableWeightDto']
    thirdPartyStyle?: definitions['ToggleableWeightDto']
    unidiomatic?: definitions['ToggleableWeightDto']
  }
  TerminologyWeightsDto: {
    terminology?: definitions['ToggleableWeightDto']
    inconsistentWithTb?: definitions['ToggleableWeightDto']
    inconsistentUseOfTerminology?: definitions['ToggleableWeightDto']
  }
  ToggleableWeightDto: {
    /** @description If this error category is enabled, default false */
    enabled?: boolean
    /**
     * Format: double
     * @description Weight of this error category (0.1 - 99.9)
     * @example 1
     */
    weight?: number
    /**
     * Format: int32
     * @description Code of the error category
     */
    code?: number
  }
  VerityWeightsDto: {
    verity?: definitions['ToggleableWeightDto']
    cultureSpecificReference?: definitions['ToggleableWeightDto']
  }
  LqaProfileDetailDto: {
    /**
     * @description UID of the profile
     * @example string
     */
    uid: string
    /** @description Name of the profile */
    name: string
    errorCategories: definitions['ErrorCategoriesDto']
    penaltyPoints: definitions['PenaltyPointsDto']
    passFailThreshold: definitions['PassFailThresholdDto']
    /** @description If profile is set as default for organization */
    isDefault: boolean
    createdBy: definitions['UserReference']
    /** Format: date-time */
    dateCreated: string
    organization: definitions['UidReference']
  }
  CreateLqaProfileDto: {
    name: string
    errorCategories: definitions['ErrorCategoriesDto']
    penaltyPoints?: definitions['PenaltyPointsDto']
    passFailThreshold?: definitions['PassFailThresholdDto']
  }
  LqaProfileReferenceDto: {
    /**
     * @description UID of the profile
     * @example string
     */
    uid: string
    /** @description Name of the profile */
    name: string
    /** @description If profile is set as default for organization */
    isDefault: boolean
    /** @description User who created the profile */
    createdBy: definitions['UserReference']
    /**
     * Format: date-time
     * @description When profile was created
     */
    dateCreated: string
    organization: definitions['UidReference']
  }
  PageDtoLqaProfileReferenceDto: {
    /** Format: int32 */
    totalElements?: number
    /** Format: int32 */
    totalPages?: number
    /** Format: int32 */
    pageSize?: number
    /** Format: int32 */
    pageNumber?: number
    /** Format: int32 */
    numberOfElements?: number
    content?: definitions['LqaProfileReferenceDto'][]
  }
  UpdateLqaProfileDto: {
    name: string
    errorCategories: definitions['ErrorCategoriesDto']
    penaltyPoints?: definitions['PenaltyPointsDto']
    passFailThreshold?: definitions['PassFailThresholdDto']
  }
  MachineTranslateStatusDto: {
    uid?: string
    ok?: boolean
    error?: string
  }
  MachineTranslateSettingsDto: {
    id?: string
    uid?: string
    baseName?: string
    name?: string
    type?: string
    category?: string
    default_?: boolean
    includeTags?: boolean
    mtQualityEstimation?: boolean
    enabled?: boolean
    args?: {[key: string]: string}
    langs?: definitions['MachineTranslateSettingsLangsDto']
  }
  MachineTranslateSettingsPbmDto: {
    id?: string
    uid?: string
    baseName?: string
    name?: string
    type?: string
    default_?: boolean
    includeTags?: boolean
    mtQualityEstimation?: boolean
    args?: {[key: string]: string}
    payForMtPossible?: boolean
    payForMtActive?: boolean
    /** Format: int32 */
    charCount?: number
    /** Format: int32 */
    sharingSettings?: number
    langs?: definitions['MachineTranslateSettingsLangsDto']
  }
  PageDtoMachineTranslateSettingsPbmDto: {
    /** Format: int32 */
    totalElements?: number
    /** Format: int32 */
    totalPages?: number
    /** Format: int32 */
    pageSize?: number
    /** Format: int32 */
    pageNumber?: number
    /** Format: int32 */
    numberOfElements?: number
    content?: definitions['MachineTranslateSettingsPbmDto'][]
  }
  TypesDto: {
    types?: string[]
  }
  MachineTranslateResponse: {
    translations?: string[]
  }
  TranslationRequestExtendedDto: {
    sourceTexts: string[]
    from: string
    to: string
    filename?: string
  }
  TaskMappingDto: {
    taskId?: string
    workflowLevel?: string
    resourcePath?: string
    project?: definitions['ObjectReference']
    job?: definitions['ObjectReference']
  }
  ProjectTermBaseReference: {
    id?: string
    termBase?: definitions['ObjectReference']
    name?: string
    writeMode?: boolean
    targetLang?: string
    readMode?: boolean
    workflowStep?: definitions['ObjectReference']
  }
  ProjectTranslationMemoryReference: {
    id?: string
    transMem?: definitions['ObjectReference']
    name?: string
    workflowStep?: definitions['ObjectReference']
    targetLang?: string
    /** Format: double */
    penalty?: number
    readMode?: boolean
  }
  ImportSettingsDto: {
    uid?: string
    name?: string
    createdBy?: definitions['UserReference']
    /** Format: date-time */
    dateCreated?: string
    fileImportSettings?: definitions['FileImportSettingsDto']
  }
  ImportSettingsEditDto: {
    uid: string
    name: string
    fileImportSettings: definitions['FileImportSettingsCreateDto']
  }
  ImportSettingsReference: {
    uid?: string
    name?: string
    createdBy?: definitions['UserReference']
    /** Format: date-time */
    dateCreated?: string
  }
  PageDtoImportSettingsReference: {
    /** Format: int32 */
    totalElements?: number
    /** Format: int32 */
    totalPages?: number
    /** Format: int32 */
    pageSize?: number
    /** Format: int32 */
    pageNumber?: number
    /** Format: int32 */
    numberOfElements?: number
    content?: definitions['ImportSettingsReference'][]
  }
  ImportSettingsCreateDto: {
    name: string
    fileImportSettings: definitions['FileImportSettingsCreateDto']
  }
  BusinessUnitReference: {
    name?: string
    id?: string
    uid?: string
  }
  DiscountSchemeReference: {
    id?: string
    uid?: string
    name?: string
    /** Format: date-time */
    dateCreated?: string
    createdBy?: definitions['UserReference']
  }
  DomainReference: {
    name?: string
    id?: string
    uid?: string
  }
  SubDomainReference: {
    name?: string
    id?: string
    uid?: string
  }
  FileNamingSettingsDto: {
    renameCompleted?: boolean
    completedFilePattern?: string
    targetFolderPath?: string
  }
  VendorSecuritySettingsDto: {
    /** @description Default: `false` */
    canChangeSharedJobDueDateEnabled?: boolean
    canChangeSharedJobDueDate?: definitions['UidReference'][]
    /** @description Default: `false` */
    jobVendorsMayUploadReferences?: boolean
  }
  /** @description Machine translation related settings */
  MachineTranslationSettingsDto: {
    /** @description Pre-translate from machine translation. Default: false */
    useMachineTranslation?: boolean
    /** @description Lock section: 100% machine translation matches. Default: false */
    lock100PercentMatches?: boolean
    /** @description Set segment status to confirmed for: 100% translation machine matches. Default: false */
    confirm100PercentMatches?: boolean
    /**
     * @description Do not put machine translations to target and use alt-trans fields (alt-trans in mxlf).
     * Default: false
     */
    useAltTransOnly?: boolean
    /** @description Display quality-estimated machine translation matches in Memsource Editor. Default: false */
    mtQeMatchesInEditors?: boolean
    /** @description Use machine translation for segments with a TM match of 100% or more. Default: false */
    mtForTMAbove100?: boolean
  }
  /** @description Non-translatables related settings */
  NonTranslatableSettingsDto: {
    /** @description Pre-translate non-translatables. Default: false */
    preTranslateNonTranslatables?: boolean
    /** @description Set segment status to confirmed for: 100% non-translatable matches. Default: false */
    confirm100PercentMatches?: boolean
    /** @description Lock section: 100% non-translatable matches. Default: false */
    lock100PercentMatches?: boolean
    /** @description If non-translatables are enabled in Editors. */
    nonTranslatablesInEditors?: boolean
  }
  /** @description Repetitions related settings */
  RepetitionsSettingsDto: {
    /** @description Propagate repetitions. Default: false */
    autoPropagateRepetitions?: boolean
    /** @description Set segment status to confirmed for: Repetitions. Default: false */
    confirmRepetitions?: boolean
    /** @description Changes in 1st repetition propagate upon confirmation into subsequent locked repetitions. Default: false */
    autoPropagateToLockedRepetitions?: boolean
    /** @description If auto-propagated subsequent repetitions should be locked. Default: false */
    lockSubsequentRepetitions?: boolean
  }
  /** @description Translation memory related settings */
  TranslationMemorySettingsDto: {
    /** @description Pre-translate from translation memory. Default: false */
    useTranslationMemory?: boolean
    /**
     * Format: double
     * @description Pre-translation threshold percent
     */
    translationMemoryThreshold?: number
    /** @description Set segment status to confirmed for: 100% translation memory matches. Default: false */
    confirm100PercentMatches?: boolean
    /** @description Set segment status to confirmed for: 101% translation memory matches. Default: false */
    confirm101PercentMatches?: boolean
    /** @description Lock section: 100% translation memory matches. Default: false */
    lock100PercentMatches?: boolean
    /** @description Lock section: 101% translation memory matches. Default: false */
    lock101PercentMatches?: boolean
  }
  MORAVIA: definitions['QACheckDtoV2'] & {
    enabled?: boolean
    profile?: string
    ignorable?: boolean
    instant?: boolean
  }
  NUMBER: definitions['QACheckDtoV2'] & {
    ignorable?: boolean
    enabled?: boolean
    value?: definitions['Number']
    instant?: boolean
  }
  Number: {[key: string]: unknown}
  QACheckDtoV2: {
    /** @enum {string} */
    type: 'VOID' | 'NUMBER' | 'STRING' | 'REGEX' | 'MORAVIA'
    /** @enum {string} */
    name:
      | 'emptyTarget'
      | 'inconsistentTranslation'
      | 'joinMarksInconsistency'
      | 'missingNumber'
      | 'segmentNotConfirmed'
      | 'nonConformingTerms'
      | 'multipleSpaces'
      | 'endPunctuation'
      | 'targetLength'
      | 'absoluteTargetLength'
      | 'relativeTargetLength'
      | 'inconsistentFormatting'
      | 'unresolvedComment'
      | 'emptyPairTags'
      | 'strictJobStatus'
      | 'forbiddenStringsEnabled'
      | 'excludeLockedSegments'
      | 'ignoreNotApprovedTerms'
      | 'spellCheck'
      | 'repeatedWords'
      | 'inconsistentTagContent'
      | 'emptyTagContent'
      | 'malformed'
      | 'forbiddenTerms'
      | 'targetLengthPercent'
      | 'targetLengthPerSegment'
      | 'newerAtLowerLevel'
      | 'leadingAndTrailingSpaces'
      | 'targetSourceIdentical'
      | 'ignoreInAllWorkflowSteps'
      | 'regexp'
      | 'unmodifiedFuzzyTranslation'
      | 'unmodifiedFuzzyTranslationTM'
      | 'unmodifiedFuzzyTranslationMTNT'
      | 'moravia'
      | 'extraNumbers'
      | 'nestedTags'
  }
  QASettingsDtoV2: {
    checks?: definitions['QACheckDtoV2'][]
  }
  REGEX: definitions['QACheckDtoV2'] & {
    rules?: definitions['RegexpCheckRuleDtoV2'][]
  }
  RegexpCheckRuleDtoV2: {
    description?: string
    sourceRegexp?: string
    targetRegexp?: string
    id?: string
    ignorable?: boolean
    instant?: boolean
  }
  STRING: definitions['QACheckDtoV2'] & {
    ignorable?: boolean
    enabled?: boolean
    value?: string
    instant?: boolean
  }
  VOID: definitions['QACheckDtoV2'] & {
    ignorable?: boolean
    enabled?: boolean
    instant?: boolean
  }
  EditQASettingsDtoV2: {
    /**
     * @description checks
     * @example
     *         {
     *             "ignorable": false,
     *             "enabled": true,
     *             "type": "VOID",
     *             "instant": false,
     *             "name": "emptyTarget"
     *         },
     *         {
     *             "ignorable": false,
     *             "enabled": true,
     *             "value": 12,
     *             "type": "NUMBER",
     *             "name": "targetLength"
     *         },
     *         {
     *             "ignorable": false,
     *             "enabled": true,
     *             "value": "ASAP, irony",
     *             "type": "STRING",
     *             "instant": true,
     *             "name": "forbiddenStrings"
     *         },
     *         {
     *             "enabled": true,
     *             "profile": "jiris",
     *             "ignorable": true,
     *             "type": "MORAVIA",
     *             "name": "moravia"
     *         },
     *         {
     *             "rules": [
     *                 {
     *                     "description": "Description",
     *                     "sourceRegexp": ".+",
     *                     "targetRegexp": ".+",
     *                     "ignorable": true
     *                 },
     *                 {
     *                     "description": "Description",
     *                     "sourceRegexp": "i+",
     *                     "targetRegexp": "e+",
     *                     "ignorable": false
     *                 }
     *             ],
     *             "type": "REGEX",
     *             "name": "regexp"
     *         },
     *         {
     *             "enabled": true,
     *             "ignorable": true,
     *             "type": "VOID",
     *             "name": "customQa"
     *         }
     */
    checks?: {[key: string]: {[key: string]: unknown}}[]
  }
  PlainConversationDto: {
    id?: string
    /** @description SEGMENT_TARGET */
    type?: string
    /** Format: date-time */
    dateCreated?: string
    /** Format: date-time */
    dateModified?: string
    /** Format: date-time */
    dateEdited?: string
    createdBy?: definitions['MentionableUserDto']
    comments?: definitions['CommentDto'][]
    status?: definitions['StatusDto']
    deleted?: boolean
    references?: definitions['PlainReferences']
  }
  CreatePlainConversationDto: {
    comment?: definitions['AddCommentDto']
    references: definitions['PlainReferences']
  }
  EditPlainConversationDto: {
    /** @enum {string} */
    status?: 'resolved' | 'unresolved'
    correlation?: definitions['ReferenceCorrelation']
  }
  PlainConversationsListDto: {
    conversations?: definitions['PlainConversationDto'][]
  }
  /** @description Base projectDto */
  AbstractProjectDto: {
    uid?: string
    /** Format: int32 */
    internalId?: number
    id?: string
    name?: string
    /** Format: date-time */
    dateCreated?: string
    domain?: definitions['DomainReference']
    subDomain?: definitions['SubDomainReference']
    owner?: definitions['UserReference']
    sourceLang?: string
    targetLangs?: string[]
    references?: definitions['ReferenceFileReference'][]
    mtSettingsPerLanguageList?: definitions['MTSettingsPerLanguageReference'][]
    /** @description Response differs based on user's role */
    userRole?: string
  }
  'Admin, Project Manager': definitions['AbstractProjectDto'] & {
    /** @description Default: false */
    shared?: boolean
    progress?: definitions['ProgressDto']
    client?: definitions['ClientReference']
    costCenter?: definitions['CostCenterReference']
    businessUnit?: definitions['BusinessUnitReference']
    /** Format: date-time */
    dateDue?: string
    /** @enum {string} */
    status?:
      | 'NEW'
      | 'ASSIGNED'
      | 'COMPLETED'
      | 'ACCEPTED_BY_VENDOR'
      | 'DECLINED_BY_VENDOR'
      | 'COMPLETED_BY_VENDOR'
      | 'CANCELLED'
    purchaseOrder?: string
    /** @description Default: false */
    isPublishedOnJobBoard?: boolean
    note?: string
    createdBy?: definitions['UserReference']
    qualityAssuranceSettings?: definitions['ObjectReference']
    workflowSteps?: definitions['ProjectWorkflowStepDto'][]
    analyseSettings?: definitions['ObjectReference']
    accessSettings?: definitions['ObjectReference']
    financialSettings?: definitions['ObjectReference']
    archived?: boolean
  }
  Buyer: definitions['AbstractProjectDto'] & {
    /** @description Default: false */
    shared?: boolean
    progress?: definitions['ProgressDto']
    client?: definitions['ClientReference']
    costCenter?: definitions['CostCenterReference']
    businessUnit?: definitions['BusinessUnitReference']
    /** Format: date-time */
    dateDue?: string
    /** @enum {string} */
    status?:
      | 'NEW'
      | 'ASSIGNED'
      | 'COMPLETED'
      | 'ACCEPTED_BY_VENDOR'
      | 'DECLINED_BY_VENDOR'
      | 'COMPLETED_BY_VENDOR'
      | 'CANCELLED'
    purchaseOrder?: string
    /** @description Default: false */
    isPublishedOnJobBoard?: boolean
    note?: string
    createdBy?: definitions['UserReference']
    qualityAssuranceSettings?: definitions['ObjectReference']
    workflowSteps?: definitions['ProjectWorkflowStepDto'][]
    analyseSettings?: definitions['ObjectReference']
    accessSettings?: definitions['ObjectReference']
    financialSettings?: definitions['ObjectReference']
    archived?: boolean
    vendorOwner?: definitions['USER']
    vendor?: definitions['VendorReference']
  }
  BuyerReference: {
    id?: string
    uid?: string
    name?: string
  }
  CostCenterReference: {
    name?: string
    id?: string
    uid?: string
  }
  Linguist: definitions['AbstractProjectDto'] & {[key: string]: unknown}
  MTSettingsPerLanguageReference: {
    /** @description mtSettings is set for whole project if targetLang == null */
    targetLang: string
    machineTranslateSettings?: definitions['MachineTranslateSettingsReference']
  }
  MachineTranslateSettingsReference: {
    id?: string
    uid?: string
    name?: string
    type?: string
  }
  ProgressDto: {
    /** Format: int32 */
    totalCount?: number
    /** Format: int32 */
    finishedCount?: number
    /** Format: int32 */
    overdueCount?: number
  }
  ProjectWorkflowStepDto: {
    /** Format: int64 */
    id?: number
    abbreviation?: string
    name?: string
    /** Format: int32 */
    workflowLevel?: number
    workflowStep?: definitions['ObjectReference']
    lqaProfileUid?: string
  }
  ReferenceFileReference: {
    id?: string
    uid?: string
    filename?: string
    note?: string
    /** Format: date-time */
    dateCreated?: string
    createdBy?: definitions['UserReference']
  }
  Vendor: definitions['AbstractProjectDto'] & {
    /** @description Default: false */
    shared?: boolean
    progress?: definitions['ProgressDto']
    client?: definitions['ClientReference']
    costCenter?: definitions['CostCenterReference']
    businessUnit?: definitions['BusinessUnitReference']
    /** Format: date-time */
    dateDue?: string
    /** @enum {string} */
    status?:
      | 'NEW'
      | 'ASSIGNED'
      | 'COMPLETED'
      | 'ACCEPTED_BY_VENDOR'
      | 'DECLINED_BY_VENDOR'
      | 'COMPLETED_BY_VENDOR'
      | 'CANCELLED'
    purchaseOrder?: string
    /** @description Default: false */
    isPublishedOnJobBoard?: boolean
    note?: string
    createdBy?: definitions['UserReference']
    qualityAssuranceSettings?: definitions['ObjectReference']
    workflowSteps?: definitions['ProjectWorkflowStepDto'][]
    analyseSettings?: definitions['ObjectReference']
    accessSettings?: definitions['ObjectReference']
    financialSettings?: definitions['ObjectReference']
    archived?: boolean
    buyerOwner?: definitions['USER']
    buyer?: definitions['BuyerReference']
  }
  VendorReference: {
    id?: string
    uid?: string
    name?: string
  }
  Providers: {
    all?: definitions['ProviderReference'][]
    relevant?: definitions['ProviderReference'][]
  }
  AssignableTemplatesDto: {
    assignableTemplates?: definitions['ProjectTemplateDto'][]
  }
  ProjectTemplateDto: {
    id?: string
    name?: string
    templateName?: string
    sourceLang?: string
    targetLangs?: string[]
    workflowSettings?: definitions['ProjectTemplateWorkflowSettingsDto'][]
  }
  ProjectTemplateWorkflowSettingsAssignedToDto: {
    targetLang?: string
    providers?: definitions['ProviderReference'][]
  }
  ProjectTemplateWorkflowSettingsDto: {
    workflowStep?: definitions['WorkflowStepReference']
    assignedTo?: definitions['ProjectTemplateWorkflowSettingsAssignedToDto'][]
  }
  JobPartsDto: {
    jobs?: definitions['JobPartReference'][]
  }
  ProjectMTSettingsPerLangDto: {
    targetLang: string
    machineTranslateSettings?: definitions['UidReference']
  }
  PageDtoAbstractProjectDto: {
    /** Format: int32 */
    totalElements?: number
    /** Format: int32 */
    totalPages?: number
    /** Format: int32 */
    pageSize?: number
    /** Format: int32 */
    pageNumber?: number
    /** Format: int32 */
    numberOfElements?: number
    content?: definitions['AbstractProjectDto'][]
  }
  PatchProjectDto: {
    name?: string
    /** @enum {string} */
    status?:
      | 'NEW'
      | 'ASSIGNED'
      | 'COMPLETED'
      | 'ACCEPTED_BY_VENDOR'
      | 'DECLINED_BY_VENDOR'
      | 'COMPLETED_BY_VENDOR'
      | 'CANCELLED'
    client?: definitions['IdReference']
    businessUnit?: definitions['IdReference']
    domain?: definitions['IdReference']
    subDomain?: definitions['IdReference']
    owner?: definitions['IdReference']
    purchaseOrder?: string
    /** Format: date-time */
    dateDue?: string
    note?: string
    machineTranslateSettings?: definitions['UidReference']
    machineTranslateSettingsPerLangs?: definitions['ProjectMTSettingsPerLangDto'][]
    archived?: boolean
  }
  AddTargetLangDto: {
    targetLangs?: string[]
  }
  AddWorkflowStepsDto: {
    workflowSteps?: definitions['IdReference'][]
  }
  AssignVendorDto: {
    vendor?: definitions['IdReference']
    /** Format: date-time */
    dateDue?: string
  }
  CloneProjectDto: {
    name: string
  }
  PageDtoProviderReference: {
    /** Format: int32 */
    totalElements?: number
    /** Format: int32 */
    totalPages?: number
    /** Format: int32 */
    pageSize?: number
    /** Format: int32 */
    pageNumber?: number
    /** Format: int32 */
    numberOfElements?: number
    content?: definitions['ProviderReference'][]
  }
  SetProjectStatusDto: {
    /** @enum {string} */
    status:
      | 'NEW'
      | 'ASSIGNED'
      | 'COMPLETED'
      | 'ACCEPTED_BY_VENDOR'
      | 'DECLINED_BY_VENDOR'
      | 'COMPLETED_BY_VENDOR'
      | 'CANCELLED'
  }
  FinancialSettingsDto: {
    netRateScheme?: definitions['NetRateSchemeReference']
    priceList?: definitions['PriceListReference']
  }
  SetFinancialSettingsDto: {
    netRateScheme?: definitions['IdReference']
    priceList?: definitions['IdReference']
  }
  EnabledQualityChecksDto: {
    enabledChecks?: (
      | 'EmptyTranslation'
      | 'TrailingPunctuation'
      | 'Formatting'
      | 'JoinTags'
      | 'MissingNumbersV3'
      | 'MultipleSpacesV3'
      | 'NonConformingTerm'
      | 'NotConfirmed'
      | 'TranslationLength'
      | 'AbsoluteLength'
      | 'RelativeLength'
      | 'UnresolvedComment'
      | 'EmptyPairTags'
      | 'InconsistentTranslationTargetSource'
      | 'InconsistentTranslationSourceTarget'
      | 'ForbiddenString'
      | 'SpellCheck'
      | 'RepeatedWord'
      | 'InconsistentTagContent'
      | 'EmptyTagContent'
      | 'Malformed'
      | 'ForbiddenTerm'
      | 'NewerAtLowerLevel'
      | 'LeadingAndTrailingSpaces'
      | 'LeadingSpaces'
      | 'TrailingSpaces'
      | 'TargetSourceIdentical'
      | 'SourceOrTargetRegexp'
      | 'UnmodifiedFuzzyTranslation'
      | 'UnmodifiedFuzzyTranslationTM'
      | 'UnmodifiedFuzzyTranslationMTNT'
      | 'Moravia'
      | 'ExtraNumbersV3'
      | 'UnresolvedConversation'
      | 'NestedTags'
      | 'FuzzyInconsistencyTargetSource'
      | 'FuzzyInconsistencySourceTarget'
      | 'CustomQA'
      | 'MissingNonTranslatableAnnotation'
    )[]
  }
  LqaErrorCategoryDto: {
    /** Format: int32 */
    errorCategoryId?: number
    name?: string
    enabled?: boolean
    errorCategories?: definitions['LqaErrorCategoryDto'][]
  }
  LqaSettingsDto: {
    enabled?: boolean
    severities?: definitions['LqaSeverityDto'][]
    categories?: definitions['LqaErrorCategoryDto'][]
  }
  LqaSeverityDto: {
    /** Format: int32 */
    severityId?: number
    name?: string
    /** Format: int32 */
    weight?: number
  }
  MTSettingsPerLanguageDto: {
    /** @description mtSettings is set for whole project if targetLang == null */
    targetLang: string
    machineTranslateSettings?: definitions['MachineTranslateSettingsDto']
  }
  MTSettingsPerLanguageListDto: {
    mtSettingsPerLangList?: definitions['MTSettingsPerLanguageDto'][]
  }
  PageDtoQuoteDto: {
    /** Format: int32 */
    totalElements?: number
    /** Format: int32 */
    totalPages?: number
    /** Format: int32 */
    pageSize?: number
    /** Format: int32 */
    pageNumber?: number
    /** Format: int32 */
    numberOfElements?: number
    content?: definitions['QuoteDto'][]
  }
  QuoteDto: {
    /** Format: int64 */
    id?: number
    uid?: string
    name?: string
    /** @enum {string} */
    status?: 'APPROVED' | 'DECLINED' | 'DRAFT' | 'FOR_APPROVAL' | 'NEW'
    currency?: string
    /** @enum {string} */
    billingUnit?: 'Character' | 'Word' | 'Page' | 'Hour'
    createdBy?: definitions['UserReference']
    /** Format: date-time */
    dateCreated?: string
    /** Format: double */
    totalPrice?: number
    netRateScheme?: definitions['NetRateSchemeReference']
    priceList?: definitions['PriceListReference']
    workflowStepList?: definitions['WorkflowStepReference'][]
    provider?: definitions['ProviderReference']
    customerEmail?: string
    /** @enum {string} */
    quoteType?: 'BUYER' | 'PROVIDER'
    editable?: boolean
    outdated?: boolean
  }
  EditProjectMTSettPerLangDto: {
    targetLang: string
    machineTranslateSettings?: definitions['IdReference']
  }
  EditProjectMTSettPerLangListDto: {
    mtSettingsPerLangList?: definitions['EditProjectMTSettPerLangDto'][]
  }
  EditProjectMTSettingsDto: {
    machineTranslateSettings?: definitions['IdReference']
  }
  AnalyseSettingsDto: {
    /** @enum {string} */
    type?: 'PreAnalyse' | 'PostAnalyse' | 'PreAnalyseTarget' | 'Compare'
    /** @description Default: false */
    includeFuzzyRepetitions?: boolean
    /** @description Default: false */
    separateFuzzyRepetitions?: boolean
    /** @description Default: false */
    includeNonTranslatables?: boolean
    /** @description Default: false */
    includeMachineTranslationMatches?: boolean
    /** @description Default: false */
    includeConfirmedSegments?: boolean
    /** @description Default: false */
    includeNumbers?: boolean
    /** @description Default: false */
    includeLockedSegments?: boolean
    /** @description Default: false */
    countSourceUnits?: boolean
    /** @description Default: false */
    includeTransMemory?: boolean
    namingPattern?: string
    /** @description Default: false */
    analyzeByLanguage?: boolean
    /** @description Default: false */
    analyzeByProvider?: boolean
    /** @description If automatic post analysis should be created after update source. Default: false */
    allowAutomaticPostAnalysis?: boolean
    /** @description Default: false */
    transMemoryPostEditing?: boolean
    /** @description Default: false */
    nonTranslatablePostEditing?: boolean
    /** @description Default: false */
    machineTranslatePostEditing?: boolean
  }
  CustomFieldInstanceDto: {
    uid?: string
    customField?: definitions['CustomFieldDto']
    selectedOptions?: definitions['CustomFieldOptionDto'][]
    value?: string
    /** Format: date-time */
    createdAt?: string
    createdBy?: definitions['UidReference']
    /** Format: date-time */
    updatedAt?: string
    updatedBy?: definitions['UidReference']
  }
  CustomFieldInstancesDto: {
    customFieldInstances?: definitions['CustomFieldInstanceDto'][]
  }
  CreateCustomFieldInstanceDto: {
    customField?: definitions['UidReference']
    selectedOptions?: definitions['UidReference'][]
    value?: string
  }
  CreateCustomFieldInstancesDto: {
    customFieldInstances?: definitions['CreateCustomFieldInstanceDto'][]
  }
  UpdateCustomFieldInstanceDto: {
    selectedOptions?: definitions['UidReference'][]
    value?: string
  }
  UpdateCustomFieldInstanceWithUidDto: {
    customFieldInstance?: definitions['UidReference']
    customField?: definitions['UidReference']
    selectedOptions?: definitions['UidReference'][]
    value?: string
  }
  UpdateCustomFieldInstancesDto: {
    addInstances?: definitions['CreateCustomFieldInstanceDto'][]
    removeInstances?: definitions['UidReference'][]
    updateInstances?: definitions['UpdateCustomFieldInstanceWithUidDto'][]
  }
  PageDtoCustomFieldInstanceDto: {
    /** Format: int32 */
    totalElements?: number
    /** Format: int32 */
    totalPages?: number
    /** Format: int32 */
    pageSize?: number
    /** Format: int32 */
    pageNumber?: number
    /** Format: int32 */
    numberOfElements?: number
    content?: definitions['CustomFieldInstanceDto'][]
  }
  JobStatusChangeActionDto: {
    /** @enum {string} */
    requestedStatus?:
      | 'NEW'
      | 'ACCEPTED'
      | 'DECLINED'
      | 'REJECTED'
      | 'DELIVERED'
      | 'EMAILED'
      | 'COMPLETED'
      | 'CANCELLED'
    /**
     * @description Default: false; Both project owner and job owner are notified;
     *                     the parameter is subordinated to notification settings in the project
     */
    notifyOwner?: boolean
    /**
     * @description Default: false;
     *         Controls both job status and email notifications to previous/next provider
     */
    propagateStatus?: boolean
  }
  ContinuousJobInfoDto: {
    /** Format: date-time */
    dateUpdated?: string
  }
  ImportStatusDto: {
    /** @enum {string} */
    status?: 'RUNNING' | 'ERROR' | 'OK'
    errorMessage?: string
  }
  JobPartExtendedDto: {
    uid?: string
    /** @description InnerId is a sequential number of a job in a project. Jobs created from the same file share the same innerId across workflow steps. */
    innerId?: string
    /** @enum {string} */
    status?:
      | 'NEW'
      | 'ACCEPTED'
      | 'DECLINED'
      | 'REJECTED'
      | 'DELIVERED'
      | 'EMAILED'
      | 'COMPLETED'
      | 'CANCELLED'
    providers?: definitions['ProviderReference'][]
    sourceLang?: string
    targetLang?: string
    /** Format: int32 */
    workflowLevel?: number
    workflowStep?: definitions['ProjectWorkflowStepReference']
    filename?: string
    /** Format: date-time */
    dateDue?: string
    /** Format: int32 */
    wordsCount?: number
    /** Format: int32 */
    beginIndex?: number
    /** Format: int32 */
    endIndex?: number
    isParentJobSplit?: boolean
    /** Format: date-time */
    updateSourceDate?: string
    /** Format: date-time */
    updateTargetDate?: string
    /** Format: date-time */
    dateCreated?: string
    jobReference?: definitions['JobReference']
    project?: definitions['ProjectReference']
    /** Format: int32 */
    lastWorkflowLevel?: number
    workUnit?: definitions['ObjectReference']
    importStatus?: definitions['ImportStatusDto']
    imported?: boolean
    continuous?: boolean
    continuousJobInfo?: definitions['ContinuousJobInfoDto']
    originalFileDirectory?: string
  }
  JobReference: {
    uid?: string
    filename?: string
  }
  ProjectWorkflowStepReference: {
    name?: string
    id?: string
    /** Format: int32 */
    order?: number
    /** Format: int32 */
    workflowLevel?: number
  }
  JobPartReadyReferences: {
    jobs?: definitions['UidReference'][]
    getParts?: definitions['ClosureListJobPart']
  }
  PseudoTranslateActionDto: {
    replacement?: string
    prefix?: string
    suffix?: string
    /** Format: double */
    length?: number
    /** Format: int32 */
    keyHashPrefixLen?: number
    substitution?: definitions['SubstituteDto'][]
  }
  SubstituteDto: {
    source: string
    target: string
  }
  AsyncRequestWrapperDto: {
    asyncRequest?: definitions['AsyncRequestDto']
  }
  UpdateIgnoredSegment: {
    uid: string
    warnings: definitions['UpdateIgnoredWarning'][]
  }
  UpdateIgnoredWarning: {
    id: string
  }
  UpdateIgnoredWarningsDto: {
    jobParts: definitions['UpdateIgnoredJobPartSegment'][]
  }
  JobPartStatusChangeDto: {
    /** @enum {string} */
    status?:
      | 'NEW'
      | 'ACCEPTED'
      | 'DECLINED'
      | 'REJECTED'
      | 'DELIVERED'
      | 'EMAILED'
      | 'COMPLETED'
      | 'CANCELLED'
    /** Format: date-time */
    changedDate?: string
    changedBy?: definitions['UserReference']
  }
  JobPartStatusChangesDto: {
    statusChanges?: definitions['JobPartStatusChangeDto'][]
  }
  JobPartUpdateSingleDto: {
    /** @enum {string} */
    status:
      | 'NEW'
      | 'ACCEPTED'
      | 'DECLINED'
      | 'REJECTED'
      | 'DELIVERED'
      | 'EMAILED'
      | 'COMPLETED'
      | 'CANCELLED'
    /** Format: date-time */
    dateDue?: string
    providers?: definitions['ProviderReference'][]
  }
  JobPartPatchSingleDto: {
    /** @enum {string} */
    status?:
      | 'NEW'
      | 'ACCEPTED'
      | 'DECLINED'
      | 'REJECTED'
      | 'DELIVERED'
      | 'EMAILED'
      | 'COMPLETED'
      | 'CANCELLED'
    /** Format: date-time */
    dateDue?: string
    providers?: definitions['ProviderReference'][]
  }
  TranslationResourcesDto: {
    machineTranslateSettings?: definitions['MachineTranslateSettingsReference']
    translationMemories?: definitions['ProjectTranslationMemoryReference'][]
    termBases?: definitions['ProjectTermBaseReference'][]
  }
  JobSegmentDto: {
    id?: string
    source?: string
    translation?: string
    /** Format: int64 */
    createdAt?: number
    /** Format: int64 */
    modifiedAt?: number
    createdBy?: definitions['UserReference']
    modifiedBy?: definitions['UserReference']
    /** Format: int32 */
    workflowLevel?: number
    workflowStep?: definitions['WorkflowStepDto']
  }
  SegmentListDto: {
    segments?: definitions['JobSegmentDto'][]
  }
  WorkflowStepDto: {
    id?: string
    uid?: string
    name?: string
    abbr?: string
    /** Format: int32 */
    order?: number
    lqaEnabled?: boolean
  }
  TargetFileWarningsDto: {
    warnings?: string[]
  }
  PreviewUrlDto: {
    /** @enum {string} */
    type?: 'ORIGINAL' | 'PDF'
    url?: string
  }
  PreviewUrlsDto: {
    previews?: definitions['PreviewUrlDto'][]
  }
  AsyncRequestReference: {
    id?: string
    /** Format: date-time */
    dateCreated?: string
    /** @enum {string} */
    action?:
      | 'PRE_ANALYSE'
      | 'POST_ANALYSE'
      | 'COMPARE_ANALYSE'
      | 'PARENT_ANALYSE'
      | 'PRE_TRANSLATE'
      | 'ASYNC_TRANSLATE'
      | 'IMPORT_JOB'
      | 'IMPORT_FILE'
      | 'ALIGN'
      | 'EXPORT_TMX_BY_QUERY'
      | 'EXPORT_TMX'
      | 'IMPORT_TMX'
      | 'IMPORT_TBX'
      | 'INSERT_INTO_TM'
      | 'DELETE_TM'
      | 'CLEAR_TM'
      | 'QA'
      | 'QA_V3'
      | 'UPDATE_CONTINUOUS_JOB'
      | 'UPDATE_SOURCE'
      | 'UPDATE_TARGET'
      | 'EXTRACT_CLEANED_TMS'
      | 'GLOSSARY_PUT'
      | 'GLOSSARY_DELETE'
      | 'CREATE_PROJECT'
      | 'EXPORT_COMPLETE_FILE'
      | 'IMPORT_ANNOTATIONS'
      | 'FILE_FLOW_CONVERTER_IMPORT'
      | 'FILE_FLOW_MT_PRETRANSLATE'
  }
  JobListDto: {
    unsupportedFiles?: string[]
    jobs?: definitions['JobPartReference'][]
    asyncRequest?: definitions['AsyncRequestReference']
  }
  JobCreateRemoteFileDto: {
    connectorToken: string
    remoteFolder?: string
    remoteFileName: string
    remoteFileNameRegex?: boolean
    continuous?: boolean
  }
  JobCreateRequestDto: {
    targetLangs: string[]
    /**
     * Format: date-time
     * @description only use for projects without workflows; otherwise specify in the workflowSettings object. Use ISO 8601 date format.
     */
    due?: string
    workflowSettings?: definitions['WorkflowStepConfiguration'][]
    /** @description only use for projects without workflows; otherwise specify in the workflowSettings object */
    assignments?: definitions['ProvidersPerLanguage'][]
    importSettings?: definitions['UidReference']
    /** @description Default: false */
    useProjectFileImportSettings?: boolean
    preTranslate?: boolean
    semanticMarkup?: boolean
    /** @description use to notify assigned providers, notificationIntervalInMinutes 0 or empty value means immediate notification to all providers */
    notifyProvider?: definitions['NotifyProviderDto']
    callbackUrl?: string
    path?: string
    remoteFile?: definitions['JobCreateRemoteFileDto']
  }
  NotifyProviderDto: {
    organizationEmailTemplate: definitions['IdReference']
    /** Format: int32 */
    notificationIntervalInMinutes?: number
  }
  ProvidersPerLanguage: {
    targetLang?: string
    providers?: definitions['ProviderReference'][]
    assignedUsers?: definitions['User'][]
  }
  User: {
    /** Format: int64 */
    id: number
  }
  WorkflowStepConfiguration: {
    id?: string
    assignments: definitions['ProvidersPerLanguage'][]
    /**
     * Format: date-time
     * @description Use ISO 8601 date format.
     */
    due?: string
    notifyProvider?: definitions['NotifyProviderDto']
  }
  JobPartUpdateSourceDto: {
    uid?: string
    /** @enum {string} */
    status?:
      | 'NEW'
      | 'ACCEPTED'
      | 'DECLINED'
      | 'REJECTED'
      | 'DELIVERED'
      | 'EMAILED'
      | 'COMPLETED'
      | 'CANCELLED'
    targetLang?: string
    filename?: string
    /** Format: int32 */
    workflowLevel?: number
    workflowStep?: definitions['WorkflowStepReference']
  }
  JobUpdateSourceResponseDto: {
    asyncRequest?: definitions['AsyncRequestReference']
    jobs?: definitions['JobPartUpdateSourceDto'][]
  }
  ClosureListJobPart: {
    delegate?: {[key: string]: unknown}
    owner?: {[key: string]: unknown}
    thisObject?: {[key: string]: unknown}
    /** Format: int32 */
    resolveStrategy?: number
    /** Format: int32 */
    directive?: number
    parameterTypes?: unknown[]
    /** Format: int32 */
    maximumNumberOfParameters?: number
  }
  JobPartDeleteReferences: {
    jobs: definitions['UidReference'][]
    getParts?: definitions['ClosureListJobPart']
  }
  HumanTranslateJobsDto: {
    jobs: definitions['UidReference'][]
    humanTranslateSettings: definitions['IdReference']
    comment?: string
    glossaryId?: string
    usePreferredTranslators?: boolean
    /** @enum {string} */
    level?: 'STANDARD' | 'PRO'
    callbackUrl?: string
  }
  NotifyJobPartsRequestDto: {
    jobs: definitions['UidReference'][]
    emailTemplate: definitions['IdReference']
    cc?: string[]
    bcc?: string[]
  }
  GetBilingualFileDto: {
    jobs?: definitions['UidReference'][]
  }
  JobPartUpdateBatchDto: {
    jobs?: definitions['UidReference'][]
    /** @enum {string} */
    status:
      | 'NEW'
      | 'ACCEPTED'
      | 'DECLINED'
      | 'REJECTED'
      | 'DELIVERED'
      | 'EMAILED'
      | 'COMPLETED'
      | 'CANCELLED'
    /** Format: date-time */
    dateDue?: string
    providers?: definitions['ProviderReference'][]
  }
  SegmentReference: {
    uid?: string
  }
  UpdateIgnoredChecksDto: {
    segment: definitions['SegmentReference']
    warningTypes: (
      | 'EmptyTranslation'
      | 'TrailingPunctuation'
      | 'Formatting'
      | 'JoinTags'
      | 'MissingNumbersV3'
      | 'MultipleSpacesV3'
      | 'NonConformingTerm'
      | 'NotConfirmed'
      | 'TranslationLength'
      | 'AbsoluteLength'
      | 'RelativeLength'
      | 'UnresolvedComment'
      | 'EmptyPairTags'
      | 'InconsistentTranslationTargetSource'
      | 'InconsistentTranslationSourceTarget'
      | 'ForbiddenString'
      | 'SpellCheck'
      | 'RepeatedWord'
      | 'InconsistentTagContent'
      | 'EmptyTagContent'
      | 'Malformed'
      | 'ForbiddenTerm'
      | 'NewerAtLowerLevel'
      | 'LeadingAndTrailingSpaces'
      | 'LeadingSpaces'
      | 'TrailingSpaces'
      | 'TargetSourceIdentical'
      | 'SourceOrTargetRegexp'
      | 'UnmodifiedFuzzyTranslation'
      | 'UnmodifiedFuzzyTranslationTM'
      | 'UnmodifiedFuzzyTranslationMTNT'
      | 'Moravia'
      | 'ExtraNumbersV3'
      | 'UnresolvedConversation'
      | 'NestedTags'
      | 'FuzzyInconsistencyTargetSource'
      | 'FuzzyInconsistencySourceTarget'
      | 'CustomQA'
      | 'MissingNonTranslatableAnnotation'
    )[]
  }
  SearchJobsDto: {
    jobs?: definitions['JobPartExtendedDto'][]
  }
  SearchJobsRequestDto: {
    /** @description Max: 50 records */
    jobs: definitions['UidReference'][]
  }
  PreviousWorkflowDto: {
    completed?: boolean
    counts?: definitions['SegmentsCountsDto']
  }
  QualityAssuranceDto: {
    /** Format: int64 */
    segmentsCount?: number
    /** Format: int64 */
    warningsCount?: number
    /** Format: int64 */
    ignoredWarningsCount?: number
  }
  SegmentsCountsDto: {
    allConfirmed?: boolean
    /** Format: int64 */
    charsCount?: number
    /** Format: int64 */
    completedCharsCount?: number
    /** Format: int64 */
    confirmedCharsCount?: number
    /** Format: int64 */
    confirmedLockedCharsCount?: number
    /** Format: int64 */
    lockedCharsCount?: number
    /** Format: int64 */
    segmentsCount?: number
    /** Format: int64 */
    completedSegmentsCount?: number
    /** Format: int64 */
    lockedSegmentsCount?: number
    /** Format: int64 */
    segmentGroupsCount?: number
    /** Format: int64 */
    translatedSegmentsCount?: number
    /** Format: int64 */
    translatedLockedSegmentsCount?: number
    /** Format: int64 */
    wordsCount?: number
    /** Format: int64 */
    completedWordsCount?: number
    /** Format: int64 */
    confirmedWordsCount?: number
    /** Format: int64 */
    confirmedLockedWordsCount?: number
    /** Format: int64 */
    lockedWordsCount?: number
    /** Format: int64 */
    addedSegments?: number
    /** Format: int64 */
    addedWords?: number
    /** Format: int64 */
    machineTranslationPostEditedSegmentsCount?: number
    /** Format: int64 */
    machineTranslationRelevantSegmentsCount?: number
    qualityAssurance?: definitions['QualityAssuranceDto']
    qualityAssuranceResolved?: boolean
  }
  SegmentsCountsResponseDto: {
    jobPartUid?: string
    counts?: definitions['SegmentsCountsDto']
    previousWorkflow?: definitions['PreviousWorkflowDto']
  }
  SegmentsCountsResponseListDto: {
    segmentsCountsResults?: definitions['SegmentsCountsResponseDto'][]
  }
  ImportStatusDtoV2: {
    /** @enum {string} */
    status?: 'RUNNING' | 'ERROR' | 'OK'
    errorMessage?: string
  }
  JobPartReferenceV2: {
    uid?: string
    /**
     * @description InnerId is a sequential number of a job in a project.
     *             Jobs created from the same file share the same innerId across workflow steps
     */
    innerId?: string
    /** @enum {string} */
    status?:
      | 'NEW'
      | 'ACCEPTED'
      | 'DECLINED'
      | 'REJECTED'
      | 'DELIVERED'
      | 'EMAILED'
      | 'COMPLETED'
      | 'CANCELLED'
    providers?: definitions['ProviderReference'][]
    targetLang?: string
    workflowStep?: definitions['ProjectWorkflowStepReference']
    filename?: string
    originalFileDirectory?: string
    /** Format: date-time */
    dateDue?: string
    /** Format: date-time */
    dateCreated?: string
    importStatus?: definitions['ImportStatusDtoV2']
    continuous?: boolean
    sourceFileUid?: string
    split?: boolean
    serverTaskId?: string
    owner?: definitions['UserReference']
    /** @description Default: false */
    imported?: boolean
  }
  PageDtoJobPartReferenceV2: {
    /** Format: int32 */
    totalElements?: number
    /** Format: int32 */
    totalPages?: number
    /** Format: int32 */
    pageSize?: number
    /** Format: int32 */
    pageNumber?: number
    /** Format: int32 */
    numberOfElements?: number
    content?: definitions['JobPartReferenceV2'][]
  }
  SplitJobActionDto: {
    segmentOrdinals?: number[]
    /** Format: int32 */
    partCount?: number
    /** Format: int32 */
    partSize?: number
    /** Format: int32 */
    wordCount?: number
    /** @description Can be used only for PowerPoint files */
    byDocumentPart?: boolean
  }
  SearchResponseListTbDto: {
    searchResults?: definitions['SearchResponseTbDto'][]
  }
  SearchResponseTbDto: {
    termBase?: definitions['TermBaseDto']
    conceptId?: string
    sourceTerm?: definitions['TermDto']
    translationTerms?: definitions['TermDto'][]
  }
  TermBaseDto: {
    id?: string
    uid?: string
    /** Format: int64 */
    internalId?: number
    name: string
    langs?: string[]
    client?: definitions['ClientReference']
    domain?: definitions['DomainReference']
    subDomain?: definitions['SubDomainReference']
    businessUnit?: definitions['BusinessUnitReference']
    createdBy?: definitions['UserReference']
    owner?: definitions['UserReference']
    /** Format: date-time */
    dateCreated?: string
    note?: string
    canShow?: boolean
  }
  TermDto: {
    id?: string
    text: string
    lang?: string
    rtl?: boolean
    /** Format: date-time */
    modifiedAt?: string
    /** Format: date-time */
    createdAt?: string
    modifiedBy?: definitions['UserReference']
    createdBy?: definitions['UserReference']
    caseSensitive?: boolean
    exactMatch?: boolean
    forbidden?: boolean
    preferred?: boolean
    /** @enum {string} */
    status?: 'New' | 'Approved'
    conceptId?: string
    usage?: string
    note?: string
    writable?: boolean
    shortTranslation?: string
    termType?: string
    partOfSpeech?: string
    gender?: string
    number?: string
    definition?: string
    domain?: string
    subDomains?: string[]
    url?: string
    conceptNote?: string
  }
  Match: {
    /** Format: int32 */
    beginIndex?: number
    text?: string
  }
  TermPairDto: {
    sourceTerm: definitions['TermDto']
    targetTerm: definitions['TermDto']
  }
  CreateTermsDto: {
    sourceTerm: definitions['TermCreateByJobDto']
    targetTerm: definitions['TermCreateByJobDto']
  }
  TermCreateByJobDto: {
    text: string
    /** @description Default: false */
    caseSensitive?: boolean
    /** @description Default: false */
    exactMatch?: boolean
    /** @description Default: false */
    forbidden?: boolean
    /** @description Default: false */
    preferred?: boolean
    usage?: string
    note?: string
    shortTranslation?: string
    /** @enum {string} */
    termType?: 'FULL_FORM' | 'SHORT_FORM' | 'ACRONYM' | 'ABBREVIATION' | 'PHRASE' | 'VARIANT'
    /** @enum {string} */
    partOfSpeech?: 'ADJECTIVE' | 'NOUN' | 'VERB' | 'ADVERB'
    /** @enum {string} */
    gender?: 'MASCULINE' | 'FEMININE' | 'NEUTRAL'
    /** @enum {string} */
    number?: 'SINGULAR' | 'PLURAL' | 'UNCOUNTABLE'
  }
  CreateReferenceFileNoteDto: {
    note: string
  }
  ReferenceFileAccessDto: {
    canCreate?: boolean
  }
  ReferenceFilePageDto: {
    /** Format: int32 */
    totalElements?: number
    /** Format: int32 */
    totalPages?: number
    /** Format: int32 */
    pageSize?: number
    /** Format: int32 */
    pageNumber?: number
    /** Format: int32 */
    numberOfElements?: number
    content?: definitions['ReferenceFileReference'][]
    access?: definitions['ReferenceFileAccessDto']
  }
  ProjectReferenceFilesRequestDto: {
    referenceFiles: definitions['IdReference'][]
  }
  UserReferencesDto: {
    users?: definitions['UserReference'][]
  }
  TransMemoryDto: {
    id?: string
    uid?: string
    /** Format: int32 */
    internalId?: number
    name?: string
    sourceLang?: string
    targetLangs?: string[]
    client?: definitions['ClientReference']
    businessUnit?: definitions['BusinessUnitReference']
    domain?: definitions['DomainReference']
    subDomain?: definitions['SubDomainReference']
    note?: string
    /** Format: date-time */
    dateCreated?: string
    createdBy?: definitions['UserReference']
    owner?: definitions['UserReference']
  }
  PageDtoTransMemoryDto: {
    /** Format: int32 */
    totalElements?: number
    /** Format: int32 */
    totalPages?: number
    /** Format: int32 */
    pageSize?: number
    /** Format: int32 */
    pageNumber?: number
    /** Format: int32 */
    numberOfElements?: number
    content?: definitions['TransMemoryDto'][]
  }
  AssignmentPerTargetLangDto: {
    targetLang?: string
    providers?: definitions['ProviderReference'][]
  }
  ProjectTemplate: {
    id?: string
    uid?: string
    templateName?: string
    name?: string
    sourceLang?: string
    targetLangs?: string[]
    note?: string
    useDynamicTitle?: boolean
    dynamicTitle?: string
    owner?: definitions['UserReference']
    client?: definitions['ClientReference']
    domain?: definitions['DomainReference']
    subDomain?: definitions['SubDomainReference']
    vendor?: definitions['VendorReference']
    createdBy?: definitions['UserReference']
    /** Format: date-time */
    dateCreated?: string
    modifiedBy?: definitions['UserReference']
    /**
     * Format: date-time
     * @description Deprecated - use dateTimeModified field instead
     * @example { "epochSeconds": 1624619701, "nano": 0 }
     */
    dateModified?: string
    /** Format: date-time */
    dateTimeModified?: string
    workflowSteps?: definitions['WorkflowStepDto'][]
    workflowSettings?: definitions['WorkflowStepSettingsDto'][]
    businessUnit?: definitions['BusinessUnitReference']
    notifyProviders?: definitions['ProjectTemplateNotifyProviderDto']
    assignedTo?: definitions['AssignmentPerTargetLangDto'][]
    /** @description Deprecated - always null */
    importSettings?: definitions['UidReference']
  }
  ProjectTemplateNotifyProviderDto: {
    organizationEmailTemplate: definitions['ObjectReference']
    /** Format: int32 */
    notificationIntervalInMinutes?: number
  }
  WorkflowStepSettingsDto: {
    workflowStep?: definitions['WorkflowStepReference']
    assignedTo?: definitions['ProjectTemplateWorkflowSettingsAssignedToDto'][]
    notifyProvider?: definitions['ProjectTemplateNotifyProviderDto']
    lqaProfile?: definitions['UidReference']
  }
  ProjectTemplateCreateActionDto: {
    project: definitions['UidReference']
    name: string
    importSettings?: definitions['UidReference']
    useDynamicTitle?: boolean
    dynamicTitle?: string
  }
  ProjectTemplateEditDto: {
    name?: string
    templateName: string
    sourceLang?: string
    targetLangs?: string[]
    useDynamicTitle?: boolean
    dynamicTitle?: string
    /**
     * @description use to notify assigned providers,
     *         notificationIntervalInMinutes 0 or empty value means immediate notification to all providers
     */
    notifyProvider?: definitions['ProjectTemplateNotifyProviderDto']
    workFlowSettings?: definitions['WorkflowStepSettingsEditDto'][]
    client?: definitions['IdReference']
    costCenter?: definitions['IdReference']
    businessUnit?: definitions['IdReference']
    domain?: definitions['IdReference']
    subDomain?: definitions['IdReference']
    vendor?: definitions['IdReference']
    importSettings?: definitions['UidReference']
    note?: string
    /** @description Default: false */
    fileHandover?: boolean
    /** @description only use for projects without workflows; otherwise specify in the workflowSettings object */
    assignedTo?: definitions['ProjectTemplateWorkflowSettingsAssignedToDto'][]
  }
  WorkflowStepSettingsEditDto: {
    workflowStep?: definitions['IdReference']
    assignedTo?: definitions['ProjectTemplateWorkflowSettingsAssignedToDto'][]
    notifyProvider?: definitions['ProjectTemplateNotifyProviderDto']
    lqaProfile?: definitions['UidReference']
  }
  PageDtoProjectTemplateReference: {
    /** Format: int32 */
    totalElements?: number
    /** Format: int32 */
    totalPages?: number
    /** Format: int32 */
    pageSize?: number
    /** Format: int32 */
    pageNumber?: number
    /** Format: int32 */
    numberOfElements?: number
    content?: definitions['ProjectTemplateReference'][]
  }
  ProjectTemplateReference: {
    templateName?: string
    sourceLang?: string
    targetLangs?: string[]
    id?: string
    uid?: string
    owner?: definitions['UserReference']
    domain?: definitions['DomainReference']
    subDomain?: definitions['SubDomainReference']
    costCenter?: definitions['CostCenterReference']
    businessUnit?: definitions['BusinessUnitReference']
    note?: string
    client?: definitions['ClientReference']
  }
  /** @description Base analyseSettingsDto */
  AbstractAnalyseSettingsDto: {
    /**
     * @description Response differs based on analyse type
     * @enum {string}
     */
    type?: 'PreAnalyse' | 'PostAnalyse' | 'PreAnalyseTarget' | 'Compare'
    /** @description Default: false */
    includeConfirmedSegments?: boolean
    /** @description Default: false */
    includeNumbers?: boolean
    /** @description Default: false */
    includeLockedSegments?: boolean
    /** @description Default: false */
    countSourceUnits?: boolean
    /** @description Default: false */
    includeTransMemory?: boolean
    namingPattern?: string
    /** @description Default: false */
    analyzeByLanguage?: boolean
    /** @description Default: false */
    analyzeByProvider?: boolean
    /** @description If automatic post analysis should be created after update source. Default: false */
    allowAutomaticPostAnalysis?: boolean
  }
  PostAnalyse: definitions['AbstractAnalyseSettingsDto'] & {
    /** @description Default: false */
    transMemoryPostEditing?: boolean
    /** @description Default: false */
    nonTranslatablePostEditing?: boolean
    /** @description Default: false */
    machineTranslatePostEditing?: boolean
  }
  PreAnalyse: definitions['AbstractAnalyseSettingsDto'] & {
    /** @description Default: false */
    includeFuzzyRepetitions?: boolean
    /** @description Default: false */
    separateFuzzyRepetitions?: boolean
    /** @description Default: false */
    includeNonTranslatables?: boolean
    /** @description Default: false */
    includeMachineTranslationMatches?: boolean
  }
  'PreAnalyseTarget, Compare': definitions['AbstractAnalyseSettingsDto'] & {
    /** @description Default: false */
    transMemoryPostEditing?: boolean
    /** @description Default: false */
    nonTranslatablePostEditing?: boolean
    /** @description Default: false */
    machineTranslatePostEditing?: boolean
    /** @description Default: false */
    includeFuzzyRepetitions?: boolean
    /** @description Default: false */
    separateFuzzyRepetitions?: boolean
    /** @description Default: false */
    includeNonTranslatables?: boolean
    /** @description Default: false */
    includeMachineTranslationMatches?: boolean
  }
  EditAnalyseSettingsDto: {
    /** @enum {string} */
    type?: 'PreAnalyse' | 'PostAnalyse' | 'PreAnalyseTarget' | 'Compare'
    /** @description Default: false */
    includeFuzzyRepetitions?: boolean
    /** @description Default: false */
    separateFuzzyRepetitions?: boolean
    /** @description Default: false */
    includeNonTranslatables?: boolean
    /** @description Default: false */
    includeMachineTranslationMatches?: boolean
    /** @description Default: false */
    includeConfirmedSegments?: boolean
    /** @description Default: false */
    includeNumbers?: boolean
    /** @description Default: false */
    includeLockedSegments?: boolean
    /** @description Default: false */
    transMemoryPostEditing?: boolean
    /** @description Default: false */
    nonTranslatablePostEditing?: boolean
    /** @description Default: false */
    machineTranslatePostEditing?: boolean
    /** @description Default: false */
    countSourceUnits?: boolean
    /** @description Default: false */
    includeTransMemory?: boolean
    namingPattern?: string
    /** @description Mutually exclusive with analyzeByProvider. Default: false */
    analyzeByLanguage?: boolean
    /** @description Mutually exclusive with analyzeByLanguage. Default: true */
    analyzeByProvider?: boolean
    /** @description Default: false */
    allowAutomaticPostAnalysis?: boolean
  }
  ProjectTemplateTermBaseDto: {
    targetLocale?: string
    workflowStep?: definitions['WorkflowStepReference']
    readMode?: boolean
    writeMode?: boolean
    termBase?: definitions['TermBaseDto']
    qualityAssurance?: boolean
  }
  ProjectTemplateTermBaseListDto: {
    termBases?: definitions['ProjectTemplateTermBaseDto'][]
  }
  SetProjectTemplateTermBaseDto: {
    readTermBases?: definitions['IdReference'][]
    writeTermBase?: definitions['IdReference']
    qualityAssuranceTermBases?: definitions['IdReference'][]
    targetLang?: string
    workflowStep?: definitions['IdReference']
  }
  ProjectSecuritySettingsDtoV2: {
    downloadEnabled?: boolean
    webEditorEnabledForLinguists?: boolean
    showUserDataToLinguists?: boolean
    emailNotifications?: boolean
    strictWorkflowFinish?: boolean
    useVendors?: boolean
    linguistsMayEditLockedSegments?: boolean
    usersMaySetAutoPropagation?: boolean
    allowLoadingExternalContentInEditors?: boolean
    allowLoadingIframes?: boolean
    linguistsMayEditSource?: boolean
    linguistsMayEditTagContent?: boolean
    linguistsMayDownloadLqaReport?: boolean
    usernamesDisplayedInLqaReport?: boolean
    userMaySetInstantQA?: boolean
    triggerWebhooks?: boolean
    vendors?: definitions['VendorSecuritySettingsDto']
    allowedDomains?: string[]
  }
  EditProjectSecuritySettingsDtoV2: {
    /** @description Default: `false` */
    downloadEnabled?: boolean
    /** @description Default: `false` */
    webEditorEnabledForLinguists?: boolean
    /** @description Default: `false` */
    showUserDataToLinguists?: boolean
    /** @description Default: `false` */
    emailNotifications?: boolean
    /** @description Default: `false` */
    strictWorkflowFinish?: boolean
    /** @description Default: `false` */
    useVendors?: boolean
    /** @description Default: `false` */
    linguistsMayEditLockedSegments?: boolean
    /** @description Default: `true` */
    usersMaySetAutoPropagation?: boolean
    /** @description Default: `true` */
    allowLoadingExternalContentInEditors?: boolean
    /** @description Default: `false` */
    allowLoadingIframes?: boolean
    /** @description Default: `true` */
    linguistsMayEditSource?: boolean
    /** @description Default: `true` */
    linguistsMayEditTagContent?: boolean
    /** @description Default: `true` */
    linguistsMayDownloadLqaReport?: boolean
    /** @description Default: `true` */
    usernamesDisplayedInLqaReport?: boolean
    /** @description Default: `true` */
    userMaySetInstantQA?: boolean
    /** @description Default: `true` */
    triggerWebhooks?: boolean
    /** @description Default: `false` */
    notifyJobOwnerStatusChanged?: boolean
    vendors?: definitions['VendorSecuritySettingsDto']
    allowedDomains?: string[]
  }
  ProjectTermBaseDto: {
    targetLocale?: string
    workflowStep?: definitions['WorkflowStepReference']
    readMode?: boolean
    writeMode?: boolean
    termBase?: definitions['TermBaseDto']
    qualityAssurance?: boolean
  }
  ProjectTermBaseListDto: {
    termBases?: definitions['ProjectTermBaseDto'][]
  }
  SetTermBaseDto: {
    readTermBases?: definitions['IdReference'][]
    writeTermBase?: definitions['IdReference']
    qualityAssuranceTermBases?: definitions['IdReference'][]
    targetLang?: string
  }
  PageDtoTermBaseDto: {
    /** Format: int32 */
    totalElements?: number
    /** Format: int32 */
    totalPages?: number
    /** Format: int32 */
    pageSize?: number
    /** Format: int32 */
    pageNumber?: number
    /** Format: int32 */
    numberOfElements?: number
    content?: definitions['TermBaseDto'][]
  }
  SearchTMRequestDto: {
    segment: string
    /** Format: int32 */
    workflowLevel?: number
    /** Format: double */
    scoreThreshold?: number
    previousSegment?: string
    nextSegment?: string
    contextKey?: string
    /**
     * Format: int32
     * @description Default: 5
     */
    maxSegments?: number
    /**
     * Format: int32
     * @description Default: 5
     */
    maxSubSegments?: number
    tagMetadata?: definitions['TagMetadataDto'][]
    targetLangs: string[]
  }
  EmailQuotesResponseDto: {
    recipients?: string[]
  }
  EmailQuotesRequestDto: {
    quotes: definitions['UidReference'][]
    subject: string
    body: string
    cc?: string
    bcc?: string
  }
  AuthSchema: {
    type?: string
    name?: string
    description?: string
    specUrl?: string
    primary?: boolean
  }
  ServiceProviderConfigDto: {
    authenticationSchemes?: definitions['AuthSchema'][]
    schemas?: string[]
    patch?: definitions['Supported']
    bulk?: definitions['Supported']
    filter?: definitions['Supported']
    changePassword?: definitions['Supported']
    sort?: definitions['Supported']
    etag?: definitions['Supported']
    xmlDataFormat?: definitions['Supported']
  }
  Supported: {
    supported?: boolean
  }
  SchemaExtension: {
    schema?: string
    required?: boolean
  }
  ScimResourceTypeSchema: {
    schemas?: string[]
    id?: string
    name?: string
    endpoint?: string
    description?: string
    schema?: string
    schemaExtensions?: definitions['SchemaExtension'][]
  }
  Attribute: {
    name?: string
    /** @enum {string} */
    type?:
      | 'STRING'
      | 'BOOLEAN'
      | 'DECIMAL'
      | 'INTEGER'
      | 'DATE_TIME'
      | 'BINARY'
      | 'REFERENCE'
      | 'COMPLEX'
    subAttributes?: definitions['Attribute'][]
    multiValued?: boolean
    description?: string
    required?: boolean
    caseExact?: boolean
    /** @enum {string} */
    mutability?: 'READ_ONLY' | 'READ_WRITE' | 'IMMUTABLE' | 'WRITE_ONLY'
    /** @enum {string} */
    returned?: 'ALWAYS' | 'NEVER' | 'DEFAULT' | 'REQUEST'
    /** @enum {string} */
    uniqueness?: 'NONE' | 'SERVER' | 'GLOBAL'
  }
  ScimResourceSchema: {
    id?: string
    name?: string
    description?: string
    attributes?: definitions['Attribute'][]
  }
  Email: {
    value?: string
    type?: string
    /** @description Default: false */
    primary?: boolean
  }
  Name: {
    givenName: string
    familyName: string
  }
  ScimMeta: {
    /** Format: date-time */
    created?: string
    location?: string
  }
  ScimUserCoreDto: {
    id?: string
    userName: string
    name: definitions['Name']
    /** @description Default: true */
    active?: boolean
    emails: definitions['Email'][]
    meta?: definitions['ScimMeta']
  }
  /** @description segmentation rule object */
  SegmentationRuleDto: {
    id?: string
    uid?: string
    name: string
    locale?: string
    /** @description Default: false */
    primary?: boolean
    filename: string
    /** Format: date-time */
    dateCreated?: string
    /** @description created by user */
    createdBy?: definitions['UserReference']
  }
  /** @description segmentation rule object for editing */
  EditSegmentationRuleDto: {
    name: string
    /** @description Default: false */
    primary?: boolean
  }
  PageDtoSegmentationRuleReference: {
    /** Format: int32 */
    totalElements?: number
    /** Format: int32 */
    totalPages?: number
    /** Format: int32 */
    pageSize?: number
    /** Format: int32 */
    pageNumber?: number
    /** Format: int32 */
    numberOfElements?: number
    content?: definitions['SegmentationRuleReference'][]
  }
  SegmentationRuleReference: {
    id?: string
    uid?: string
    name: string
    locale?: string
    /** @description Default: false */
    primary?: boolean
    filename: string
    /** Format: date-time */
    dateCreated?: string
  }
  CheckResponse: {
    text?: string
    misspelledWords?: definitions['MisspelledWord'][]
  }
  MisspelledWord: {
    word?: string
    /** Format: int32 */
    offset?: number
  }
  SpellCheckResponseDto: {
    spellCheckResults?: definitions['CheckResponse'][]
  }
  SpellCheckRequestDto: {
    lang: string
    texts: string[]
    referenceTexts?: string[]
    zeroLengthSeparator?: string
  }
  SuggestResponse: {
    word?: string
    suggestions?: definitions['Suggestion'][]
  }
  SuggestResponseDto: {
    suggestResults?: definitions['SuggestResponse'][]
  }
  Suggestion: {
    text?: string
  }
  SuggestRequestDto: {
    lang: string
    words: string[]
    referenceTexts?: string[]
  }
  DictionaryItemDto: {
    lang: string
    word: string
  }
  SubDomainDto: {
    id?: string
    uid?: string
    name?: string
    createdBy?: definitions['UserReference']
  }
  PageDtoSubDomainDto: {
    /** Format: int32 */
    totalElements?: number
    /** Format: int32 */
    totalPages?: number
    /** Format: int32 */
    pageSize?: number
    /** Format: int32 */
    pageNumber?: number
    /** Format: int32 */
    numberOfElements?: number
    content?: definitions['SubDomainDto'][]
  }
  SubDomainEditDto: {
    name?: string
  }
  TermBaseEditDto: {
    name: string
    langs: string[]
    client?: definitions['IdReference']
    domain?: definitions['IdReference']
    subDomain?: definitions['IdReference']
    businessUnit?: definitions['IdReference']
    /** @description Owner of the TM must be Admin or PM */
    owner?: definitions['IdReference']
    note?: string
  }
  ImportTermBaseResponseDto: {
    langs?: string[]
    /** Format: int64 */
    createdTermsCount?: number
    /** Format: int64 */
    updatedTermsCount?: number
  }
  ConceptListResponseDto: {
    concepts?: definitions['ConceptWithMetadataDto'][]
    /** Format: int64 */
    totalCount?: number
  }
  ConceptWithMetadataDto: {
    id?: string
    domain?: definitions['DomainReference']
    subdomains?: definitions['SubDomainReference'][]
    url?: string
    definition?: string
    conceptNote?: string
  }
  ConceptEditDto: {
    domain?: definitions['UidReference']
    subdomains?: definitions['UidReference'][]
    definition?: string
    url?: string
    conceptNote?: string
  }
  TermCreateDto: {
    text: string
    lang: string
    /** @description Default: false */
    caseSensitive?: boolean
    /** @description Default: false */
    exactMatch?: boolean
    /** @description Default: false */
    forbidden?: boolean
    /** @description Default: false */
    preferred?: boolean
    /** @enum {string} */
    status?: 'New' | 'Approved'
    conceptId?: string
    usage?: string
    note?: string
    shortTranslation?: string
    /** @enum {string} */
    termType?: 'FULL_FORM' | 'SHORT_FORM' | 'ACRONYM' | 'ABBREVIATION' | 'PHRASE' | 'VARIANT'
    /** @enum {string} */
    partOfSpeech?: 'ADJECTIVE' | 'NOUN' | 'VERB' | 'ADVERB'
    /** @enum {string} */
    gender?: 'MASCULINE' | 'FEMININE' | 'NEUTRAL'
    /** @enum {string} */
    number?: 'SINGULAR' | 'PLURAL' | 'UNCOUNTABLE'
  }
  TermEditDto: {
    text: string
    lang?: string
    /** @description Default: false */
    caseSensitive?: boolean
    /** @description Default: false */
    exactMatch?: boolean
    /** @description Default: false */
    forbidden?: boolean
    /** @description Default: false */
    preferred?: boolean
    /** @enum {string} */
    status?: 'New' | 'Approved'
    usage?: string
    note?: string
    shortTranslation?: string
    /** @enum {string} */
    termType?: 'FULL_FORM' | 'SHORT_FORM' | 'ACRONYM' | 'ABBREVIATION' | 'PHRASE' | 'VARIANT'
    /** @enum {string} */
    partOfSpeech?: 'ADJECTIVE' | 'NOUN' | 'VERB' | 'ADVERB'
    /** @enum {string} */
    gender?: 'MASCULINE' | 'FEMININE' | 'NEUTRAL'
    /** @enum {string} */
    number?: 'SINGULAR' | 'PLURAL' | 'UNCOUNTABLE'
  }
  ConceptListReference: {
    concepts: definitions['IdReference'][]
  }
  ConceptDto: {
    id?: string
    writable?: boolean
    terms?: definitions['TermDto'][][]
  }
  BackgroundTasksTbDto: {
    status?: string
    finishedDataText?: string
    asyncRequest?: definitions['AsyncRequestDto']
    lastTaskString?: string
    metadata?: definitions['MetadataResponse']
    lastTaskOk?: string
    lastTaskError?: string
    lastTaskErrorHtml?: string
  }
  MetadataResponse: {
    /** Format: int64 */
    segmentsCount?: number
    /** Format: int64 */
    deduplicatedSegmentsCount?: number
    metadataByLanguage?: {[key: string]: definitions['LanguageMetadata1']}
  }
  BrowseResponseListDto: {
    searchResults?: definitions['ConceptDto'][]
  }
  BrowseRequestDto: {
    queryLang?: string
    query?: string
    status?: string
    /** Format: int32 */
    pageNumber?: number
    /** Format: int32 */
    pageSize?: number
  }
  TermBaseSearchRequestDto: {
    targetLangs: string[]
    sourceLang: string
    query: string
    /** @enum {string} */
    status?: 'New' | 'Approved'
  }
  MetadataTbDto: {
    /** Format: int64 */
    termsCount?: number
    metadataByLanguage?: {[key: string]: number}
  }
  TransMemoryCreateDto: {
    name: string
    sourceLang: string
    targetLangs: string[]
    client?: definitions['IdReference']
    businessUnit?: definitions['IdReference']
    domain?: definitions['IdReference']
    subDomain?: definitions['IdReference']
    note?: string
  }
  TransMemoryEditDto: {
    name: string
    /** @description New target languages to add. No languages can be removed */
    targetLangs: string[]
    client?: definitions['IdReference']
    businessUnit?: definitions['IdReference']
    domain?: definitions['IdReference']
    subDomain?: definitions['IdReference']
    /** @description Owner of the TM must be Admin or PM */
    owner?: definitions['IdReference']
    note?: string
  }
  TargetLanguageDto: {
    language: string
  }
  CleanedTransMemoriesDto: {
    uids: string[]
    /** @enum {string} */
    outputFormat?: 'TXT' | 'TSV'
    preserveRatio?: number
    targetLangs?: string[]
  }
  SegmentDto: {
    targetLang: string
    sourceSegment: string
    targetSegment: string
    previousSourceSegment?: string
    nextSourceSegment?: string
    sourceTagMetadata?: definitions['TagMetadataDto'][]
    targetTagMetadata?: definitions['TagMetadataDto'][]
  }
  LanguageMetadata1: {
    /** Format: int64 */
    segmentsCount?: number
  }
  TranslationDto: {
    lang: string
    text: string
  }
  BackgroundTasksTmDto: {
    status?: string
    finishedDataText?: string
    asyncRequest?: definitions['AsyncRequestDto']
    lastTaskString?: string
    metadata?: definitions['MetadataResponse']
    lastTaskOk?: string
    lastTaskError?: string
    lastTaskErrorHtml?: string
  }
  WildCardSearchRequestDto: {
    query?: string
    sourceLang: string
    targetLangs?: string[]
    /** Format: int32 */
    count?: number
    /** Format: int32 */
    offset?: number
    sourceLangs?: string[]
  }
  AsyncExportTMByQueryDto: {
    asyncRequest?: definitions['ObjectReference']
    transMemory?: definitions['ObjectReference']
    exportTargetLangs?: string[]
    queries?: definitions['Query'][]
  }
  AsyncExportTMByQueryResponseDto: {
    asyncRequest?: definitions['AsyncRequestDto']
    asyncExport?: definitions['AsyncExportTMByQueryDto']
  }
  Query: {
    query?: string
    lang?: string
  }
  ExportByQueryDto: {
    exportTargetLangs: string[]
    queries: string[]
    queryLangs: string[]
    /** Format: date-time */
    createdAtMin?: string
    /** Format: date-time */
    createdAtMax?: string
    /** Format: date-time */
    modifiedAtMin?: string
    /** Format: date-time */
    modifiedAtMax?: string
    createdBy?: definitions['IdReference']
    modifiedBy?: definitions['IdReference']
    filename?: string
    project?: definitions['UidReference']
    callbackUrl?: string
  }
  SearchRequestDto: {
    query: string
    sourceLang: string
    targetLangs?: string[]
    previousSegment?: string
    nextSegment?: string
    tagMetadata?: definitions['TagMetadataDto'][]
    /** @description Remove leading and trailing whitespace from query. Default: true */
    trimQuery?: boolean
    /** @description Return both wildcard and exact search results. Default: true */
    phraseQuery?: boolean
  }
  TranslationRequestDto: {
    sourceTexts: string[]
  }
  /** @description connection between language pair and workflow steps, contains price */
  TranslationPriceDto: {
    workflowStep?: definitions['WorkflowStepDto']
    /** Format: double */
    price?: number
  }
  /** @description Price list with set of prices for language pairs */
  TranslationPriceListDto: {
    id?: string
    uid?: string
    /** Format: date-time */
    dateCreated?: string
    name: string
    currencyCode?: string
    /** @enum {string} */
    billingUnit?: 'Character' | 'Word' | 'Page' | 'Hour'
    priceSets?: definitions['TranslationPriceSetDto'][]
  }
  /** @description Language pair for translation price list, owns minimalPrice */
  TranslationPriceSetDto: {
    sourceLang?: string
    targetLang?: string
    /** Format: double */
    minimumPrice?: number
    prices?: definitions['TranslationPriceDto'][]
  }
  TranslationPriceListCreateDto: {
    name: string
    currencyCode: string
    /**
     * @description Default: Word
     * @enum {string}
     */
    billingUnit?: 'Word' | 'Page' | 'Character' | 'Hour'
  }
  PageDtoTranslationPriceListDto: {
    /** Format: int32 */
    totalElements?: number
    /** Format: int32 */
    totalPages?: number
    /** Format: int32 */
    pageSize?: number
    /** Format: int32 */
    pageNumber?: number
    /** Format: int32 */
    numberOfElements?: number
    content?: definitions['TranslationPriceListDto'][]
  }
  TranslationPriceSetListDto: {
    priceSets?: definitions['TranslationPriceSetDto'][]
  }
  TranslationPriceSetCreateDto: {
    sourceLanguages: string[]
    targetLanguages: string[]
  }
  TranslationPriceSetBulkDeleteDto: {
    sourceLanguages?: string[]
    targetLanguages?: string[]
  }
  PageDtoTranslationPriceSetDto: {
    /** Format: int32 */
    totalElements?: number
    /** Format: int32 */
    totalPages?: number
    /** Format: int32 */
    pageSize?: number
    /** Format: int32 */
    pageNumber?: number
    /** Format: int32 */
    numberOfElements?: number
    content?: definitions['TranslationPriceSetDto'][]
  }
  TranslationPriceSetBulkMinimumPricesDto: {
    sourceLanguages?: string[]
    targetLanguages?: string[]
    /** Format: double */
    minimumPrice?: number
  }
  TranslationPriceSetBulkPricesDto: {
    sourceLanguages?: string[]
    targetLanguages?: string[]
    /** Format: double */
    price?: number
    workflowSteps?: definitions['IdReference'][]
  }
  PageDtoProjectReference: {
    /** Format: int32 */
    totalElements?: number
    /** Format: int32 */
    totalPages?: number
    /** Format: int32 */
    pageSize?: number
    /** Format: int32 */
    pageNumber?: number
    /** Format: int32 */
    numberOfElements?: number
    content?: definitions['ProjectReference'][]
  }
  UserPasswordEditDto: {
    password: string
  }
  UserDto: {
    id?: string
    uid?: string
    userName?: string
    firstName?: string
    lastName?: string
    email?: string
    /** Format: date-time */
    dateCreated?: string
    /** Format: date-time */
    dateDeleted?: string
    createdBy?: definitions['UserReference']
    /** @enum {string} */
    role?:
      | 'SYS_ADMIN'
      | 'SYS_ADMIN_READ'
      | 'ADMIN'
      | 'PROJECT_MANAGER'
      | 'LINGUIST'
      | 'GUEST'
      | 'SUBMITTER'
    timezone?: string
    note?: string
    terminologist?: boolean
    sourceLangs?: string[]
    targetLangs?: string[]
    active?: boolean
    priceList?: definitions['PriceListReference']
    netRateScheme?: definitions['DiscountSchemeReference']
  }
  /** @description user login statistics */
  UserStatisticsDto: {
    /** Format: date-time */
    date?: string
    ipAddress?: string
    ipCountry?: string
    userAgent?: string
  }
  /** @description envelope for user statistics */
  UserStatisticsListDto: {
    userStatistics: definitions['UserStatisticsDto'][]
  }
  PageDtoUserDto: {
    /** Format: int32 */
    totalElements?: number
    /** Format: int32 */
    totalPages?: number
    /** Format: int32 */
    pageSize?: number
    /** Format: int32 */
    pageNumber?: number
    /** Format: int32 */
    numberOfElements?: number
    content?: definitions['UserDto'][]
  }
  AssignedJobDto: {
    uid?: string
    innerId?: string
    filename?: string
    /** Format: date-time */
    dateDue?: string
    /** Format: date-time */
    dateCreated?: string
    /** @enum {string} */
    status?:
      | 'NEW'
      | 'ACCEPTED'
      | 'DECLINED'
      | 'REJECTED'
      | 'DELIVERED'
      | 'EMAILED'
      | 'COMPLETED'
      | 'CANCELLED'
    targetLang?: string
    sourceLang?: string
    project?: definitions['ProjectReference']
    workflowStep?: definitions['ProjectWorkflowStepReference']
    importStatus?: definitions['ImportStatusDto']
    imported?: boolean
  }
  PageDtoAssignedJobDto: {
    /** Format: int32 */
    totalElements?: number
    /** Format: int32 */
    totalPages?: number
    /** Format: int32 */
    pageSize?: number
    /** Format: int32 */
    pageNumber?: number
    /** Format: int32 */
    numberOfElements?: number
    content?: definitions['AssignedJobDto'][]
  }
  PageDtoWorkflowStepReference: {
    /** Format: int32 */
    totalElements?: number
    /** Format: int32 */
    totalPages?: number
    /** Format: int32 */
    pageSize?: number
    /** Format: int32 */
    pageNumber?: number
    /** Format: int32 */
    numberOfElements?: number
    content?: definitions['WorkflowStepReference'][]
  }
  PageDtoString: {
    /** Format: int32 */
    totalElements?: number
    /** Format: int32 */
    totalPages?: number
    /** Format: int32 */
    pageSize?: number
    /** Format: int32 */
    pageNumber?: number
    /** Format: int32 */
    numberOfElements?: number
    content?: string[]
  }
  LastLoginDto: {
    user?: definitions['UserReference']
    /** Format: date-time */
    lastLoginDate?: string
  }
  PageDtoLastLoginDto: {
    /** Format: int32 */
    totalElements?: number
    /** Format: int32 */
    totalPages?: number
    /** Format: int32 */
    pageSize?: number
    /** Format: int32 */
    pageNumber?: number
    /** Format: int32 */
    numberOfElements?: number
    content?: definitions['LastLoginDto'][]
  }
  VendorDto: {
    id?: string
    uid?: string
    name?: string
    vendorToken?: string
    priceList?: definitions['PriceListReference']
    netRateScheme?: definitions['DiscountSchemeReference']
    sourceLocales?: string[]
    targetLocales?: string[]
    clients?: definitions['ClientReference'][]
    domains?: definitions['DomainReference'][]
    subDomains?: definitions['SubDomainReference'][]
    workflowSteps?: definitions['WorkflowStepReference'][]
  }
  PageDtoVendorDto: {
    /** Format: int32 */
    totalElements?: number
    /** Format: int32 */
    totalPages?: number
    /** Format: int32 */
    pageSize?: number
    /** Format: int32 */
    pageNumber?: number
    /** Format: int32 */
    numberOfElements?: number
    content?: definitions['VendorDto'][]
  }
  CreateVendorDto: {
    vendorToken: string
    netRateScheme?: definitions['UidReference']
    priceList?: definitions['UidReference']
    sourceLocales?: string[]
    targetLocales?: string[]
    clients?: definitions['UidReference'][]
    domains?: definitions['UidReference'][]
    subDomains?: definitions['UidReference'][]
    workflowSteps?: definitions['UidReference'][]
  }
  PageDtoWebhookCallDto: {
    /** Format: int32 */
    totalElements?: number
    /** Format: int32 */
    totalPages?: number
    /** Format: int32 */
    pageSize?: number
    /** Format: int32 */
    pageNumber?: number
    /** Format: int32 */
    numberOfElements?: number
    content?: definitions['WebhookCallDto'][]
  }
  WebhookCallDto: {
    uid?: string
    parentUid?: string
    eventUid?: string
    webhookSettings?: definitions['UidReference']
    /** Format: date-time */
    createdAt?: string
    url?: string
    forced?: boolean
    /** Format: date-time */
    lastForcedAt?: string
    body?: string
    /** @enum {string} */
    triggerEvent?:
      | 'JOB_STATUS_CHANGED'
      | 'JOB_CREATED'
      | 'JOB_DELETED'
      | 'JOB_UNSHARED'
      | 'JOB_ASSIGNED'
      | 'JOB_DUE_DATE_CHANGED'
      | 'JOB_UPDATED'
      | 'JOB_TARGET_UPDATED'
      | 'JOB_EXPORTED'
      | 'JOB_UNEXPORTED'
      | 'PROJECT_CREATED'
      | 'PROJECT_DELETED'
      | 'PROJECT_UNSHARED'
      | 'PROJECT_STATUS_CHANGED'
      | 'PROJECT_DUE_DATE_CHANGED'
      | 'SHARED_PROJECT_ASSIGNED'
      | 'PROJECT_METADATA_UPDATED'
      | 'PRE_TRANSLATION_FINISHED'
      | 'ANALYSIS_CREATED'
      | 'CONTINUOUS_JOB_UPDATED'
      | 'PROJECT_TEMPLATE_CREATED'
      | 'PROJECT_TEMPLATE_UPDATED'
      | 'PROJECT_TEMPLATE_DELETED'
      | 'RAW_MT_CONVERTER_IMPORT_FINISHED'
      | 'RAW_MT_PRE_TRANSLATION_FINISHED'
    /** Format: int64 */
    retryAttempt?: number
    /** Format: int64 */
    statusCode?: number
    errorMessage?: string
  }
  ReplayRequestDto: {
    webhookCalls?: definitions['UidReference'][]
  }
  PageDtoWorkflowStepDto: {
    /** Format: int32 */
    totalElements?: number
    /** Format: int32 */
    totalPages?: number
    /** Format: int32 */
    pageSize?: number
    /** Format: int32 */
    pageNumber?: number
    /** Format: int32 */
    numberOfElements?: number
    content?: definitions['WorkflowStepDto'][]
  }
  CreateWorkflowStepDto: {
    /** @description Name of the lqa workflow step */
    name: string
    /**
     * Format: int32
     * @description Order value
     */
    order?: number
    /** @description Default: false */
    lqaEnabled?: boolean
    /** @description Abbreviation */
    abbr: string
  }
  EditWorkflowStepDto: {
    /** @description Name of the lqa workflow step */
    name?: string
    /**
     * Format: int32
     * @description Order value
     */
    order?: number
    /** @description Default: false */
    lqaEnabled?: boolean
    /** @description Abbreviation */
    abbr?: string
  }
  AsyncAnalyseListResponseV2Dto: {
    asyncRequests?: definitions['AsyncAnalyseResponseV2Dto'][]
  }
  AsyncAnalyseResponseV2Dto: {
    asyncRequest?: definitions['AsyncRequestV2Dto']
    analyse?: definitions['ObjectReference']
  }
  AsyncRequestV2Dto: {
    id?: string
    createdBy?: definitions['UserReference']
    /** Format: date-time */
    dateCreated?: string
    /** @enum {string} */
    action?:
      | 'PRE_ANALYSE'
      | 'POST_ANALYSE'
      | 'COMPARE_ANALYSE'
      | 'PARENT_ANALYSE'
      | 'PRE_TRANSLATE'
      | 'ASYNC_TRANSLATE'
      | 'IMPORT_JOB'
      | 'IMPORT_FILE'
      | 'ALIGN'
      | 'EXPORT_TMX_BY_QUERY'
      | 'EXPORT_TMX'
      | 'IMPORT_TMX'
      | 'IMPORT_TBX'
      | 'INSERT_INTO_TM'
      | 'DELETE_TM'
      | 'CLEAR_TM'
      | 'QA'
      | 'QA_V3'
      | 'UPDATE_CONTINUOUS_JOB'
      | 'UPDATE_SOURCE'
      | 'UPDATE_TARGET'
      | 'EXTRACT_CLEANED_TMS'
      | 'GLOSSARY_PUT'
      | 'GLOSSARY_DELETE'
      | 'CREATE_PROJECT'
      | 'EXPORT_COMPLETE_FILE'
      | 'IMPORT_ANNOTATIONS'
      | 'FILE_FLOW_CONVERTER_IMPORT'
      | 'FILE_FLOW_MT_PRETRANSLATE'
    asyncResponse?: definitions['AsyncResponseV2Dto']
    parent?: definitions['AsyncRequestV2Dto']
    project?: definitions['ProjectReference']
  }
  AsyncResponseV2Dto: {
    /** Format: date-time */
    dateCreated?: string
    errorCode?: string
    errorDesc?: string
    errorDetails?: definitions['ErrorDetailDtoV2'][]
    warnings?: definitions['ErrorDetailDtoV2'][]
  }
  ErrorDetailDtoV2: {
    /** @description Code, e.g. NOT_FOUND. */
    code?: string
    /** @description Related arguments, e.g. number => "hello world" */
    args?: {[key: string]: {[key: string]: unknown}}
    /** @description Optional human-readable message. */
    message?: string
  }
  CreateAnalyseAsyncV2Dto: {
    jobs: definitions['UidReference'][]
    /**
     * @description default: PreAnalyse
     * @enum {string}
     */
    type?: 'PreAnalyse' | 'PostAnalyse' | 'Compare'
    /** @description Default: true */
    includeFuzzyRepetitions?: boolean
    /** @description Default: false */
    separateFuzzyRepetitions?: boolean
    /** @description Default: true */
    includeConfirmedSegments?: boolean
    /** @description Default: true */
    includeNumbers?: boolean
    /** @description Default: true */
    includeLockedSegments?: boolean
    /** @description Default: true */
    countSourceUnits?: boolean
    /** @description Default: true. Works only for type=PreAnalyse. */
    includeTransMemory?: boolean
    /** @description Default: false. Works only for type=PreAnalyse. */
    includeNonTranslatables?: boolean
    /** @description Default: false. Works only for type=PreAnalyse. */
    includeMachineTranslationMatches?: boolean
    /** @description Default: false. Works only for type=PostAnalyse. */
    transMemoryPostEditing?: boolean
    /** @description Default: false. Works only for type=PostAnalyse. */
    nonTranslatablePostEditing?: boolean
    /** @description Default: false. Works only for type=PostAnalyse. */
    machineTranslatePostEditing?: boolean
    name?: string
    netRateScheme?: definitions['IdReference']
    /**
     * Format: int32
     * @description Required for type=Compare
     */
    compareWorkflowLevel?: number
    /**
     * @description Default: false. Use default project settings. Will be overwritten with setting sent
     *         in the API call.
     */
    useProjectAnalysisSettings?: boolean
    callbackUrl?: string
    provider?: definitions['ProviderReference']
  }
  AnalyseLanguagePartV2Dto: {
    id?: string
    sourceLang?: string
    targetLang?: string
    data?: definitions['DataDto']
    discountedData?: definitions['DataDto']
    jobs?: definitions['AnalyseJobReference'][]
  }
  AnalyseV2Dto: {
    id?: string
    uid?: string
    /** @enum {string} */
    type?: 'PreAnalyse' | 'PostAnalyse' | 'PreAnalyseTarget' | 'Compare' | 'PreAnalyseProvider'
    name?: string
    provider?: definitions['ProviderReference']
    createdBy?: definitions['UserReference']
    /** Format: date-time */
    dateCreated?: string
    netRateScheme?: definitions['NetRateSchemeReference']
    analyseLanguageParts?: definitions['AnalyseLanguagePartV2Dto'][]
  }
  DataDto: {
    available?: boolean
    estimate?: boolean
    all?: definitions['CountsDto']
    repetitions?: definitions['CountsDto']
    transMemoryMatches?: definitions['MatchCounts101Dto']
    machineTranslationMatches?: definitions['MatchCountsDto']
    nonTranslatablesMatches?: definitions['MatchCountsNTDto']
    internalFuzzyMatches?: definitions['MatchCountsDto']
  }
  MatchCountsNTDto: {
    match100?: definitions['CountsDto']
    match95?: definitions['CountsDto']
    match85?: definitions['CountsDto']
    match75?: definitions['CountsDto']
    match50?: definitions['CountsDto']
    match0?: definitions['CountsDto']
  }
  EditAnalyseV2Dto: {
    name?: string
    provider?: definitions['ProviderReference']
    netRateScheme?: definitions['UidReference']
  }
  AnalysesV2Dto: {
    analyses?: definitions['AnalyseV2Dto'][]
  }
  BulkEditAnalyseV2Dto: {
    analyses: definitions['IdReference'][]
    name?: string
    provider?: definitions['ProviderReference']
    netRateScheme?: definitions['UidReference']
  }
  MultipartFile: {
    contentType?: string
    originalFilename?: string
    name?: string
    empty?: boolean
    bytes?: string[]
    /** Format: int64 */
    size?: number
    inputStream?: definitions['InputStream']
  }
  UploadBilingualFileRequestDto: {
    /** @description One or more bilingual files and/or ZIP archives (max 50) */
    file: definitions['MultipartFile']
  }
  AsyncFileOpResponseDto: {
    id?: string
    createdBy?: definitions['UserReference']
    /** Format: date-time */
    dateCreated?: string
    fileName?: string
    /** @enum {string} */
    action?:
      | 'GUI_UPLOAD'
      | 'GUI_DOWNLOAD'
      | 'GUI_REIMPORT'
      | 'GUI_REIMPORT_TARGET'
      | 'CJ_UPLOAD'
      | 'CJ_DOWNLOAD'
      | 'APC_UPLOAD'
      | 'APC_DOWNLOAD'
      | 'API_UPLOAD'
      | 'API_DOWNLOAD'
      | 'SUBMITTER_PORTAL_DOWNLOAD'
  }
  GetFileRequestParamsDto: {
    sourceLang?: string
    targetLang?: string
    /** @example {"callbackUrl": "https://www.yourdomain.com/callback_endpoint"} */
    callbackUrl: string
  }
  Response: {
    context?: {[key: string]: {[key: string]: unknown}}
    cancelled?: boolean
    done?: boolean
  }
  WorkflowChangesDto: {
    jobs: definitions['UidReference'][]
  }
  CreateLqaConversationDto: {
    lqaDescription?: string
    references: definitions['LQAReferences']
  }
  EditLqaConversationDto: {
    lqaDescription?: string
    lqa: definitions['LQAReference'][]
    /** @enum {string} */
    status?: 'resolved' | 'unresolved'
    correlation?: definitions['ReferenceCorrelation']
  }
  AddLqaCommentResultDto: {
    /** @description ID of created comment */
    id?: string
    /** @description LQA Conversation */
    conversation?: definitions['LQAConversationDto']
  }
  PageDtoUserReference: {
    /** Format: int32 */
    totalElements?: number
    /** Format: int32 */
    totalPages?: number
    /** Format: int32 */
    pageSize?: number
    /** Format: int32 */
    pageNumber?: number
    /** Format: int32 */
    numberOfElements?: number
    content?: definitions['UserReference'][]
  }
  AddPlainCommentResultDto: {
    /** @description ID of created comment */
    id?: string
    /** @description Conversation */
    conversation?: definitions['PlainConversationDto']
  }
  ProviderListDtoV2: {
    providers?: definitions['Providers']
  }
  /** @description Base projectDto */
  AbstractProjectDtoV2: {
    uid?: string
    /** Format: int32 */
    internalId?: number
    id?: string
    name?: string
    /** Format: date-time */
    dateCreated?: string
    domain?: definitions['DomainReference']
    subDomain?: definitions['SubDomainReference']
    owner?: definitions['UserReference']
    sourceLang?: string
    targetLangs?: string[]
    references?: definitions['ReferenceFileReference'][]
    mtSettingsPerLanguageList?: definitions['MTSettingsPerLanguageReference'][]
    /** @description Response differs based on user's role */
    userRole?: string
  }
  'Admin, Project Manager (v2)': definitions['AbstractProjectDtoV2'] & {
    /** @description Default: false */
    shared?: boolean
    progress?: definitions['ProgressDtoV2']
    client?: definitions['ClientReference']
    costCenter?: definitions['CostCenterReference']
    businessUnit?: definitions['BusinessUnitReference']
    /** Format: date-time */
    dateDue?: string
    /** @enum {string} */
    status?:
      | 'NEW'
      | 'ASSIGNED'
      | 'COMPLETED'
      | 'ACCEPTED_BY_VENDOR'
      | 'DECLINED_BY_VENDOR'
      | 'COMPLETED_BY_VENDOR'
      | 'CANCELLED'
    purchaseOrder?: string
    /** @description Default: false */
    isPublishedOnJobBoard?: boolean
    note?: string
    createdBy?: definitions['UserReference']
    qualityAssuranceSettings?: definitions['ObjectReference']
    workflowSteps?: definitions['ProjectWorkflowStepDtoV2'][]
    analyseSettings?: definitions['ObjectReference']
    accessSettings?: definitions['ObjectReference']
    financialSettings?: definitions['ObjectReference']
  }
  'Linguist (v2)': definitions['AbstractProjectDtoV2'] & {
    [key: string]: unknown
  }
  ProgressDtoV2: {
    /** Format: int32 */
    totalCount?: number
    /** Format: int32 */
    finishedCount?: number
    /** Format: int32 */
    overdueCount?: number
  }
  CreateProjectFromTemplateV2Dto: {
    name: string
    sourceLang?: string
    targetLangs?: string[]
    workflowSteps?: definitions['IdReference'][]
    /** Format: date-time */
    dateDue?: string
    note?: string
    client?: definitions['IdReference']
    businessUnit?: definitions['IdReference']
    domain?: definitions['IdReference']
    subDomain?: definitions['IdReference']
    costCenter?: definitions['IdReference']
  }
  AsyncRequestWrapperV2Dto: {
    asyncRequest?: definitions['AsyncRequestV2Dto']
  }
  CreateProjectFromTemplateAsyncV2Dto: {
    name: string
    sourceLang?: string
    targetLangs?: string[]
    workflowSteps?: definitions['IdReference'][]
    /** Format: date-time */
    dateDue?: string
    note?: string
    client?: definitions['IdReference']
    businessUnit?: definitions['IdReference']
    domain?: definitions['IdReference']
    subDomain?: definitions['IdReference']
    costCenter?: definitions['IdReference']
    callbackUrl?: string
  }
  LqaProfilesForWsV2Dto: {
    workflowStep?: definitions['IdReference']
    lqaProfile?: definitions['UidReference']
  }
  ProjectWorkflowStepListDtoV2: {
    projectWorkflowSteps?: definitions['ProjectWorkflowStepDtoV2'][]
  }
  CustomFieldInstanceApiDto: {
    customField?: definitions['UidReference']
    selectedOptions?: definitions['UidReference'][]
    value?: string
  }
  EditProjectV2Dto: {
    name: string
    /** @enum {string} */
    status?:
      | 'NEW'
      | 'ASSIGNED'
      | 'COMPLETED'
      | 'ACCEPTED_BY_VENDOR'
      | 'DECLINED_BY_VENDOR'
      | 'COMPLETED_BY_VENDOR'
      | 'CANCELLED'
    client?: definitions['IdReference']
    businessUnit?: definitions['IdReference']
    domain?: definitions['IdReference']
    subDomain?: definitions['IdReference']
    /** @description Owner must be Admin or PM */
    owner?: definitions['IdReference']
    purchaseOrder?: string
    /** Format: date-time */
    dateDue?: string
    note?: string
    /** @description Default: false */
    fileHandover?: boolean
    /** @description Lqa profiles that will be added to workflow steps */
    lqaProfiles?: definitions['LqaProfilesForWsV2Dto'][]
    /** @description Default: false */
    archived?: boolean
    /** @description Custom fields for project */
    customFields?: definitions['CustomFieldInstanceApiDto'][]
  }
  EnabledCheckContextDtoV2: {
    moraviaProfileId?: string
    customQaDisplayName?: string
    provider?: string
  }
  EnabledCheckDtoV2: {
    checkerType?: string
    context?: definitions['EnabledCheckContextDtoV2']
  }
  QualityAssuranceChecksDtoV2: {
    forbiddenStrings?: string[]
    /**
     * @description enabledChecks
     * @example
     *    [
     *       {
     *          "checkerType":"EmptyTranslation",
     *          "ignorable":false
     *       },
     *       {
     *          "checkerType":"TrailingPunctuation",
     *          "ignorable":false
     *       },
     *       {
     *          "checkerType":"Formatting",
     *          "ignorable":false
     *       },
     *       {
     *          "checkerType":"JoinTags",
     *          "ignorable":false
     *       },
     *       {
     *          "checkerType":"MissingNumbers",
     *          "ignorable":false
     *       },
     *       {
     *          "checkerType":"MultipleSpaces",
     *          "ignorable":false
     *       },
     *       {
     *          "checkerType":"NonConformingTerm",
     *          "ignorable":false
     *       },
     *       {
     *          "checkerType":"NotConfirmed",
     *          "ignorable":false
     *       },
     *       {
     *          "checkerType":"TranslationLength",
     *          "ignorable":false
     *       },
     *       {
     *          "checkerType": "AbsoluteLength",
     *          "ignorable": false
     *       },
     *       {
     *          "checkerType": "RelativeLength",
     *          "ignorable": false
     *       },
     *       {
     *          "checkerType":"EmptyPairTags",
     *          "ignorable":false
     *       },
     *       {
     *          "checkerType":"InconsistentTranslationTargetSource",
     *          "ignorable":true
     *       },
     *       {
     *          "checkerType":"InconsistentTranslationSourceTarget",
     *          "ignorable":true
     *       },
     *       {
     *          "checkerType":"ForbiddenString",
     *          "ignorable":false
     *       },
     *       {
     *          "checkerType":"SpellCheck",
     *          "ignorable":false
     *       },
     *       {
     *          "checkerType":"RepeatedWords",
     *          "ignorable":false
     *       },
     *       {
     *          "checkerType":"InconsistentTagContent",
     *          "ignorable":false
     *       },
     *       {
     *          "checkerType":"EmptyTagContent",
     *          "ignorable":false
     *       },
     *       {
     *          "checkerType":"Malformed",
     *          "ignorable":false
     *       },
     *       {
     *          "checkerType":"ForbiddenTerm",
     *          "ignorable":false
     *       },
     *       {
     *          "checkerType":"NewerAtLowerLevel",
     *          "ignorable":false
     *       },
     *       {
     *          "checkerType":"LeadingAndTrailingSpaces",
     *          "ignorable":false
     *       },
     *       {
     *          "checkerType":"TargetSourceIdentical",
     *          "ignorable":false
     *       },
     *       {
     *          "checkerType":"SourceOrTargetRegexp"
     *       },
     *       {
     *          "checkerType":"UnmodifiedFuzzyTranslationTM",
     *          "ignorable":true
     *       },
     *       {
     *          "checkerType":"UnmodifiedFuzzyTranslationMTNT",
     *          "ignorable":true
     *       },
     *       {
     *          "checkerType":"Moravia",
     *          "ignorable":false,
     *          "context": {"moraviaProfileId": "MoraviaProfileIdValue"}
     *       },
     *       {
     *          "checkerType":"ExtraNumbers",
     *          "ignorable":true
     *       },
     *       {
     *          "checkerType":"UnresolvedConversation",
     *          "ignorable":false
     *       },
     *       {
     *          "checkerType":"NestedTags",
     *          "ignorable":false
     *       },
     *       {
     *          "checkerType":"FuzzyInconsistency",
     *          "ignorable":true
     *       }
     *    ]
     */
    enabledChecks?: definitions['EnabledCheckDtoV2'][]
    excludeLockedSegments?: boolean
    userCanSetInstantQA?: boolean
    strictJobStatus?: boolean
    regexpRules?: definitions['RegexpCheckRuleDtoV2'][]
  }
  WebEditorLinkDtoV2: {
    url?: string
    warnings?: definitions['ErrorDetailDtoV2'][]
  }
  CreateWebEditorLinkDtoV2: {
    /** @description Maximum supported number of jobs is 260 */
    jobs: definitions['UidReference'][]
  }
  PseudoTranslateActionDtoV2: {
    replacement?: string
    prefix?: string
    suffix?: string
    /** Format: double */
    length?: number
    /** Format: int32 */
    keyHashPrefixLen?: number
    substitution?: definitions['SubstituteDtoV2'][]
  }
  PseudoTranslateWrapperDto: {
    jobParts: definitions['JobPartReadyReferences']
    pseudoTranslate: definitions['PseudoTranslateActionDtoV2']
  }
  SubstituteDtoV2: {
    source: string
    target: string
  }
  /** @description Machine translation related settings */
  JobMachineTranslationSettingsDto: {
    /** @description Pre-translate from machine translation. Default: true */
    useMachineTranslation?: boolean
    /** @description Lock section: 100% machine translation matches. Default: false */
    lock100PercentMatches?: boolean
    /** @description Set segment status to confirmed for: 100% translation machine matches. Default: false */
    confirm100PercentMatches?: boolean
    /**
     * @description Do not put machine translations to target and use alt-trans fields (alt-trans in mxlf).
     * Default: false
     */
    useAltTransOnly?: boolean
  }
  /** @description Non-translatables related settings */
  JobNonTranslatableSettingsDto: {
    /** @description Pre-translate non-translatables. Default: true */
    preTranslateNonTranslatables?: boolean
    /** @description Set segment status to confirmed for: 100% non-translatable matches. Default: false */
    confirm100PercentMatches?: boolean
    /** @description Lock section: 100% non-translatable matches. Default: false */
    lock100PercentMatches?: boolean
  }
  /** @description Translation memory related settings */
  JobTranslationMemorySettingsDto: {
    /** @description Pre-translate from translation memory. Default: true */
    useTranslationMemory?: boolean
    /**
     * Format: double
     * @description Pre-translation threshold percent. Default: 0.7
     */
    translationMemoryThreshold?: number
    /** @description Set segment status to confirmed for: 100% translation memory matches. Default: false */
    confirm100PercentMatches?: boolean
    /** @description Set segment status to confirmed for: 101% translation memory matches. Default: false */
    confirm101PercentMatches?: boolean
    /** @description Lock section: 100% translation memory matches. Default: false */
    lock100PercentMatches?: boolean
    /** @description Lock section: 101% translation memory matches. Default: false */
    lock101PercentMatches?: boolean
  }
  /** @description Pre-translate settings */
  PreTranslateJobSettingsDto: {
    /** @description Propagate repetitions. Default: false */
    autoPropagateRepetitions?: boolean
    /** @description Set segment status to confirmed for: Repetitions. Default: false */
    confirmRepetitions?: boolean
    /** @description Pre-translate & set job to completed: Set job to completed once pre-translated. Default: false */
    setJobStatusCompleted?: boolean
    /**
     * @description Pre-translate & set job to completed when all segments confirmed:
     * Set job to completed once pre-translated and all segments are confirmed. Default: false
     */
    setJobStatusCompletedWhenConfirmed?: boolean
    /**
     * @description Pre-translate & set job to completed: Set project to completed once all jobs pre-translated.
     *         Default: false
     */
    setProjectStatusCompleted?: boolean
    /** @description Overwrite existing translations in target segments. Default: false */
    overwriteExistingTranslations?: boolean
    translationMemorySettings?: definitions['JobTranslationMemorySettingsDto']
    machineTranslationSettings?: definitions['JobMachineTranslationSettingsDto']
    nonTranslatableSettings?: definitions['JobNonTranslatableSettingsDto']
  }
  PreTranslateJobsV2Dto: {
    /** @description Jobs to be pre-translated */
    jobs: definitions['UidReference'][]
    segmentFilters?: ('LOCKED' | 'NOT_LOCKED')[]
    /**
     * @description If pre-translate settings from project should be used.
     * If true, preTranslateSettings values are ignored. Default: false
     */
    useProjectPreTranslateSettings?: boolean
    callbackUrl?: string
    /** @description Pre-translate settings, used if useProjectPreTranslateSettings is false */
    preTranslateSettings?: definitions['PreTranslateJobSettingsDto']
  }
  JobPartReadyDeleteTranslationDto: {
    jobs?: definitions['UidReference'][]
    deleteSettings?: definitions['TranslationSegmentsReferenceV2']
    /**
     * @description Set true if you want to delete translations for all jobs from project from specific workflow step.
     *                Default: false
     */
    forAllJobs?: boolean
    /**
     * Format: int32
     * @description Specifies workflow level for all jobs
     */
    workflowLevel?: number
    /** @description Specifies filtering for all jobs */
    filter?: definitions['JobPartReadyDeleteTranslationFilterDto']
    getParts?: definitions['ClosureListJobPart']
  }
  JobPartReadyDeleteTranslationFilterDto: {
    filename?: string
    statuses?: string[]
    targetLang?: string
    provider?: definitions['ProviderReference']
    owner?: definitions['UidReference']
    /** Format: date-time */
    dateDue?: string
    /** Format: int32 */
    dueInHours?: number
    overdue?: boolean
  }
  TranslationSegmentsReferenceV2: {
    /** @description Remove confirmed (true), unconfirmed (false) or both segments (null). Default: null */
    confirmed?: boolean
    /** @description Remove locked (true), unlocked (false) or both segments (null). Default: false */
    locked?: boolean
  }
  UpdateIgnoredJobPartSegment: {
    jobPartUid: string
    segments: definitions['UpdateIgnoredSegment'][]
  }
  ReferenceFilesDto: {
    referenceFiles?: definitions['ReferenceFileReference'][]
  }
  CreateReferenceFilesRequest: {
    /** @description Additional data in JSON format (`Content-Type`: `application/json)` */
    json?: definitions['CreateReferenceFileNoteDto']
    /** @description Files with appropriate `Content-Type` header */
    file?: definitions['MultipartFile'][]
  }
  TransMemoryReferenceDtoV2: {
    /** Format: int32 */
    internalId?: number
    uid: string
    name?: string
    sourceLang?: string
    targetLangs?: string[]
  }
  ProjectTemplateTransMemoryListV2Dto: {
    transMemories?: definitions['ProjectTemplateTransMemoryV2Dto'][]
  }
  ProjectTemplateTransMemoryV2Dto: {
    targetLocale?: string
    workflowStep?: definitions['WorkflowStepReferenceV2']
    readMode?: boolean
    writeMode?: boolean
    transMemory?: definitions['TransMemoryDtoV2']
    /** Format: double */
    penalty?: number
    applyPenaltyTo101Only?: boolean
    /** Format: int32 */
    order?: number
  }
  TransMemoryDtoV2: {
    id?: string
    uid?: string
    /** Format: int32 */
    internalId?: number
    name?: string
    sourceLang?: string
    targetLangs?: string[]
    client?: definitions['ClientReference']
    businessUnit?: definitions['BusinessUnitReference']
    domain?: definitions['DomainReference']
    subDomain?: definitions['SubDomainReference']
    note?: string
    /** Format: date-time */
    dateCreated?: string
    createdBy?: definitions['UserReference']
    owner?: definitions['UserReference']
  }
  SetContextPTTransMemoriesV2Dto: {
    transMemories: definitions['SetProjectTemplateTransMemoryV2Dto'][]
    /** @description Set translation memory only for the specific project target language */
    targetLang?: string
    /** @description Set translation memory only for the specific workflow step */
    workflowStep?: definitions['UidReference']
    /** @description Default: false */
    orderEnabled?: boolean
  }
  SetProjectTemplateTransMemoriesV2Dto: {
    dataPerContext: definitions['SetContextPTTransMemoriesV2Dto'][]
  }
  SetProjectTemplateTransMemoryV2Dto: {
    transMemory: definitions['UidReference']
    /** @description Default: false */
    readMode?: boolean
    /**
     * @description Can be set only for Translation Memory with read == true.<br/>
     *         Max 2 write TMs allowed per project.<br/>
     *         Default: false
     */
    writeMode?: boolean
    /** Format: double */
    penalty?: number
    /** @description Can be set only for penalty == 1<br/>Default: false */
    applyPenaltyTo101Only?: boolean
    /** Format: int32 */
    order?: number
  }
  AdditionalWorkflowStepV2Dto: {
    id?: string
    name?: string
  }
  QuoteV2Dto: {
    /** Format: int64 */
    id?: number
    uid?: string
    name?: string
    /** @enum {string} */
    status?: 'APPROVED' | 'DECLINED' | 'DRAFT' | 'FOR_APPROVAL' | 'NEW'
    currency?: string
    /** @enum {string} */
    billingUnit?: 'Character' | 'Word' | 'Page' | 'Hour'
    createdBy?: definitions['UserReference']
    /** Format: date-time */
    dateCreated?: string
    /** Format: double */
    totalPrice?: number
    netRateScheme?: definitions['NetRateSchemeReference']
    priceList?: definitions['PriceListReference']
    workflowStepList?: definitions['WorkflowStepReference'][]
    provider?: definitions['ProviderReference']
    customerEmail?: string
    /** @enum {string} */
    quoteType?: 'BUYER' | 'PROVIDER'
    editable?: boolean
    outdated?: boolean
    additionalSteps?: definitions['AdditionalWorkflowStepV2Dto'][]
  }
  QuoteCreateV2Dto: {
    name: string
    project: definitions['UidReference']
    analyse: definitions['IdReference']
    priceList: definitions['IdReference']
    netRateScheme?: definitions['IdReference']
    provider?: definitions['ProviderReference']
    workflowSettings?: definitions['QuoteWorkflowSettingDto'][]
    units?: definitions['QuoteUnitsDto'][]
    additionalSteps?: string[]
  }
  QuoteUnitsDto: {
    analyseLanguagePart: definitions['IdReference']
    /** Format: double */
    value?: number
  }
  QuoteWorkflowSettingDto: {
    workflowStep: definitions['IdReference']
    units?: definitions['QuoteUnitsDto'][]
  }
  AsyncExportTMDto: {
    transMemory?: definitions['ObjectReference']
    exportTargetLangs?: string[]
  }
  AsyncExportTMResponseDto: {
    asyncRequest?: definitions['AsyncRequestV2Dto']
    asyncExport?: definitions['AsyncExportTMDto']
  }
  ExportTMDto: {
    exportTargetLangs?: string[]
    callbackUrl?: string
  }
  PageDtoWebHookDtoV2: {
    /** Format: int32 */
    totalElements?: number
    /** Format: int32 */
    totalPages?: number
    /** Format: int32 */
    pageSize?: number
    /** Format: int32 */
    pageNumber?: number
    /** Format: int32 */
    numberOfElements?: number
    content?: definitions['WebHookDtoV2'][]
  }
  WebHookDtoV2: {
    name?: string
    id?: string
    uid?: string
    url: string
    events?: (
      | 'JOB_STATUS_CHANGED'
      | 'JOB_CREATED'
      | 'JOB_DELETED'
      | 'JOB_UNSHARED'
      | 'JOB_ASSIGNED'
      | 'JOB_DUE_DATE_CHANGED'
      | 'JOB_UPDATED'
      | 'JOB_TARGET_UPDATED'
      | 'JOB_EXPORTED'
      | 'JOB_UNEXPORTED'
      | 'PROJECT_CREATED'
      | 'PROJECT_DELETED'
      | 'PROJECT_UNSHARED'
      | 'PROJECT_STATUS_CHANGED'
      | 'PROJECT_DUE_DATE_CHANGED'
      | 'SHARED_PROJECT_ASSIGNED'
      | 'PROJECT_METADATA_UPDATED'
      | 'PRE_TRANSLATION_FINISHED'
      | 'ANALYSIS_CREATED'
      | 'CONTINUOUS_JOB_UPDATED'
      | 'PROJECT_TEMPLATE_CREATED'
      | 'PROJECT_TEMPLATE_UPDATED'
      | 'PROJECT_TEMPLATE_DELETED'
      | 'RAW_MT_CONVERTER_IMPORT_FINISHED'
      | 'RAW_MT_PRE_TRANSLATION_FINISHED'
    )[]
    secretToken?: string
    /** @description Default: false */
    hidden?: boolean
    /** @enum {string} */
    status?: 'ENABLED' | 'DISABLED'
    /** Format: int32 */
    failedAttempts?: number
    /** Format: date-time */
    created?: string
    createdBy?: definitions['UserReference']
    /** Format: date-time */
    lastModified?: string
    lastModifiedBy?: definitions['UserReference']
  }
  CreateWebHookDto: {
    name?: string
    url: string
    events: (
      | 'JOB_STATUS_CHANGED'
      | 'JOB_CREATED'
      | 'JOB_DELETED'
      | 'JOB_UNSHARED'
      | 'JOB_ASSIGNED'
      | 'JOB_DUE_DATE_CHANGED'
      | 'JOB_UPDATED'
      | 'JOB_TARGET_UPDATED'
      | 'JOB_EXPORTED'
      | 'JOB_UNEXPORTED'
      | 'PROJECT_CREATED'
      | 'PROJECT_DELETED'
      | 'PROJECT_UNSHARED'
      | 'PROJECT_STATUS_CHANGED'
      | 'PROJECT_DUE_DATE_CHANGED'
      | 'SHARED_PROJECT_ASSIGNED'
      | 'PROJECT_METADATA_UPDATED'
      | 'PRE_TRANSLATION_FINISHED'
      | 'ANALYSIS_CREATED'
      | 'CONTINUOUS_JOB_UPDATED'
      | 'PROJECT_TEMPLATE_CREATED'
      | 'PROJECT_TEMPLATE_UPDATED'
      | 'PROJECT_TEMPLATE_DELETED'
      | 'RAW_MT_CONVERTER_IMPORT_FINISHED'
      | 'RAW_MT_PRE_TRANSLATION_FINISHED'
    )[]
    secretToken?: string
    /** @description Default: false */
    hidden?: boolean
    /**
     * @description Default: ENABLED
     * @enum {string}
     */
    status?: 'ENABLED' | 'DISABLED'
  }
  WebhookPreviewDto: {
    /** @enum {string} */
    event?:
      | 'JOB_STATUS_CHANGED'
      | 'JOB_CREATED'
      | 'JOB_DELETED'
      | 'JOB_UNSHARED'
      | 'JOB_ASSIGNED'
      | 'JOB_DUE_DATE_CHANGED'
      | 'JOB_UPDATED'
      | 'JOB_TARGET_UPDATED'
      | 'JOB_EXPORTED'
      | 'JOB_UNEXPORTED'
      | 'PROJECT_CREATED'
      | 'PROJECT_DELETED'
      | 'PROJECT_UNSHARED'
      | 'PROJECT_STATUS_CHANGED'
      | 'PROJECT_DUE_DATE_CHANGED'
      | 'SHARED_PROJECT_ASSIGNED'
      | 'PROJECT_METADATA_UPDATED'
      | 'PRE_TRANSLATION_FINISHED'
      | 'ANALYSIS_CREATED'
      | 'CONTINUOUS_JOB_UPDATED'
      | 'PROJECT_TEMPLATE_CREATED'
      | 'PROJECT_TEMPLATE_UPDATED'
      | 'PROJECT_TEMPLATE_DELETED'
      | 'RAW_MT_CONVERTER_IMPORT_FINISHED'
      | 'RAW_MT_PRE_TRANSLATION_FINISHED'
    preview?: string
  }
  WebhookPreviewsDto: {
    previews?: definitions['WebhookPreviewDto'][]
  }
  ConceptDtov2: {
    id?: string
    definition?: string
    domain?: string
    subDomains?: string[]
    url?: string
    note?: string
  }
  SearchInTextResponse2Dto: {
    termBase?: definitions['TermBaseReference']
    sourceTerm?: definitions['TermV2Dto']
    concept?: definitions['ConceptDtov2']
    translationTerms?: definitions['TermV2Dto'][]
    subTerm?: boolean
    matches?: definitions['Match'][]
  }
  SearchInTextResponseList2Dto: {
    searchResults?: definitions['SearchInTextResponse2Dto'][]
  }
  TermBaseReference: {
    name?: string
    id?: string
    uid?: string
  }
  TermV2Dto: {
    id?: string
    text: string
    lang?: string
    rtl?: boolean
    /** Format: date-time */
    modifiedAt?: string
    /** Format: date-time */
    createdAt?: string
    modifiedBy?: definitions['UserReference']
    createdBy?: definitions['UserReference']
    caseSensitive?: boolean
    exactMatch?: boolean
    forbidden?: boolean
    preferred?: boolean
    /** @enum {string} */
    status?: 'New' | 'Approved'
    conceptId?: string
    usage?: string
    note?: string
    writable?: boolean
    shortTranslation?: string
    termType?: string
    partOfSpeech?: string
    gender?: string
    number?: string
  }
  SearchTbInTextByJobRequestDto: {
    text: string
    /** @description Default: false */
    reverse?: boolean
    zeroLengthSeparator?: string
  }
  SearchTbResponseDto: {
    termBase?: definitions['TermBaseReference']
    concept?: definitions['ConceptDtov2']
    sourceTerm?: definitions['TermV2Dto']
    translationTerms?: definitions['TermV2Dto'][]
  }
  SearchTbResponseListDto: {
    searchResults?: definitions['SearchTbResponseDto'][]
  }
  SearchTbByJobRequestDto: {
    query: string
    /**
     * Format: int32
     * @description Default: 15
     */
    count?: number
    /**
     * Format: int32
     * @description Default: 0
     */
    offset?: number
    /** @description Default: false */
    reverse?: boolean
  }
  AnalyseLanguagePartV3Dto: {
    id?: string
    sourceLang?: string
    targetLang?: string
    data?: definitions['DataDto']
    discountedData?: definitions['DataDto']
    jobs?: definitions['AnalyseJobReference'][]
    transMemories?: definitions['TransMemoryReferenceDtoV2'][]
  }
  AnalyseV3Dto: {
    id?: string
    uid?: string
    /** Format: int32 */
    innerId?: number
    /** @enum {string} */
    type?: 'PreAnalyse' | 'PostAnalyse' | 'PreAnalyseTarget' | 'Compare' | 'PreAnalyseProvider'
    name?: string
    provider?: definitions['ProviderReference']
    createdBy?: definitions['UserReference']
    /** Format: date-time */
    dateCreated?: string
    netRateScheme?: definitions['NetRateSchemeReference']
    canChangeNetRateScheme?: boolean
    analyseLanguageParts?: definitions['AnalyseLanguagePartV3Dto'][]
    settings?: definitions['AbstractAnalyseSettingsDto']
    outdated?: boolean
    importStatus?: definitions['ImportStatusDto']
    pureWarnings?: string[]
    project?: definitions['ProjectReference']
  }
  LoginResponseV3Dto: {
    user?: definitions['UserReference']
    token?: string
    /** Format: date-time */
    expires?: string
    /** Format: date-time */
    lastInvalidateAllSessionsPerformed?: string
  }
  LoginV3Dto: {
    /** @description When not filled, default user of identity will be logged in */
    userUid?: string
    userName: string
    password: string
    /** @description Required only for 2-factor authentication */
    code?: string
  }
  LoginToSessionResponseV3Dto: {
    user?: definitions['UserReference']
    cookie?: string
    csrfToken?: string
  }
  LoginToSessionV3Dto: {
    /** @description When not filled, default user of identity will be logged in */
    userUid?: string
    userName: string
    password: string
    rememberMe?: boolean
    /** Format: int32 */
    twoFactorCode?: number
    captchaCode?: string
  }
  LoginOtherV3Dto: {
    /** @description When not filled, default user of identity will be logged in */
    userUid?: string
    userName: string
  }
  ErrorDetailDtoV3: {
    /** @description Code, e.g. NOT_FOUND. */
    code?: string
    /** @description Related arguments, e.g. number => "hello world" */
    args?: {[key: string]: {[key: string]: unknown}}
    /** @description Optional human-readable message. */
    message?: string
  }
  JobPartPatchResultDto: {
    /**
     * Format: int32
     * @description Number of successfully updated job parts
     */
    updated?: number
    /** @description Errors and their counts encountered during the update */
    errors?: definitions['ErrorDetailDtoV3'][]
  }
  JobPartPatchBatchDto: {
    jobs: definitions['UidReference'][]
    /** @enum {string} */
    status?:
      | 'NEW'
      | 'ACCEPTED'
      | 'DECLINED'
      | 'REJECTED'
      | 'DELIVERED'
      | 'EMAILED'
      | 'COMPLETED'
      | 'CANCELLED'
    /** Format: date-time */
    dateDue?: string
    clearDateDue?: boolean
    providers?: definitions['ProviderReference'][]
  }
  SearchResponseListTmDtoV3: {
    searchResults?: definitions['SearchTMResponseDtoV3'][]
  }
  SearchTMClientDtoV3: {
    /** Format: int64 */
    id?: number
    name?: string
  }
  SearchTMDomainDtoV3: {
    /** Format: int64 */
    id?: number
    name?: string
  }
  SearchTMProjectDtoV3: {
    /** Format: int64 */
    id?: number
    uid?: string
    name?: string
  }
  SearchTMResponseDtoV3: {
    segmentId?: string
    source?: definitions['SearchTMSegmentDtoV3']
    translations?: definitions['SearchTMSegmentDtoV3'][]
    transMemory?: definitions['SearchTMTransMemoryDtoV3']
    /** Format: double */
    grossScore?: number
    /** Format: double */
    score?: number
    subSegment?: boolean
  }
  SearchTMSegmentDtoV3: {
    id?: string
    text?: string
    lang?: string
    rtl?: boolean
    /** Format: int64 */
    modifiedAt?: number
    /** Format: int64 */
    createdAt?: number
    modifiedBy?: definitions['UserReference']
    createdBy?: definitions['UserReference']
    filename?: string
    project?: definitions['SearchTMProjectDtoV3']
    client?: definitions['SearchTMClientDtoV3']
    domain?: definitions['SearchTMDomainDtoV3']
    subDomain?: definitions['SearchTMSubDomainDtoV3']
    tagMetadata?: definitions['TagMetadata'][]
    previousSegment?: string
    nextSegment?: string
    key?: string
    targetNote?: string
  }
  SearchTMSubDomainDtoV3: {
    /** Format: int64 */
    id?: number
    name?: string
  }
  SearchTMTransMemoryDtoV3: {
    uid?: string
    id?: string
    name?: string
    reverse?: boolean
  }
  SearchTMByJobRequestDtoV3: {
    query: string
    /** @description Default: false */
    reverse?: boolean
    /**
     * Format: double
     * @description Default: 0.0
     */
    scoreThreshold?: number
    /**
     * Format: int32
     * @description Default: 15
     */
    maxResults?: number
  }
  WildCardSearchByJobRequestDtoV3: {
    query: string
    /** @description Default: false */
    reverse?: boolean
    /** Format: int32 */
    count?: number
    /** Format: int32 */
    offset?: number
  }
  MetadataOptionReference: {
    uid?: string
    value?: string
  }
  MetadataReference: {
    uid?: string
    fieldName?: string
    value?: string
    options?: definitions['MetadataOptionReference'][]
  }
  ProgressReference: {
    /** Format: int32 */
    totalCount?: number
    /** Format: int32 */
    finishedCount?: number
    /** Format: int32 */
    overdueCount?: number
    /** Format: double */
    finishedRatio?: number
    /** Format: double */
    overdueRatio?: number
  }
  VendorUserReference: {
    uid?: string
    vendorUid?: string
    username?: string
    firstName?: string
    lastName?: string
    organization?: definitions['OrganizationReference']
  }
  /** @description Pre-translate settings */
  PreTranslateSettingsV3Dto: {
    /** @description Pre-translate & set job to completed: Pre-translate on job creation. Default: false */
    preTranslateOnJobCreation?: boolean
    /** @description Pre-translate & set job to completed: Set job to completed once pre-translated. Default: false */
    setJobStatusCompleted?: boolean
    /**
     * @description Pre-translate & set job to completed when all segments confirmed:
     * Set job to completed once pre-translated and all segments are confirmed. Default: false
     */
    setJobStatusCompletedWhenConfirmed?: boolean
    /**
     * @description Pre-translate & set job to completed: Set project to completed once all jobs pre-translated.
     *         Default: false
     */
    setProjectStatusCompleted?: boolean
    /** @description Overwrite existing translations in target segments. Default: false */
    overwriteExistingTranslations?: boolean
    translationMemorySettings?: definitions['TranslationMemorySettingsDto']
    machineTranslationSettings?: definitions['MachineTranslationSettingsDto']
    nonTranslatableSettings?: definitions['NonTranslatableSettingsDto']
    repetitionsSettings?: definitions['RepetitionsSettingsDto']
  }
  AnalyseLanguagePartReference: {
    id?: string
    sourceLang?: string
    targetLang?: string
    jobs?: definitions['AnalyseJobReference'][]
  }
  AnalyseReference: {
    id?: string
    uid?: string
    innerId?: string
    /** @enum {string} */
    type?: 'PreAnalyse' | 'PostAnalyse' | 'PreAnalyseTarget' | 'Compare' | 'PreAnalyseProvider'
    name?: string
    provider?: definitions['ProviderReference']
    createdBy?: definitions['UserReference']
    /** Format: date-time */
    dateCreated?: string
    netRateScheme?: definitions['NetRateSchemeReference']
    analyseLanguageParts?: definitions['AnalyseLanguagePartReference'][]
    outdated?: boolean
    importStatus?: definitions['ImportStatusDto']
    pureWarnings?: string[]
  }
  PageDtoAnalyseReference: {
    /** Format: int32 */
    totalElements?: number
    /** Format: int32 */
    totalPages?: number
    /** Format: int32 */
    pageSize?: number
    /** Format: int32 */
    pageNumber?: number
    /** Format: int32 */
    numberOfElements?: number
    content?: definitions['AnalyseReference'][]
  }
  CreateProjectV3Dto: {
    name: string
    sourceLang: string
    targetLangs: string[]
    /** @description Client referenced by id */
    client?: definitions['IdReference']
    businessUnit?: definitions['IdReference']
    domain?: definitions['IdReference']
    subDomain?: definitions['IdReference']
    costCenter?: definitions['IdReference']
    purchaseOrder?: string
    workflowSteps?: definitions['IdReference'][]
    /** Format: date-time */
    dateDue?: string
    note?: string
    /** @description Lqa profiles that will be added to workflow steps */
    lqaProfiles?: definitions['LqaProfilesForWsV2Dto'][]
    /** @description Custom fields for project */
    customFields?: definitions['CustomFieldInstanceApiDto'][]
    /** @description Default: false */
    fileHandover?: boolean
  }
  AbsoluteTranslationLengthWarningDto: definitions['segmentWarning'] & {
    limit?: string
  }
  CustomQAWarningDto: definitions['segmentWarning'] & {
    message?: string
    subType?: string
    srcPosition?: definitions['Position']
    tgtPosition?: definitions['Position']
  }
  EmptyPairTagsWarningDto: definitions['segmentWarning'] & {
    [key: string]: unknown
  }
  EmptyTagContentWarningDto: definitions['segmentWarning'] & {
    [key: string]: unknown
  }
  EmptyTranslationWarningDto: definitions['segmentWarning'] & {
    [key: string]: unknown
  }
  ExtraNumbersV3WarningDto: definitions['segmentWarning'] & {
    number?: string
    positions?: definitions['Position'][]
  }
  ExtraNumbersWarningDto: definitions['segmentWarning'] & {
    extraNumbers?: string[]
  }
  ForbiddenStringWarningDto: definitions['segmentWarning'] & {
    forbiddenString?: string
    positions?: definitions['Position'][]
  }
  ForbiddenTermWarningDto: definitions['segmentWarning'] & {
    term?: string
    positions?: definitions['Position'][]
    sourceTerms?: definitions['Term'][]
  }
  FormattingWarningDto: definitions['segmentWarning'] & {
    [key: string]: unknown
  }
  FuzzyInconsistencyWarningDto: definitions['segmentWarning'] & {
    segmentIds?: string[]
  }
  InconsistentTagContentWarningDto: definitions['segmentWarning'] & {
    [key: string]: unknown
  }
  InconsistentTranslationWarningDto: definitions['segmentWarning'] & {
    segmentId?: string
  }
  JoinTagsWarningDto: definitions['segmentWarning'] & {
    /** Format: int32 */
    sourceTagsCount?: number
    /** Format: int32 */
    translationTagsCount?: number
  }
  LeadingAndTrailingSpacesWarningDto: definitions['segmentWarning'] & {
    srcPosition?: definitions['Position']
    srcWhitespaces?: string
    tgtPosition?: definitions['Position']
    tgtWhitespaces?: string
    suggestion?: definitions['Suggestion']
  }
  MalformedWarningDto: definitions['segmentWarning'] & {
    message?: string
  }
  MissingNonTranslatableAnnotationWarningDto: definitions['segmentWarning'] & {
    text?: string
    beginIndexes?: number[]
  }
  MissingNumbersV3WarningDto: definitions['segmentWarning'] & {
    number?: string
    positions?: definitions['Position'][]
  }
  MissingNumbersWarningDto: definitions['segmentWarning'] & {
    missingNumbers?: string[]
  }
  MisspelledWordDto: {
    word?: string
    /** Format: int32 */
    offset?: number
  }
  MoraviaWarningDto: definitions['segmentWarning'] & {
    message?: string
    subType?: string
  }
  MultipleSpacesV3WarningDto: definitions['segmentWarning'] & {
    spaces?: string
    positions?: definitions['Position'][]
  }
  MultipleSpacesWarningDto: definitions['segmentWarning'] & {
    [key: string]: unknown
  }
  NestedTagsWarningDto: definitions['segmentWarning'] & {
    misplacedTargetTag?: string
  }
  NewerAtLowerLevelWarningDto: definitions['segmentWarning'] & {
    [key: string]: unknown
  }
  NonConformingTermWarningDto: definitions['segmentWarning'] & {
    term?: string
    positions?: definitions['Position'][]
    suggestedTargetTerms?: definitions['Term'][]
  }
  NotConfirmedWarningDto: definitions['segmentWarning'] & {
    [key: string]: unknown
  }
  Position: {
    /** Format: int32 */
    beginIndex?: number
    /** Format: int32 */
    endIndex?: number
  }
  QualityAssuranceResponseDto: {
    segmentWarnings?: definitions['SegmentWarningsDto'][]
    finished?: boolean
  }
  RelativeTranslationLengthWarningDto: definitions['segmentWarning'] & {
    limit?: string
  }
  RepeatedWordWarningDto: definitions['segmentWarning'] & {
    word?: string
    positions?: definitions['Position'][]
  }
  RepeatedWordsWarningDto: definitions['segmentWarning'] & {
    repeatedWords?: string[]
  }
  SegmentWarningsDto: {
    segmentId?: string
    warnings?: definitions['segmentWarning'][]
    ignoredChecks?: string[]
  }
  SourceTargetRegexpWarningDto: definitions['segmentWarning'] & {
    description?: string
  }
  SpellCheckWarningDto: definitions['segmentWarning'] & {
    misspelledWords?: definitions['MisspelledWordDto'][]
  }
  TargetSourceIdenticalWarningDto: definitions['segmentWarning'] & {
    [key: string]: unknown
  }
  Term: {
    text?: string
    preferred?: boolean
  }
  TerminologyWarningDto: definitions['segmentWarning'] & {
    missingTerms?: string[]
    forbiddenTerms?: string[]
  }
  TrailingPunctuationWarningDto: definitions['segmentWarning'] & {
    srcPosition?: definitions['Position']
    srcEndPunctuation?: string
    tgtPosition?: definitions['Position']
    tgtEndPunctuation?: string
    suggestedTgtEndPunctuation?: string
  }
  TrailingSpaceWarningDto: definitions['segmentWarning'] & {
    [key: string]: unknown
  }
  TranslationLengthWarningDto: definitions['segmentWarning'] & {
    [key: string]: unknown
  }
  UnmodifiedFuzzyTranslationMTNTWarningDto: definitions['segmentWarning'] & {
    transOrigin?: string
  }
  UnmodifiedFuzzyTranslationTMWarningDto: definitions['segmentWarning'] & {
    transOrigin?: string
  }
  UnmodifiedFuzzyTranslationWarningDto: definitions['segmentWarning'] & {
    transOrigin?: string
  }
  UnresolvedCommentWarningDto: definitions['segmentWarning'] & {
    [key: string]: unknown
  }
  UnresolvedConversationWarningDto: definitions['segmentWarning'] & {
    [key: string]: unknown
  }
  segmentWarning: {
    id?: string
    ignored?: boolean
    type?: string
    repetitionGroupId?: string
  }
  QualityAssuranceRunDtoV3: {
    initialSegment?: definitions['SegmentReference']
    /**
     * Format: int32
     * @description Maximum number of QA warnings in result, default: 100. For efficiency reasons QA
     * warnings are processed with minimum segments chunk size 10, therefore slightly more warnings are returned.
     */
    maxQaWarningsCount?: number
    warningTypes?: (
      | 'EmptyTranslation'
      | 'TrailingPunctuation'
      | 'Formatting'
      | 'JoinTags'
      | 'MissingNumbersV3'
      | 'MultipleSpacesV3'
      | 'NonConformingTerm'
      | 'NotConfirmed'
      | 'TranslationLength'
      | 'AbsoluteLength'
      | 'RelativeLength'
      | 'UnresolvedComment'
      | 'EmptyPairTags'
      | 'InconsistentTranslationTargetSource'
      | 'InconsistentTranslationSourceTarget'
      | 'ForbiddenString'
      | 'SpellCheck'
      | 'RepeatedWord'
      | 'InconsistentTagContent'
      | 'EmptyTagContent'
      | 'Malformed'
      | 'ForbiddenTerm'
      | 'NewerAtLowerLevel'
      | 'LeadingAndTrailingSpaces'
      | 'LeadingSpaces'
      | 'TrailingSpaces'
      | 'TargetSourceIdentical'
      | 'SourceOrTargetRegexp'
      | 'UnmodifiedFuzzyTranslation'
      | 'UnmodifiedFuzzyTranslationTM'
      | 'UnmodifiedFuzzyTranslationMTNT'
      | 'Moravia'
      | 'ExtraNumbersV3'
      | 'UnresolvedConversation'
      | 'NestedTags'
      | 'FuzzyInconsistencyTargetSource'
      | 'FuzzyInconsistencySourceTarget'
      | 'CustomQA'
      | 'MissingNonTranslatableAnnotation'
    )[]
  }
  QualityAssuranceBatchRunDtoV3: {
    jobs: definitions['UidReference'][]
    settings?: definitions['QualityAssuranceRunDtoV3']
    /**
     * Format: int32
     * @description Maximum number of QA warnings in result, default: 100. For efficiency reasons QA
     * warnings are processed with minimum segments chunk size 10, therefore slightly more warnings are returned.
     */
    maxQaWarningsCount?: number
  }
  JobPartSegmentsDtoV3: {
    job: definitions['UidReference']
    segments: string[]
  }
  QualityAssuranceSegmentsRunDtoV3: {
    jobsAndSegments: definitions['JobPartSegmentsDtoV3'][]
    /** @description When empty only fast checks run */
    warningTypes?: (
      | 'EmptyTranslation'
      | 'TrailingPunctuation'
      | 'Formatting'
      | 'JoinTags'
      | 'MissingNumbersV3'
      | 'MultipleSpacesV3'
      | 'NonConformingTerm'
      | 'NotConfirmed'
      | 'TranslationLength'
      | 'AbsoluteLength'
      | 'RelativeLength'
      | 'UnresolvedComment'
      | 'EmptyPairTags'
      | 'InconsistentTranslationTargetSource'
      | 'InconsistentTranslationSourceTarget'
      | 'ForbiddenString'
      | 'SpellCheck'
      | 'RepeatedWord'
      | 'InconsistentTagContent'
      | 'EmptyTagContent'
      | 'Malformed'
      | 'ForbiddenTerm'
      | 'NewerAtLowerLevel'
      | 'LeadingAndTrailingSpaces'
      | 'LeadingSpaces'
      | 'TrailingSpaces'
      | 'TargetSourceIdentical'
      | 'SourceOrTargetRegexp'
      | 'UnmodifiedFuzzyTranslation'
      | 'UnmodifiedFuzzyTranslationTM'
      | 'UnmodifiedFuzzyTranslationMTNT'
      | 'Moravia'
      | 'ExtraNumbersV3'
      | 'UnresolvedConversation'
      | 'NestedTags'
      | 'FuzzyInconsistencyTargetSource'
      | 'FuzzyInconsistencySourceTarget'
      | 'CustomQA'
      | 'MissingNonTranslatableAnnotation'
    )[]
    /**
     * Format: int32
     * @description Maximum number of QA warnings in result, default: 100. For efficiency reasons QA
     * warnings are processed with minimum segments chunk size 10, therefore slightly more warnings are returned.
     */
    maxQaWarningsCount?: number
  }
  JobExportResponseDto: {
    jobs?: definitions['UidReference'][]
  }
  JobExportActionDto: {
    jobs: definitions['UidReference'][]
  }
  ProjectTemplateTransMemoryDtoV3: {
    targetLocale?: string
    workflowStep?: definitions['WorkflowStepReferenceV3']
    readMode?: boolean
    writeMode?: boolean
    transMemory?: definitions['TransMemoryDtoV3']
    /** Format: double */
    penalty?: number
    applyPenaltyTo101Only?: boolean
    /** Format: int32 */
    order?: number
  }
  ProjectTemplateTransMemoryListDtoV3: {
    transMemories?: definitions['ProjectTemplateTransMemoryDtoV3'][]
  }
  TransMemoryDtoV3: {
    id?: string
    uid?: string
    /** Format: int32 */
    internalId?: number
    name?: string
    sourceLang?: string
    targetLangs?: string[]
    client?: definitions['ClientReference']
    businessUnit?: definitions['BusinessUnitReference']
    domain?: definitions['DomainReference']
    subDomain?: definitions['SubDomainReference']
    note?: string
    /** Format: date-time */
    dateCreated?: string
    createdBy?: definitions['UserReference']
  }
  WorkflowStepReferenceV3: {
    name?: string
    id?: string
    uid?: string
    /** Format: int32 */
    order?: number
    lqaEnabled?: boolean
  }
  ProjectTransMemoryDtoV3: {
    transMemory?: definitions['TransMemoryDtoV3']
    /** Format: double */
    penalty?: number
    applyPenaltyTo101Only?: boolean
    targetLocale?: string
    workflowStep?: definitions['WorkflowStepReferenceV3']
    readMode?: boolean
    writeMode?: boolean
    /** Format: int32 */
    order?: number
  }
  ProjectTransMemoryListDtoV3: {
    transMemories?: definitions['ProjectTransMemoryDtoV3'][]
  }
  SetContextTransMemoriesDtoV3Dto: {
    transMemories: definitions['SetProjectTransMemoryV3Dto'][]
    /** @description Set translation memory only for the specific project target language */
    targetLang?: string
    /** @description Set translation memory only for the specific workflow step */
    workflowStep?: definitions['UidReference']
    /** @description Default: false */
    orderEnabled?: boolean
  }
  SetProjectTransMemoriesV3Dto: {
    dataPerContext: definitions['SetContextTransMemoriesDtoV3Dto'][]
  }
  SetProjectTransMemoryV3Dto: {
    transMemory: definitions['UidReference']
    /** @description Default: false */
    readMode?: boolean
    /**
     * @description Can be set only for Translation Memory with read == true.<br/>
     *         Max 2 write TMs allowed per project.<br/>
     *         Default: false
     */
    writeMode?: boolean
    /** Format: double */
    penalty?: number
    /** @description Can be set only for penalty == 1<br/>Default: false */
    applyPenaltyTo101Only?: boolean
    /** Format: int32 */
    order?: number
  }
  ADMIN_RESPONSE: definitions['UserDetailsDtoV3'] & {[key: string]: unknown}
  GUEST_RESPONSE: definitions['UserDetailsDtoV3'] & {
    client: definitions['ClientReference']
    enableMT?: boolean
    projectViewOther?: boolean
    projectViewOtherLinguist?: boolean
    projectViewOtherEditor?: boolean
    transMemoryViewOther?: boolean
    transMemoryEditOther?: boolean
    transMemoryExportOther?: boolean
    transMemoryImportOther?: boolean
    termBaseViewOther?: boolean
    termBaseEditOther?: boolean
    termBaseExportOther?: boolean
    termBaseImportOther?: boolean
    termBaseApproveOther?: boolean
  }
  LINGUIST_RESPONSE: definitions['UserDetailsDtoV3'] & {
    editAllTermsInTB?: boolean
    editTranslationsInTM?: boolean
    enableMT?: boolean
    mayRejectJobs?: boolean
    sourceLocales?: string[]
    targetLocales?: string[]
    workflowSteps?: definitions['WorkflowStepReferenceV3'][]
    clients?: definitions['ClientReference'][]
    domains?: definitions['DomainReference'][]
    subDomains?: definitions['SubDomainReference'][]
    netRateScheme?: definitions['DiscountSchemeReference']
    translationPriceList?: definitions['PriceListReference']
  }
  PROJECT_MANAGER_RESPONSE: definitions['UserDetailsDtoV3'] & {
    sourceLocales?: string[]
    targetLocales?: string[]
    workflowSteps?: definitions['WorkflowStepReferenceV3'][]
    clients?: definitions['ClientReference'][]
    domains?: definitions['DomainReference'][]
    subDomains?: definitions['SubDomainReference'][]
    projectCreate?: boolean
    projectViewOther?: boolean
    projectEditOther?: boolean
    projectDeleteOther?: boolean
    projectClients?: definitions['ClientReference'][]
    projectBusinessUnits?: definitions['BusinessUnitReference'][]
    projectTemplateCreate?: boolean
    projectTemplateViewOther?: boolean
    projectTemplateEditOther?: boolean
    projectTemplateDeleteOther?: boolean
    projectTemplateClients?: definitions['ClientReference'][]
    projectTemplateBusinessUnits?: definitions['BusinessUnitReference'][]
    transMemoryCreate?: boolean
    transMemoryViewOther?: boolean
    transMemoryEditOther?: boolean
    transMemoryDeleteOther?: boolean
    transMemoryExportOther?: boolean
    transMemoryImportOther?: boolean
    transMemoryClients?: definitions['ClientReference'][]
    transMemoryBusinessUnits?: definitions['BusinessUnitReference'][]
    termBaseCreate?: boolean
    termBaseViewOther?: boolean
    termBaseEditOther?: boolean
    termBaseDeleteOther?: boolean
    termBaseExportOther?: boolean
    termBaseImportOther?: boolean
    termBaseApproveOther?: boolean
    termBaseClients?: definitions['ClientReference'][]
    termBaseBusinessUnits?: definitions['BusinessUnitReference'][]
    userCreate?: boolean
    userViewOther?: boolean
    userEditOther?: boolean
    userDeleteOther?: boolean
    clientDomainSubDomainCreate?: boolean
    clientDomainSubDomainViewOther?: boolean
    clientDomainSubDomainEditOther?: boolean
    clientDomainSubDomainDeleteOther?: boolean
    vendorCreate?: boolean
    vendorViewOther?: boolean
    vendorEditOther?: boolean
    vendorDeleteOther?: boolean
    dashboardSetting?: string
    setupServer?: boolean
  }
  SUBMITTER_RESPONSE: definitions['UserDetailsDtoV3'] & {
    automationWidgets: definitions['IdReference'][]
    projectViewCreatedByOtherSubmitters?: boolean
  }
  /** @description User with all belonging objects */
  UserDetailsDtoV3: {
    uid: string
    userName: string
    firstName: string
    lastName: string
    email: string
    /** Format: date-time */
    dateCreated?: string
    /** Format: date-time */
    dateDeleted?: string
    createdBy?: definitions['UserReference']
    /**
     * @description Enum: "ADMIN", "PROJECT_MANAGER", "LINGUIST", "GUEST", "SUBMITTER"
     * @enum {string}
     */
    role:
      | 'SYS_ADMIN'
      | 'SYS_ADMIN_READ'
      | 'ADMIN'
      | 'PROJECT_MANAGER'
      | 'LINGUIST'
      | 'GUEST'
      | 'SUBMITTER'
    timezone: string
    note?: string
    receiveNewsletter?: boolean
    active?: boolean
    /** @description If user has email change pending (new email not verified) */
    pendingEmailChange?: boolean
  }
  ADMIN: definitions['AbstractUserCreateDto'] & {[key: string]: unknown}
  AbstractUserCreateDto: {
    userName: string
    firstName: string
    lastName: string
    email: string
    password: string
    /**
     * @description Enum: "ADMIN", "PROJECT_MANAGER", "LINGUIST", "GUEST", "SUBMITTER"
     * @enum {string}
     */
    role:
      | 'SYS_ADMIN'
      | 'SYS_ADMIN_READ'
      | 'ADMIN'
      | 'PROJECT_MANAGER'
      | 'LINGUIST'
      | 'GUEST'
      | 'SUBMITTER'
    timezone: string
    /** @description Default: true */
    receiveNewsletter?: boolean
    note?: string
    /** @description Default: true */
    active?: boolean
  }
  GUEST: definitions['AbstractUserCreateDto'] & {
    client: definitions['UidReference']
    /** @description Enable MT. Default: true */
    enableMT?: boolean
    /** @description View projects created by other users. Default: true */
    projectViewOther?: boolean
    /** @description Show provider names. Default: true */
    projectViewOtherLinguist?: boolean
    /** @description Edit jobs in Memsource Editor. Default: true */
    projectViewOtherEditor?: boolean
    /** @description View TMs created by other users. Default: true */
    transMemoryViewOther?: boolean
    /** @description Modify TMs created by other users. Default: true */
    transMemoryEditOther?: boolean
    /** @description Export TMs created by other users. Default: true */
    transMemoryExportOther?: boolean
    /** @description Import into TMs created by other users. Default: true */
    transMemoryImportOther?: boolean
    /** @description View TBs created by other users. Default: true */
    termBaseViewOther?: boolean
    /** @description Modify TBs created by other users. Default: true */
    termBaseEditOther?: boolean
    /** @description Export TBs created by other users. Default: true */
    termBaseExportOther?: boolean
    /** @description Import into TBs created by other users. Default: true */
    termBaseImportOther?: boolean
    /** @description Approve terms in TBs created by other users. Default: true */
    termBaseApproveOther?: boolean
  }
  LINGUIST: definitions['AbstractUserCreateDto'] & {
    /** @description Edit all terms in TB. Default: false */
    editAllTermsInTB?: boolean
    /** @description Edit translations in TM. Default: false */
    editTranslationsInTM?: boolean
    /** @description Enable MT. Default: true */
    enableMT?: boolean
    /** @description Reject jobs. Default: false */
    mayRejectJobs?: boolean
    sourceLocales?: string[]
    targetLocales?: string[]
    workflowSteps?: definitions['UidReference'][]
    clients?: definitions['UidReference'][]
    domains?: definitions['UidReference'][]
    subDomains?: definitions['UidReference'][]
    /** @description Net rate scheme */
    netRateScheme?: definitions['UidReference']
    /** @description Price list */
    translationPriceList?: definitions['UidReference']
  }
  PROJECT_MANAGER: definitions['AbstractUserCreateDto'] & {
    sourceLocales?: string[]
    targetLocales?: string[]
    workflowSteps?: definitions['UidReference'][]
    clients?: definitions['UidReference'][]
    domains?: definitions['UidReference'][]
    subDomains?: definitions['UidReference'][]
    /** @description Enable project creation. Default: true */
    projectCreate?: boolean
    /** @description View projects created by other users. Default: true */
    projectViewOther?: boolean
    /** @description Modify projects created by other users. Default: true */
    projectEditOther?: boolean
    /** @description Delete projects created by other users. Default: true */
    projectDeleteOther?: boolean
    /** @description Access projects of a selected clients only */
    projectClients?: definitions['UidReference'][]
    /** @description Access projects of selected business units only */
    projectBusinessUnits?: definitions['UidReference'][]
    /** @description Enable project templates creation. Default: true */
    projectTemplateCreate?: boolean
    /** @description View project templates created by other users. Default: true */
    projectTemplateViewOther?: boolean
    /** @description Modify project templates created by other users. Default: true */
    projectTemplateEditOther?: boolean
    /** @description Delete project templates created by other users. Default: true */
    projectTemplateDeleteOther?: boolean
    /** @description Access project templates of a selected clients only */
    projectTemplateClients?: definitions['UidReference'][]
    /** @description Access project templates of selected business units only */
    projectTemplateBusinessUnits?: definitions['UidReference'][]
    /** @description Enable TMs creation. Default: true */
    transMemoryCreate?: boolean
    /** @description View TMs created by other users. Default: true */
    transMemoryViewOther?: boolean
    /** @description Modify TMs created by other users. Default: true */
    transMemoryEditOther?: boolean
    /** @description Delete TMs created by other users. Default: true */
    transMemoryDeleteOther?: boolean
    /** @description Export TMs created by other users. Default: true */
    transMemoryExportOther?: boolean
    /** @description Import into TMs created by other users. Default: true */
    transMemoryImportOther?: boolean
    /** @description Access TMs of a selected clients only */
    transMemoryClients?: definitions['UidReference'][]
    /** @description Access TMs of selected business units only */
    transMemoryBusinessUnits?: definitions['UidReference'][]
    /** @description Enable TBs creation. Default: true */
    termBaseCreate?: boolean
    /** @description View TBs created by other users. Default: true */
    termBaseViewOther?: boolean
    /** @description Modify TBs created by other users. Default: true */
    termBaseEditOther?: boolean
    /** @description Delete TBs created by other users. Default: true */
    termBaseDeleteOther?: boolean
    /** @description Export TBs created by other users. Default: true */
    termBaseExportOther?: boolean
    /** @description Import into TBs created by other users. Default: true */
    termBaseImportOther?: boolean
    /** @description Approve terms in TBs created by other users. Default: true */
    termBaseApproveOther?: boolean
    /** @description Access TBs of a selected clients only */
    termBaseClients?: definitions['UidReference'][]
    /** @description Access TBs of selected business units only */
    termBaseBusinessUnits?: definitions['UidReference'][]
    /** @description Enable users creation. Default: true */
    userCreate?: boolean
    /** @description View users created by other users. Default: true */
    userViewOther?: boolean
    /** @description Modify users created by other users. Default: true */
    userEditOther?: boolean
    /** @description Delete users created by other users. Default: true */
    userDeleteOther?: boolean
    /** @description Enable clients, domains, subdomains creation. Default: true */
    clientDomainSubDomainCreate?: boolean
    /** @description View clients, domains, subdomains created by other users. Default: true */
    clientDomainSubDomainViewOther?: boolean
    /** @description Modify clients, domains, subdomains created by other users. Default: true */
    clientDomainSubDomainEditOther?: boolean
    /** @description Delete clients, domains, subdomains created by other users. Default: true */
    clientDomainSubDomainDeleteOther?: boolean
    /** @description Enable Vendors creation. Default: true */
    vendorCreate?: boolean
    /** @description View Vendors created by other users. Default: true */
    vendorViewOther?: boolean
    /** @description Modify Vendors created by other users. Default: true */
    vendorEditOther?: boolean
    /** @description Delete Vendors created by other users. Default: true */
    vendorDeleteOther?: boolean
    /**
     * @description Home page dashboards. Default: OWN_DATA
     * @enum {string}
     */
    dashboardSetting?: 'ALL_DATA' | 'OWN_DATA' | 'NO_DASHBOARD'
    /** @description Modify setup's server settings. Default: true */
    setupServer?: boolean
  }
  SUBMITTER: definitions['AbstractUserCreateDto'] & {
    /** @description If no automation widgets are assigned in request the default automation widgets will be assigned instead */
    automationWidgets?: definitions['IdReference'][]
    /** @description View projects created by other Submitters. Default: false */
    projectViewCreatedByOtherSubmitters?: boolean
  }
  ADMIN_EDIT: definitions['AbstractUserEditDto'] & {[key: string]: unknown}
  AbstractUserEditDto: {
    userName: string
    firstName: string
    lastName: string
    email: string
    /**
     * @description Enum: "ADMIN", "PROJECT_MANAGER", "LINGUIST", "GUEST", "SUBMITTER"
     * @enum {string}
     */
    role:
      | 'SYS_ADMIN'
      | 'SYS_ADMIN_READ'
      | 'ADMIN'
      | 'PROJECT_MANAGER'
      | 'LINGUIST'
      | 'GUEST'
      | 'SUBMITTER'
    timezone: string
    /** @description Default: true */
    receiveNewsletter?: boolean
    note?: string
    /** @description Default: true */
    active?: boolean
  }
  GUEST_EDIT: definitions['AbstractUserEditDto'] & {
    client: definitions['UidReference']
    /** @description Enable MT. Default: true */
    enableMT?: boolean
    /** @description View projects created by other users. Default: true */
    projectViewOther?: boolean
    /** @description Show provider names. Default: true */
    projectViewOtherLinguist?: boolean
    /** @description Edit jobs in Memsource Editor. Default: true */
    projectViewOtherEditor?: boolean
    /** @description View TMs created by other users. Default: true */
    transMemoryViewOther?: boolean
    /** @description Modify TMs created by other users. Default: true */
    transMemoryEditOther?: boolean
    /** @description Export TMs created by other users. Default: true */
    transMemoryExportOther?: boolean
    /** @description Import into TMs created by other users. Default: true */
    transMemoryImportOther?: boolean
    /** @description View TBs created by other users. Default: true */
    termBaseViewOther?: boolean
    /** @description Modify TBs created by other users. Default: true */
    termBaseEditOther?: boolean
    /** @description Export TBs created by other users. Default: true */
    termBaseExportOther?: boolean
    /** @description Import into TBs created by other users. Default: true */
    termBaseImportOther?: boolean
    /** @description Approve terms in TBs created by other users. Default: true */
    termBaseApproveOther?: boolean
  }
  LINGUIST_EDIT: definitions['AbstractUserEditDto'] & {
    /** @description Edit all terms in TB. Default: false */
    editAllTermsInTB?: boolean
    /** @description Edit translations in TM. Default: false */
    editTranslationsInTM?: boolean
    /** @description Enable MT. Default: true */
    enableMT?: boolean
    /** @description Reject jobs. Default: false */
    mayRejectJobs?: boolean
    sourceLocales?: string[]
    targetLocales?: string[]
    workflowSteps?: definitions['UidReference'][]
    clients?: definitions['UidReference'][]
    domains?: definitions['UidReference'][]
    subDomains?: definitions['UidReference'][]
    /** @description Net rate scheme */
    netRateScheme?: definitions['UidReference']
    /** @description Price list */
    translationPriceList?: definitions['UidReference']
  }
  PROJECT_MANAGER_EDIT: definitions['AbstractUserEditDto'] & {
    sourceLocales?: string[]
    targetLocales?: string[]
    workflowSteps?: definitions['UidReference'][]
    clients?: definitions['UidReference'][]
    domains?: definitions['UidReference'][]
    subDomains?: definitions['UidReference'][]
    /** @description Enable project creation. Default: true */
    projectCreate?: boolean
    /** @description View projects created by other users. Default: true */
    projectViewOther?: boolean
    /** @description Modify projects created by other users. Default: true */
    projectEditOther?: boolean
    /** @description Delete projects created by other users. Default: true */
    projectDeleteOther?: boolean
    /** @description Access projects of a selected clients only */
    projectClients?: definitions['UidReference'][]
    /** @description Access projects of selected business units only */
    projectBusinessUnits?: definitions['UidReference'][]
    /** @description Enable project templates creation. Default: true */
    projectTemplateCreate?: boolean
    /** @description View project templates created by other users. Default: true */
    projectTemplateViewOther?: boolean
    /** @description Modify project templates created by other users. Default: true */
    projectTemplateEditOther?: boolean
    /** @description Delete project templates created by other users. Default: true */
    projectTemplateDeleteOther?: boolean
    /** @description Access project templates of a selected clients only */
    projectTemplateClients?: definitions['UidReference'][]
    /** @description Access project templates of selected business units only */
    projectTemplateBusinessUnits?: definitions['UidReference'][]
    /** @description Enable TMs creation. Default: true */
    transMemoryCreate?: boolean
    /** @description View TMs created by other users. Default: true */
    transMemoryViewOther?: boolean
    /** @description Modify TMs created by other users. Default: true */
    transMemoryEditOther?: boolean
    /** @description Delete TMs created by other users. Default: true */
    transMemoryDeleteOther?: boolean
    /** @description Export TMs created by other users. Default: true */
    transMemoryExportOther?: boolean
    /** @description Import into TMs created by other users. Default: true */
    transMemoryImportOther?: boolean
    /** @description Access TMs of a selected clients only */
    transMemoryClients?: definitions['UidReference'][]
    /** @description Access TMs of selected business units only */
    transMemoryBusinessUnits?: definitions['UidReference'][]
    /** @description Enable TBs creation. Default: true */
    termBaseCreate?: boolean
    /** @description View TBs created by other users. Default: true */
    termBaseViewOther?: boolean
    /** @description Modify TBs created by other users. Default: true */
    termBaseEditOther?: boolean
    /** @description Delete TBs created by other users. Default: true */
    termBaseDeleteOther?: boolean
    /** @description Export TBs created by other users. Default: true */
    termBaseExportOther?: boolean
    /** @description Import into TBs created by other users. Default: true */
    termBaseImportOther?: boolean
    /** @description Approve terms in TBs created by other users. Default: true */
    termBaseApproveOther?: boolean
    /** @description Access TBs of a selected clients only */
    termBaseClients?: definitions['UidReference'][]
    /** @description Access TBs of selected business units only */
    termBaseBusinessUnits?: definitions['UidReference'][]
    /** @description Enable users creation. Default: true */
    userCreate?: boolean
    /** @description View users created by other users. Default: true */
    userViewOther?: boolean
    /** @description Modify users created by other users. Default: true */
    userEditOther?: boolean
    /** @description Delete users created by other users. Default: true */
    userDeleteOther?: boolean
    /** @description Enable clients, domains, subdomains creation. Default: true */
    clientDomainSubDomainCreate?: boolean
    /** @description View clients, domains, subdomains created by other users. Default: true */
    clientDomainSubDomainViewOther?: boolean
    /** @description Modify clients, domains, subdomains created by other users. Default: true */
    clientDomainSubDomainEditOther?: boolean
    /** @description Delete clients, domains, subdomains created by other users. Default: true */
    clientDomainSubDomainDeleteOther?: boolean
    /** @description Enable Vendors creation. Default: true */
    vendorCreate?: boolean
    /** @description View Vendors created by other users. Default: true */
    vendorViewOther?: boolean
    /** @description Modify Vendors created by other users. Default: true */
    vendorEditOther?: boolean
    /** @description Delete Vendors created by other users. Default: true */
    vendorDeleteOther?: boolean
    /**
     * @description Home page dashboards. Default: OWN_DATA
     * @enum {string}
     */
    dashboardSetting?: 'ALL_DATA' | 'OWN_DATA' | 'NO_DASHBOARD'
    /** @description Modify setup's server settings. Default: true */
    setupServer?: boolean
  }
  SUBMITTER_EDIT: definitions['AbstractUserEditDto'] & {
    automationWidgets: definitions['IdReference'][]
    /** @description View projects created by other Submitters. Default: false */
    projectViewCreatedByOtherSubmitters?: boolean
  }
}

export interface operations {
  deleteAWFStep: {
    parameters: {
      path: {
        id: string
      }
    }
    responses: {
      /** Deleted */
      204: never
      /** Bad request */
      400: unknown
      /** Not authorized */
      401: unknown
      /** Forbidden */
      403: unknown
      /** Resource not found */
      404: unknown
      /** Method not allowed */
      405: unknown
      /** Timeout */
      408: unknown
      /** Gone */
      410: unknown
      /** Unsupported media type */
      415: unknown
      /** Too many requests */
      429: unknown
      /** Internal server error */
      500: unknown
      /** Not implemented */
      501: unknown
    }
  }
  listAWFSteps: {
    parameters: {
      query: {
        /** Page number, starting with 0, default 0 */
        pageNumber?: number
        /** Page size, accepts values between 1 and 50, default 50 */
        pageSize?: number
        /** Name of the additional workflow step to filter */
        name?: string
      }
    }
    responses: {
      /** successful operation */
      200: {
        schema: definitions['PageDtoAdditionalWorkflowStepDto']
      }
      /** Bad request */
      400: unknown
      /** Not authorized */
      401: unknown
      /** Forbidden */
      403: unknown
      /** Resource not found */
      404: unknown
      /** Method not allowed */
      405: unknown
      /** Timeout */
      408: unknown
      /** Gone */
      410: unknown
      /** Unsupported media type */
      415: unknown
      /** Too many requests */
      429: unknown
      /** Internal server error */
      500: unknown
      /** Not implemented */
      501: unknown
    }
  }
  createAWFStep: {
    parameters: {
      body: {
        body?: definitions['AdditionalWorkflowStepRequestDto']
      }
    }
    responses: {
      /** Created */
      201: {
        schema: definitions['AdditionalWorkflowStepDto']
      }
      /** Bad request */
      400: unknown
      /** Not authorized */
      401: unknown
      /** Forbidden */
      403: unknown
      /** Resource not found */
      404: unknown
      /** Method not allowed */
      405: unknown
      /** Timeout */
      408: unknown
      /** Gone */
      410: unknown
      /** Unsupported media type */
      415: unknown
      /** Too many requests */
      429: unknown
      /** Internal server error */
      500: unknown
      /** Not implemented */
      501: unknown
    }
  }
  bulkDeleteAnalyses: {
    parameters: {
      body: {
        body?: definitions['BulkDeleteAnalyseDto']
      }
    }
    responses: {
      /** No Content */
      204: never
      /** Bad request */
      400: unknown
      /** Not authorized */
      401: unknown
      /** Forbidden */
      403: unknown
      /** Resource not found */
      404: unknown
      /** Method not allowed */
      405: unknown
      /** Timeout */
      408: unknown
      /** Gone */
      410: unknown
      /** Unsupported media type */
      415: unknown
      /** Too many requests */
      429: unknown
      /** Internal server error */
      500: unknown
      /** Not implemented */
      501: unknown
    }
  }
  delete: {
    parameters: {
      path: {
        analyseUid: string
      }
      query: {
        purge?: boolean
      }
    }
    responses: {
      /** No Content */
      204: never
      /** Bad request */
      400: unknown
      /** Not authorized */
      401: unknown
      /** Forbidden */
      403: unknown
      /** Resource not found */
      404: unknown
      /** Method not allowed */
      405: unknown
      /** Timeout */
      408: unknown
      /** Gone */
      410: unknown
      /** Unsupported media type */
      415: unknown
      /** Too many requests */
      429: unknown
      /** Internal server error */
      500: unknown
      /** Not implemented */
      501: unknown
    }
  }
  createAnalysesForProviders: {
    parameters: {
      body: {
        body?: definitions['CreateAnalyseListAsyncDto']
      }
    }
    responses: {
      /** successful operation */
      200: {
        schema: definitions['AsyncAnalyseListResponseDto']
      }
      /** Bad request */
      400: unknown
      /** Not authorized */
      401: unknown
      /** Forbidden */
      403: unknown
      /** Resource not found */
      404: unknown
      /** Method not allowed */
      405: unknown
      /** Timeout */
      408: unknown
      /** Gone */
      410: unknown
      /** Unsupported media type */
      415: unknown
      /** Too many requests */
      429: unknown
      /** Internal server error */
      500: unknown
      /** Not implemented */
      501: unknown
    }
  }
  createAnalysesForLangs: {
    parameters: {
      body: {
        body?: definitions['CreateAnalyseListAsyncDto']
      }
    }
    responses: {
      /** successful operation */
      200: {
        schema: definitions['AsyncAnalyseListResponseDto']
      }
      /** Bad request */
      400: unknown
      /** Not authorized */
      401: unknown
      /** Forbidden */
      403: unknown
      /** Resource not found */
      404: unknown
      /** Method not allowed */
      405: unknown
      /** Timeout */
      408: unknown
      /** Gone */
      410: unknown
      /** Unsupported media type */
      415: unknown
      /** Too many requests */
      429: unknown
      /** Internal server error */
      500: unknown
      /** Not implemented */
      501: unknown
    }
  }
  recalculate: {
    parameters: {
      body: {
        body?: definitions['AnalyseRecalculateRequestDto']
      }
    }
    responses: {
      /** successful operation */
      200: {
        schema: definitions['AnalyseRecalculateResponseDto']
      }
      /** Bad request */
      400: unknown
      /** Not authorized */
      401: unknown
      /** Forbidden */
      403: unknown
      /** Resource not found */
      404: unknown
      /** Method not allowed */
      405: unknown
      /** Timeout */
      408: unknown
      /** Gone */
      410: unknown
      /** Unsupported media type */
      415: unknown
      /** Too many requests */
      429: unknown
      /** Internal server error */
      500: unknown
      /** Not implemented */
      501: unknown
    }
  }
  /** Returns analysis language pair */
  getAnalyseLanguagePart: {
    parameters: {
      path: {
        analyseUid: string
        analyseLanguagePartId: number
      }
    }
    responses: {
      /** successful operation */
      200: {
        schema: definitions['AnalyseLanguagePartDto']
      }
      /** Bad request */
      400: unknown
      /** Not authorized */
      401: unknown
      /** Forbidden */
      403: unknown
      /** Resource not found */
      404: unknown
      /** Method not allowed */
      405: unknown
      /** Timeout */
      408: unknown
      /** Gone */
      410: unknown
      /** Unsupported media type */
      415: unknown
      /** Too many requests */
      429: unknown
      /** Internal server error */
      500: unknown
      /** Not implemented */
      501: unknown
    }
  }
  /** Returns list of job's analyses */
  listJobParts: {
    parameters: {
      path: {
        analyseUid: string
        analyseLanguagePartId: number
      }
      query: {
        /** Page number, starting with 0, default 0 */
        pageNumber?: number
        /** Page size, accepts values between 1 and 50, default 50 */
        pageSize?: number
      }
    }
    responses: {
      /** successful operation */
      200: {
        schema: definitions['PageDtoAnalyseJobDto']
      }
      /** Bad request */
      400: unknown
      /** Not authorized */
      401: unknown
      /** Forbidden */
      403: unknown
      /** Resource not found */
      404: unknown
      /** Method not allowed */
      405: unknown
      /** Timeout */
      408: unknown
      /** Gone */
      410: unknown
      /** Unsupported media type */
      415: unknown
      /** Too many requests */
      429: unknown
      /** Internal server error */
      500: unknown
      /** Not implemented */
      501: unknown
    }
  }
  /** Returns job's analyse */
  getJobPartAnalyse: {
    parameters: {
      path: {
        analyseUid: string
        jobUid: string
      }
    }
    responses: {
      /** successful operation */
      200: {
        schema: definitions['AnalyseJobDto']
      }
      /** Bad request */
      400: unknown
      /** Not authorized */
      401: unknown
      /** Forbidden */
      403: unknown
      /** Resource not found */
      404: unknown
      /** Method not allowed */
      405: unknown
      /** Timeout */
      408: unknown
      /** Gone */
      410: unknown
      /** Unsupported media type */
      415: unknown
      /** Too many requests */
      429: unknown
      /** Internal server error */
      500: unknown
      /** Not implemented */
      501: unknown
    }
  }
  downloadAnalyse: {
    parameters: {
      path: {
        analyseUid: string
      }
      query: {
        format: 'CSV' | 'CSV_EXTENDED' | 'LOG' | 'JSON'
      }
    }
    responses: {
      /** application/octet-stream */
      200: unknown
      /** Bad request */
      400: unknown
      /** Not authorized */
      401: unknown
      /** Forbidden */
      403: unknown
      /** Resource not found */
      404: unknown
      /** Method not allowed */
      405: unknown
      /** Timeout */
      408: unknown
      /** Gone */
      410: unknown
      /** Unsupported media type */
      415: unknown
      /** Too many requests */
      429: unknown
      /** Internal server error */
      500: unknown
      /** Not implemented */
      501: unknown
    }
  }
  getAsyncRequest: {
    parameters: {
      path: {
        asyncRequestId: number
      }
    }
    responses: {
      /** successful operation */
      200: {
        schema: definitions['AsyncRequestDto']
      }
      /** Bad request */
      400: unknown
      /** Not authorized */
      401: unknown
      /** Forbidden */
      403: unknown
      /** Resource not found */
      404: unknown
      /** Method not allowed */
      405: unknown
      /** Timeout */
      408: unknown
      /** Gone */
      410: unknown
      /** Unsupported media type */
      415: unknown
      /** Too many requests */
      429: unknown
      /** Internal server error */
      500: unknown
      /** Not implemented */
      501: unknown
    }
  }
  listPendingRequests: {
    parameters: {
      query: {
        /** Pending requests for organization instead of current user. Only for ADMIN. */
        all?: boolean
        /** Page number, starting with 0, default 0 */
        pageNumber?: number
        /** Page size, accepts values between 1 and 50, default 50 */
        pageSize?: number
      }
    }
    responses: {
      /** successful operation */
      200: {
        schema: definitions['PageDtoAsyncRequestDto']
      }
      /** Bad request */
      400: unknown
      /** Not authorized */
      401: unknown
      /** Forbidden */
      403: unknown
      /** Resource not found */
      404: unknown
      /** Method not allowed */
      405: unknown
      /** Timeout */
      408: unknown
      /** Gone */
      410: unknown
      /** Unsupported media type */
      415: unknown
      /** Too many requests */
      429: unknown
      /** Internal server error */
      500: unknown
      /** Not implemented */
      501: unknown
    }
  }
  getCurrentLimitStatus: {
    parameters: {}
    responses: {
      /** successful operation */
      200: {
        schema: definitions['AsyncRequestStatusDto']
      }
      /** Bad request */
      400: unknown
      /** Not authorized */
      401: unknown
      /** Forbidden */
      403: unknown
      /** Resource not found */
      404: unknown
      /** Method not allowed */
      405: unknown
      /** Timeout */
      408: unknown
      /** Gone */
      410: unknown
      /** Unsupported media type */
      415: unknown
      /** Too many requests */
      429: unknown
      /** Internal server error */
      500: unknown
      /** Not implemented */
      501: unknown
    }
  }
  login: {
    parameters: {
      body: {
        body?: definitions['LoginDto']
      }
    }
    responses: {
      /** successful operation */
      200: {
        schema: definitions['LoginResponseDto']
      }
      /** Bad request */
      400: unknown
      /** Not authorized */
      401: unknown
      /** Forbidden */
      403: unknown
      /** Resource not found */
      404: unknown
      /** Method not allowed */
      405: unknown
      /** Timeout */
      408: unknown
      /** Gone */
      410: unknown
      /** Unsupported media type */
      415: unknown
      /** Too many requests */
      429: unknown
      /** Internal server error */
      500: unknown
      /** Not implemented */
      501: unknown
    }
  }
  logout: {
    parameters: {
      query: {
        token?: string
      }
      header: {
        Authorization?: string
      }
    }
    responses: {
      /** No Content */
      204: never
      /** Bad request */
      400: unknown
      /** Not authorized */
      401: unknown
      /** Forbidden */
      403: unknown
      /** Resource not found */
      404: unknown
      /** Method not allowed */
      405: unknown
      /** Timeout */
      408: unknown
      /** Gone */
      410: unknown
      /** Unsupported media type */
      415: unknown
      /** Too many requests */
      429: unknown
      /** Internal server error */
      500: unknown
      /** Not implemented */
      501: unknown
    }
  }
  loginToSession: {
    parameters: {
      body: {
        body?: definitions['LoginToSessionDto']
      }
    }
    responses: {
      /** successful operation */
      200: {
        schema: definitions['LoginToSessionResponseDto']
      }
      /** Bad request */
      400: unknown
      /** Not authorized */
      401: unknown
      /** Forbidden */
      403: unknown
      /** Resource not found */
      404: unknown
      /** Method not allowed */
      405: unknown
      /** Timeout */
      408: unknown
      /** Gone */
      410: unknown
      /** Unsupported media type */
      415: unknown
      /** Too many requests */
      429: unknown
      /** Internal server error */
      500: unknown
      /** Not implemented */
      501: unknown
    }
  }
  /** Available only for admin */
  loginOther: {
    parameters: {
      body: {
        body?: definitions['LoginOtherDto']
      }
    }
    responses: {
      /** successful operation */
      200: {
        schema: definitions['LoginResponseDto']
      }
      /** Bad request */
      400: unknown
      /** Not authorized */
      401: unknown
      /** Forbidden */
      403: unknown
      /** Resource not found */
      404: unknown
      /** Method not allowed */
      405: unknown
      /** Timeout */
      408: unknown
      /** Gone */
      410: unknown
      /** Unsupported media type */
      415: unknown
      /** Too many requests */
      429: unknown
      /** Internal server error */
      500: unknown
      /** Not implemented */
      501: unknown
    }
  }
  whoAmI: {
    parameters: {}
    responses: {
      /** successful operation */
      200: {
        schema: definitions['LoginUserDto']
      }
      /** Bad request */
      400: unknown
      /** Not authorized */
      401: unknown
      /** Forbidden */
      403: unknown
      /** Resource not found */
      404: unknown
      /** Method not allowed */
      405: unknown
      /** Timeout */
      408: unknown
      /** Gone */
      410: unknown
      /** Unsupported media type */
      415: unknown
      /** Too many requests */
      429: unknown
      /** Internal server error */
      500: unknown
      /** Not implemented */
      501: unknown
    }
  }
  loginByGoogle: {
    parameters: {
      body: {
        body?: definitions['LoginWithGoogleDto']
      }
    }
    responses: {
      /** successful operation */
      200: {
        schema: definitions['LoginResponseDto']
      }
      /** Bad request */
      400: unknown
      /** Not authorized */
      401: unknown
      /** Forbidden */
      403: unknown
      /** Resource not found */
      404: unknown
      /** Method not allowed */
      405: unknown
      /** Timeout */
      408: unknown
      /** Gone */
      410: unknown
      /** Unsupported media type */
      415: unknown
      /** Too many requests */
      429: unknown
      /** Internal server error */
      500: unknown
      /** Not implemented */
      501: unknown
    }
  }
  loginByAppleWithRefreshToken: {
    parameters: {
      body: {
        body?: definitions['LoginWithAppleDto']
      }
    }
    responses: {
      /** successful operation */
      200: {
        schema: definitions['LoginResponseDto']
      }
      /** Bad request */
      400: unknown
      /** Not authorized */
      401: unknown
      /** Forbidden */
      403: unknown
      /** Resource not found */
      404: unknown
      /** Method not allowed */
      405: unknown
      /** Timeout */
      408: unknown
      /** Gone */
      410: unknown
      /** Unsupported media type */
      415: unknown
      /** Too many requests */
      429: unknown
      /** Internal server error */
      500: unknown
      /** Not implemented */
      501: unknown
    }
  }
  loginByAppleWithCode: {
    parameters: {
      body: {
        body?: definitions['LoginWithAppleDto']
      }
      query: {
        /** For sign in with code from native device */
        native?: boolean
      }
    }
    responses: {
      /** successful operation */
      200: {
        schema: definitions['LoginResponseDto']
      }
      /** Bad request */
      400: unknown
      /** Not authorized */
      401: unknown
      /** Forbidden */
      403: unknown
      /** Resource not found */
      404: unknown
      /** Method not allowed */
      405: unknown
      /** Timeout */
      408: unknown
      /** Gone */
      410: unknown
      /** Unsupported media type */
      415: unknown
      /** Too many requests */
      429: unknown
      /** Internal server error */
      500: unknown
      /** Not implemented */
      501: unknown
    }
  }
  refreshAppleToken: {
    parameters: {
      query: {
        token?: string
      }
    }
    responses: {
      /** successful operation */
      200: {
        schema: definitions['AppleTokenResponseDto']
      }
      /** Bad request */
      400: unknown
      /** Not authorized */
      401: unknown
      /** Forbidden */
      403: unknown
      /** Resource not found */
      404: unknown
      /** Method not allowed */
      405: unknown
      /** Timeout */
      408: unknown
      /** Gone */
      410: unknown
      /** Unsupported media type */
      415: unknown
      /** Too many requests */
      429: unknown
      /** Internal server error */
      500: unknown
      /** Not implemented */
      501: unknown
    }
  }
  /** Compares bilingual file to job state. Returns list of compared segments. */
  compareBilingualFile: {
    parameters: {
      body: {
        body?: definitions['InputStream']
      }
      query: {
        workflowLevel?: number
      }
    }
    responses: {
      /** successful operation */
      200: {
        schema: definitions['ComparedSegmentsDto']
      }
      /** Bad request */
      400: unknown
      /** Not authorized */
      401: unknown
      /** Forbidden */
      403: unknown
      /** Resource not found */
      404: unknown
      /** Method not allowed */
      405: unknown
      /** Timeout */
      408: unknown
      /** Gone */
      410: unknown
      /** Unsupported media type */
      415: unknown
      /** Too many requests */
      429: unknown
      /** Internal server error */
      500: unknown
      /** Not implemented */
      501: unknown
    }
  }
  /** Supports mxliff format */
  getPreviewFile: {
    parameters: {
      body: {
        body?: definitions['InputStream']
      }
    }
    responses: {
      /** application/octet-stream */
      200: unknown
      /** Bad request */
      400: unknown
      /** Not authorized */
      401: unknown
      /** Forbidden */
      403: unknown
      /** Resource not found */
      404: unknown
      /** Method not allowed */
      405: unknown
      /** Timeout */
      408: unknown
      /** Gone */
      410: unknown
      /** Unsupported media type */
      415: unknown
      /** Too many requests */
      429: unknown
      /** Internal server error */
      500: unknown
      /** Not implemented */
      501: unknown
    }
  }
  convertBilingualFile: {
    parameters: {
      body: {
        body?: definitions['InputStream']
      }
      query: {
        from: 'MXLF' | 'DOCX'
        to: 'MXLF' | 'DOCX'
      }
    }
    responses: {
      /** application/octet-stream */
      200: unknown
      /** Bad request */
      400: unknown
      /** Not authorized */
      401: unknown
      /** Forbidden */
      403: unknown
      /** Resource not found */
      404: unknown
      /** Method not allowed */
      405: unknown
      /** Timeout */
      408: unknown
      /** Gone */
      410: unknown
      /** Unsupported media type */
      415: unknown
      /** Too many requests */
      429: unknown
      /** Internal server error */
      500: unknown
      /** Not implemented */
      501: unknown
    }
  }
  getBusinessUnit: {
    parameters: {
      path: {
        businessUnitUid: string
      }
    }
    responses: {
      /** successful operation */
      200: {
        schema: definitions['BusinessUnitDto']
      }
      /** Bad request */
      400: unknown
      /** Not authorized */
      401: unknown
      /** Forbidden */
      403: unknown
      /** Resource not found */
      404: unknown
      /** Method not allowed */
      405: unknown
      /** Timeout */
      408: unknown
      /** Gone */
      410: unknown
      /** Unsupported media type */
      415: unknown
      /** Too many requests */
      429: unknown
      /** Internal server error */
      500: unknown
      /** Not implemented */
      501: unknown
    }
  }
  updateBusinessUnit: {
    parameters: {
      path: {
        businessUnitUid: string
      }
      body: {
        body?: definitions['BusinessUnitEditDto']
      }
    }
    responses: {
      /** successful operation */
      200: {
        schema: definitions['BusinessUnitDto']
      }
      /** Bad request */
      400: unknown
      /** Not authorized */
      401: unknown
      /** Forbidden */
      403: unknown
      /** Resource not found */
      404: unknown
      /** Method not allowed */
      405: unknown
      /** Timeout */
      408: unknown
      /** Gone */
      410: unknown
      /** Unsupported media type */
      415: unknown
      /** Too many requests */
      429: unknown
      /** Internal server error */
      500: unknown
      /** Not implemented */
      501: unknown
    }
  }
  deleteBusinessUnit: {
    parameters: {
      path: {
        businessUnitUid: string
      }
    }
    responses: {
      /** No Content */
      204: never
      /** Bad request */
      400: unknown
      /** Not authorized */
      401: unknown
      /** Forbidden */
      403: unknown
      /** Resource not found */
      404: unknown
      /** Method not allowed */
      405: unknown
      /** Timeout */
      408: unknown
      /** Gone */
      410: unknown
      /** Unsupported media type */
      415: unknown
      /** Too many requests */
      429: unknown
      /** Internal server error */
      500: unknown
      /** Not implemented */
      501: unknown
    }
  }
  listBusinessUnits: {
    parameters: {
      query: {
        /** Unique name of the business unit */
        name?: string
        /** Uid of user */
        createdBy?: string
        sort?: 'NAME' | 'DATE_CREATED'
        order?: 'ASC' | 'DESC'
        /** Page number, starting with 0, default 0 */
        pageNumber?: number
        /** Page size, accepts values between 1 and 50, default 50 */
        pageSize?: number
      }
    }
    responses: {
      /** successful operation */
      200: {
        schema: definitions['PageDtoBusinessUnitDto']
      }
      /** Bad request */
      400: unknown
      /** Not authorized */
      401: unknown
      /** Forbidden */
      403: unknown
      /** Resource not found */
      404: unknown
      /** Method not allowed */
      405: unknown
      /** Timeout */
      408: unknown
      /** Gone */
      410: unknown
      /** Unsupported media type */
      415: unknown
      /** Too many requests */
      429: unknown
      /** Internal server error */
      500: unknown
      /** Not implemented */
      501: unknown
    }
  }
  createBusinessUnit: {
    parameters: {
      body: {
        body?: definitions['BusinessUnitEditDto']
      }
    }
    responses: {
      /** Created */
      201: {
        schema: definitions['BusinessUnitDto']
      }
      /** Bad request */
      400: unknown
      /** Not authorized */
      401: unknown
      /** Forbidden */
      403: unknown
      /** Resource not found */
      404: unknown
      /** Method not allowed */
      405: unknown
      /** Timeout */
      408: unknown
      /** Gone */
      410: unknown
      /** Unsupported media type */
      415: unknown
      /** Too many requests */
      429: unknown
      /** Internal server error */
      500: unknown
      /** Not implemented */
      501: unknown
    }
  }
  getClient: {
    parameters: {
      path: {
        clientUid: string
      }
    }
    responses: {
      /** successful operation */
      200: {
        schema: definitions['ClientDto']
      }
      /** Bad request */
      400: unknown
      /** Not authorized */
      401: unknown
      /** Forbidden */
      403: unknown
      /** Resource not found */
      404: unknown
      /** Method not allowed */
      405: unknown
      /** Timeout */
      408: unknown
      /** Gone */
      410: unknown
      /** Unsupported media type */
      415: unknown
      /** Too many requests */
      429: unknown
      /** Internal server error */
      500: unknown
      /** Not implemented */
      501: unknown
    }
  }
  updateClient: {
    parameters: {
      path: {
        clientUid: string
      }
      body: {
        body: definitions['ClientEditDto']
      }
    }
    responses: {
      /** successful operation */
      200: {
        schema: definitions['ClientDto']
      }
      /** Bad request */
      400: unknown
      /** Not authorized */
      401: unknown
      /** Forbidden */
      403: unknown
      /** Resource not found */
      404: unknown
      /** Method not allowed */
      405: unknown
      /** Timeout */
      408: unknown
      /** Gone */
      410: unknown
      /** Unsupported media type */
      415: unknown
      /** Too many requests */
      429: unknown
      /** Internal server error */
      500: unknown
      /** Not implemented */
      501: unknown
    }
  }
  deleteClient: {
    parameters: {
      path: {
        clientUid: string
      }
    }
    responses: {
      /** No Content */
      204: never
      /** Bad request */
      400: unknown
      /** Not authorized */
      401: unknown
      /** Forbidden */
      403: unknown
      /** Resource not found */
      404: unknown
      /** Method not allowed */
      405: unknown
      /** Timeout */
      408: unknown
      /** Gone */
      410: unknown
      /** Unsupported media type */
      415: unknown
      /** Too many requests */
      429: unknown
      /** Internal server error */
      500: unknown
      /** Not implemented */
      501: unknown
    }
  }
  listClients: {
    parameters: {
      query: {
        /** Unique name of the Client */
        name?: string
        /** Uid of user */
        createdBy?: string
        sort?: 'NAME' | 'DATE_CREATED'
        order?: 'ASC' | 'DESC'
        /** Page number, starting with 0, default 0 */
        pageNumber?: number
        /** Page size, accepts values between 1 and 50, default 50 */
        pageSize?: number
      }
    }
    responses: {
      /** successful operation */
      200: {
        schema: definitions['PageDtoClientDto']
      }
      /** Bad request */
      400: unknown
      /** Not authorized */
      401: unknown
      /** Forbidden */
      403: unknown
      /** Resource not found */
      404: unknown
      /** Method not allowed */
      405: unknown
      /** Timeout */
      408: unknown
      /** Gone */
      410: unknown
      /** Unsupported media type */
      415: unknown
      /** Too many requests */
      429: unknown
      /** Internal server error */
      500: unknown
      /** Not implemented */
      501: unknown
    }
  }
  createClient: {
    parameters: {
      body: {
        body: definitions['ClientEditDto']
      }
    }
    responses: {
      /** Created */
      201: {
        schema: definitions['ClientDto']
      }
      /** Bad request */
      400: unknown
      /** Not authorized */
      401: unknown
      /** Forbidden */
      403: unknown
      /** Resource not found */
      404: unknown
      /** Method not allowed */
      405: unknown
      /** Timeout */
      408: unknown
      /** Gone */
      410: unknown
      /** Unsupported media type */
      415: unknown
      /** Too many requests */
      429: unknown
      /** Internal server error */
      500: unknown
      /** Not implemented */
      501: unknown
    }
  }
  getConnector: {
    parameters: {
      path: {
        connectorId: string
      }
    }
    responses: {
      /** successful operation */
      200: {
        schema: definitions['ConnectorDto']
      }
      /** Bad request */
      400: unknown
      /** Not authorized */
      401: unknown
      /** Forbidden */
      403: unknown
      /** Resource not found */
      404: unknown
      /** Method not allowed */
      405: unknown
      /** Timeout */
      408: unknown
      /** Gone */
      410: unknown
      /** Unsupported media type */
      415: unknown
      /** Too many requests */
      429: unknown
      /** Internal server error */
      500: unknown
      /** Not implemented */
      501: unknown
    }
  }
  /** Edit selected connector */
  editConnector: {
    parameters: {
      path: {
        connectorId: string
      }
      body: {
        body?: definitions['AbstractConnectorDto']
      }
      query: {
        /** For running connection test */
        connectionTest?: boolean
      }
    }
    responses: {
      /** Edited */
      200: {
        schema: definitions['ConnectorCreateResponseDto']
      }
      /** Bad request */
      400: unknown
      /** Not authorized */
      401: unknown
      /** Forbidden */
      403: unknown
      /** Resource not found */
      404: unknown
      /** Method not allowed */
      405: unknown
      /** Timeout */
      408: unknown
      /** Gone */
      410: unknown
      /** Unsupported media type */
      415: unknown
      /** Too many requests */
      429: unknown
      /** Internal server error */
      500: unknown
      /** Not implemented */
      501: unknown
    }
  }
  getConnectorList: {
    parameters: {
      query: {
        type?: string
      }
    }
    responses: {
      /** successful operation */
      200: {
        schema: definitions['ConnectorListDto']
      }
      /** Bad request */
      400: unknown
      /** Not authorized */
      401: unknown
      /** Forbidden */
      403: unknown
      /** Resource not found */
      404: unknown
      /** Method not allowed */
      405: unknown
      /** Timeout */
      408: unknown
      /** Gone */
      410: unknown
      /** Unsupported media type */
      415: unknown
      /** Too many requests */
      429: unknown
      /** Internal server error */
      500: unknown
      /** Not implemented */
      501: unknown
    }
  }
  /** List files in a subfolder of the selected connector */
  getFolder: {
    parameters: {
      path: {
        connectorId: string
        folder: string
      }
      query: {
        projectUid?: string
        fileType?: string
        sort?: string
        direction?: string
      }
    }
    responses: {
      /** successful operation */
      200: {
        schema: definitions['FileListDto']
      }
      /** Bad request */
      400: unknown
      /** Not authorized */
      401: unknown
      /** Forbidden */
      403: unknown
      /** Resource not found */
      404: unknown
      /** Method not allowed */
      405: unknown
      /** Timeout */
      408: unknown
      /** Gone */
      410: unknown
      /** Unsupported media type */
      415: unknown
      /** Too many requests */
      429: unknown
      /** Internal server error */
      500: unknown
      /** Not implemented */
      501: unknown
    }
  }
  /** Upload a file to a subfolder of the selected connector */
  uploadFile: {
    parameters: {
      path: {
        connectorId: string
        folder: string
      }
      header: {
        'Content-Type': 'multipart/form-data'
      }
      formData: {
        /** Translated file to upload */
        file: unknown
        /** Name or ID of the original file */
        sourceFileName?: string
        /** Optional subfolder to upload the file to */
        subfolderName?: string
        /** Mime type of the file to upload */
        mimeType?: string
        /** Commit message for upload to Git, etc. */
        commitMessage?: string
      }
    }
    responses: {
      /** successful operation */
      200: {
        schema: definitions['UploadResultDto']
      }
      /** Bad request */
      400: unknown
      /** Not authorized */
      401: unknown
      /** Forbidden */
      403: unknown
      /** Resource not found */
      404: unknown
      /** Method not allowed */
      405: unknown
      /** Timeout */
      408: unknown
      /** Gone */
      410: unknown
      /** Unsupported media type */
      415: unknown
      /** Too many requests */
      429: unknown
      /** Internal server error */
      500: unknown
      /** Not implemented */
      501: unknown
    }
  }
  /** List files in a root folder of the selected connector */
  getRootFolder: {
    parameters: {
      path: {
        connectorId: string
      }
      query: {
        fileType?: string
        sort?: string
        direction?: string
      }
    }
    responses: {
      /** successful operation */
      200: {
        schema: definitions['FileListDto']
      }
      /** Bad request */
      400: unknown
      /** Not authorized */
      401: unknown
      /** Forbidden */
      403: unknown
      /** Resource not found */
      404: unknown
      /** Method not allowed */
      405: unknown
      /** Timeout */
      408: unknown
      /** Gone */
      410: unknown
      /** Unsupported media type */
      415: unknown
      /** Too many requests */
      429: unknown
      /** Internal server error */
      500: unknown
      /** Not implemented */
      501: unknown
    }
  }
  /** Download a file from a subfolder of the selected connector */
  getFile: {
    parameters: {
      path: {
        connectorId: string
        folder: string
        file: string
      }
    }
    responses: {
      /** successful operation */
      200: {
        schema: definitions['InputStreamLength']
      }
      /** Bad request */
      400: unknown
      /** Not authorized */
      401: unknown
      /** Forbidden */
      403: unknown
      /** Resource not found */
      404: unknown
      /** Method not allowed */
      405: unknown
      /** Timeout */
      408: unknown
      /** Gone */
      410: unknown
      /** Unsupported media type */
      415: unknown
      /** Too many requests */
      429: unknown
      /** Internal server error */
      500: unknown
      /** Not implemented */
      501: unknown
    }
  }
  listAllConversations: {
    parameters: {
      path: {
        jobUid: string
      }
      query: {
        includeDeleted?: boolean
        since?: string
      }
    }
    responses: {
      /** successful operation */
      200: {
        schema: definitions['ConversationListDto']
      }
      /** Bad request */
      400: unknown
      /** Not authorized */
      401: unknown
      /** Forbidden */
      403: unknown
      /** Resource not found */
      404: unknown
      /** Method not allowed */
      405: unknown
      /** Timeout */
      408: unknown
      /** Gone */
      410: unknown
      /** Unsupported media type */
      415: unknown
      /** Too many requests */
      429: unknown
      /** Internal server error */
      500: unknown
      /** Not implemented */
      501: unknown
    }
  }
  findConversations: {
    parameters: {
      body: {
        body?: definitions['FindConversationsDto']
      }
    }
    responses: {
      /** successful operation */
      200: {
        schema: definitions['ConversationListDto']
      }
      /** Bad request */
      400: unknown
      /** Not authorized */
      401: unknown
      /** Forbidden */
      403: unknown
      /** Resource not found */
      404: unknown
      /** Method not allowed */
      405: unknown
      /** Timeout */
      408: unknown
      /** Gone */
      410: unknown
      /** Unsupported media type */
      415: unknown
      /** Too many requests */
      429: unknown
      /** Internal server error */
      500: unknown
      /** Not implemented */
      501: unknown
    }
  }
  getCostCenter: {
    parameters: {
      path: {
        costCenterUid: string
      }
    }
    responses: {
      /** successful operation */
      200: {
        schema: definitions['CostCenterDto']
      }
      /** Bad request */
      400: unknown
      /** Not authorized */
      401: unknown
      /** Forbidden */
      403: unknown
      /** Resource not found */
      404: unknown
      /** Method not allowed */
      405: unknown
      /** Timeout */
      408: unknown
      /** Gone */
      410: unknown
      /** Unsupported media type */
      415: unknown
      /** Too many requests */
      429: unknown
      /** Internal server error */
      500: unknown
      /** Not implemented */
      501: unknown
    }
  }
  updateCostCenter: {
    parameters: {
      path: {
        costCenterUid: string
      }
      body: {
        body?: definitions['CostCenterEditDto']
      }
    }
    responses: {
      /** successful operation */
      200: {
        schema: definitions['CostCenterDto']
      }
      /** Bad request */
      400: unknown
      /** Not authorized */
      401: unknown
      /** Forbidden */
      403: unknown
      /** Resource not found */
      404: unknown
      /** Method not allowed */
      405: unknown
      /** Timeout */
      408: unknown
      /** Gone */
      410: unknown
      /** Unsupported media type */
      415: unknown
      /** Too many requests */
      429: unknown
      /** Internal server error */
      500: unknown
      /** Not implemented */
      501: unknown
    }
  }
  deleteCostCenter: {
    parameters: {
      path: {
        costCenterUid: string
      }
    }
    responses: {
      /** No Content */
      204: never
      /** Bad request */
      400: unknown
      /** Not authorized */
      401: unknown
      /** Forbidden */
      403: unknown
      /** Resource not found */
      404: unknown
      /** Method not allowed */
      405: unknown
      /** Timeout */
      408: unknown
      /** Gone */
      410: unknown
      /** Unsupported media type */
      415: unknown
      /** Too many requests */
      429: unknown
      /** Internal server error */
      500: unknown
      /** Not implemented */
      501: unknown
    }
  }
  listCostCenters: {
    parameters: {
      query: {
        name?: string
        /** Uid of user */
        createdBy?: string
        sort?: 'NAME' | 'DATE_CREATED'
        order?: 'ASC' | 'DESC'
        /** Page number, starting with 0, default 0 */
        pageNumber?: number
        /** Page size, accepts values between 1 and 50, default 50 */
        pageSize?: number
      }
    }
    responses: {
      /** successful operation */
      200: {
        schema: definitions['PageDtoCostCenterDto']
      }
      /** Bad request */
      400: unknown
      /** Not authorized */
      401: unknown
      /** Forbidden */
      403: unknown
      /** Resource not found */
      404: unknown
      /** Method not allowed */
      405: unknown
      /** Timeout */
      408: unknown
      /** Gone */
      410: unknown
      /** Unsupported media type */
      415: unknown
      /** Too many requests */
      429: unknown
      /** Internal server error */
      500: unknown
      /** Not implemented */
      501: unknown
    }
  }
  createCostCenter: {
    parameters: {
      body: {
        body: definitions['CostCenterEditDto']
      }
    }
    responses: {
      /** Created */
      201: {
        schema: definitions['CostCenterDto']
      }
      /** Bad request */
      400: unknown
      /** Not authorized */
      401: unknown
      /** Forbidden */
      403: unknown
      /** Resource not found */
      404: unknown
      /** Method not allowed */
      405: unknown
      /** Timeout */
      408: unknown
      /** Gone */
      410: unknown
      /** Unsupported media type */
      415: unknown
      /** Too many requests */
      429: unknown
      /** Internal server error */
      500: unknown
      /** Not implemented */
      501: unknown
    }
  }
  getCustomField: {
    parameters: {
      path: {
        fieldUid: string
      }
    }
    responses: {
      /** successful operation */
      200: {
        schema: definitions['CustomFieldDto']
      }
      /** Bad request */
      400: unknown
      /** Not authorized */
      401: unknown
      /** Forbidden */
      403: unknown
      /** Resource not found */
      404: unknown
      /** Method not allowed */
      405: unknown
      /** Timeout */
      408: unknown
      /** Gone */
      410: unknown
      /** Unsupported media type */
      415: unknown
      /** Too many requests */
      429: unknown
      /** Internal server error */
      500: unknown
      /** Not implemented */
      501: unknown
    }
  }
  getCustomFieldList: {
    parameters: {
      query: {
        /** Page number, starting with 0, default 0 */
        pageNumber?: number
        /** Page size, accepts values between 1 and 50, default 50 */
        pageSize?: number
        /** Filter by custom field name */
        name?: string
        /** Filter by custom field allowed entities */
        allowedEntities?: 'PROJECT'[]
        /** Filter by custom field types */
        types?: ('MULTI_SELECT' | 'SINGLE_SELECT' | 'STRING' | 'NUMBER' | 'URL' | 'DATE')[]
        /** Filter by custom field creators UIDs */
        createdBy?: string[]
        /** Filter by custom field updaters UIDs */
        modifiedBy?: string[]
        /** Filter by custom field UIDs */
        uids?: string[]
        /** Filter by custom field required parameter */
        required?: boolean
        /** Sort by this field */
        sortField?: 'NAME' | 'CREATED' | 'LAST_MODIFIED'
        /** Sort direction */
        sortTrend?: 'ASC' | 'DESC'
      }
    }
    responses: {
      /** successful operation */
      200: {
        schema: definitions['PageDtoCustomFieldDto']
      }
      /** Bad request */
      400: unknown
      /** Not authorized */
      401: unknown
      /** Forbidden */
      403: unknown
      /** Resource not found */
      404: unknown
      /** Method not allowed */
      405: unknown
      /** Timeout */
      408: unknown
      /** Gone */
      410: unknown
      /** Unsupported media type */
      415: unknown
      /** Too many requests */
      429: unknown
      /** Internal server error */
      500: unknown
      /** Not implemented */
      501: unknown
    }
  }
  createCustomField: {
    parameters: {
      body: {
        body?: definitions['CreateCustomFieldDto']
      }
    }
    responses: {
      /** Created */
      201: {
        schema: definitions['CustomFieldDto']
      }
      /** Bad request */
      400: unknown
      /** Not authorized */
      401: unknown
      /** Forbidden */
      403: unknown
      /** Resource not found */
      404: unknown
      /** Method not allowed */
      405: unknown
      /** Timeout */
      408: unknown
      /** Gone */
      410: unknown
      /** Unsupported media type */
      415: unknown
      /** Too many requests */
      429: unknown
      /** Internal server error */
      500: unknown
      /** Not implemented */
      501: unknown
    }
  }
  getCustomFieldOptionList: {
    parameters: {
      path: {
        fieldUid: string
      }
      query: {
        /** Page number, starting with 0, default 0 */
        pageNumber?: number
        /** Page size, accepts values between 1 and 50, default 50 */
        pageSize?: number
        /** Filter by option name */
        name?: string
        /** Sort by this field */
        sortField?: 'NAME'
        /** Sort direction */
        sortTrend?: 'ASC' | 'DESC'
      }
    }
    responses: {
      /** successful operation */
      200: {
        schema: definitions['PageDtoCustomFieldOptionDto']
      }
      /** Bad request */
      400: unknown
      /** Not authorized */
      401: unknown
      /** Forbidden */
      403: unknown
      /** Resource not found */
      404: unknown
      /** Method not allowed */
      405: unknown
      /** Timeout */
      408: unknown
      /** Gone */
      410: unknown
      /** Unsupported media type */
      415: unknown
      /** Too many requests */
      429: unknown
      /** Internal server error */
      500: unknown
      /** Not implemented */
      501: unknown
    }
  }
  getAllCustomFileType: {
    parameters: {
      query: {
        /** Page number, starting with 0, default 0 */
        pageNumber?: number
        /** Page size, accepts values between 1 and 50, default 50 */
        pageSize?: number
      }
    }
    responses: {
      /** successful operation */
      200: {
        schema: definitions['PageDtoCustomFileTypeDto']
      }
      /** Bad request */
      400: unknown
      /** Not authorized */
      401: unknown
      /** Forbidden */
      403: unknown
      /** Resource not found */
      404: unknown
      /** Method not allowed */
      405: unknown
      /** Timeout */
      408: unknown
      /** Gone */
      410: unknown
      /** Unsupported media type */
      415: unknown
      /** Too many requests */
      429: unknown
      /** Internal server error */
      500: unknown
      /** Not implemented */
      501: unknown
    }
  }
  createCustomFileTypes: {
    parameters: {
      body: {
        body?: definitions['CreateCustomFileTypeDto']
      }
    }
    responses: {
      /** Created */
      201: {
        schema: definitions['CustomFileTypeDto']
      }
      /** Bad request */
      400: unknown
      /** Not authorized */
      401: unknown
      /** Forbidden */
      403: unknown
      /** Resource not found */
      404: unknown
      /** Method not allowed */
      405: unknown
      /** Timeout */
      408: unknown
      /** Gone */
      410: unknown
      /** Unsupported media type */
      415: unknown
      /** Too many requests */
      429: unknown
      /** Internal server error */
      500: unknown
      /** Not implemented */
      501: unknown
    }
  }
  deleteBatchCustomFileType: {
    parameters: {
      body: {
        body?: definitions['DeleteCustomFileTypeDto']
      }
    }
    responses: {
      /** Deleted */
      204: never
      /** Bad request */
      400: unknown
      /** Not authorized */
      401: unknown
      /** Forbidden */
      403: unknown
      /** Resource not found */
      404: unknown
      /** Method not allowed */
      405: unknown
      /** Timeout */
      408: unknown
      /** Gone */
      410: unknown
      /** Unsupported media type */
      415: unknown
      /** Too many requests */
      429: unknown
      /** Internal server error */
      500: unknown
      /** Not implemented */
      501: unknown
    }
  }
  getCustomFileType: {
    parameters: {
      path: {
        customFileTypeUid: string
      }
    }
    responses: {
      /** successful operation */
      200: {
        schema: definitions['CustomFileTypeDto']
      }
      /** Bad request */
      400: unknown
      /** Not authorized */
      401: unknown
      /** Forbidden */
      403: unknown
      /** Resource not found */
      404: unknown
      /** Method not allowed */
      405: unknown
      /** Timeout */
      408: unknown
      /** Gone */
      410: unknown
      /** Unsupported media type */
      415: unknown
      /** Too many requests */
      429: unknown
      /** Internal server error */
      500: unknown
      /** Not implemented */
      501: unknown
    }
  }
  updateCustomFileType: {
    parameters: {
      path: {
        customFileTypeUid: string
      }
      body: {
        body?: definitions['UpdateCustomFileTypeDto']
      }
    }
    responses: {
      /** successful operation */
      200: {
        schema: definitions['CustomFileTypeDto']
      }
      /** Bad request */
      400: unknown
      /** Not authorized */
      401: unknown
      /** Forbidden */
      403: unknown
      /** Resource not found */
      404: unknown
      /** Method not allowed */
      405: unknown
      /** Timeout */
      408: unknown
      /** Gone */
      410: unknown
      /** Unsupported media type */
      415: unknown
      /** Too many requests */
      429: unknown
      /** Internal server error */
      500: unknown
      /** Not implemented */
      501: unknown
    }
  }
  deleteCustomFileType: {
    parameters: {
      path: {
        customFileTypeUid: string
      }
    }
    responses: {
      /** Deleted */
      204: never
      /** Bad request */
      400: unknown
      /** Not authorized */
      401: unknown
      /** Forbidden */
      403: unknown
      /** Resource not found */
      404: unknown
      /** Method not allowed */
      405: unknown
      /** Timeout */
      408: unknown
      /** Gone */
      410: unknown
      /** Unsupported media type */
      415: unknown
      /** Too many requests */
      429: unknown
      /** Internal server error */
      500: unknown
      /** Not implemented */
      501: unknown
    }
  }
  /** If no matching custom file type is found it returns status 200 and empty body. */
  findCustomFileType: {
    parameters: {
      query: {
        fileName?: string
      }
    }
    responses: {
      /** successful operation */
      200: {
        schema: definitions['CustomFileTypeDto']
      }
      /** Bad request */
      400: unknown
      /** Not authorized */
      401: unknown
      /** Forbidden */
      403: unknown
      /** Resource not found */
      404: unknown
      /** Method not allowed */
      405: unknown
      /** Timeout */
      408: unknown
      /** Gone */
      410: unknown
      /** Unsupported media type */
      415: unknown
      /** Too many requests */
      429: unknown
      /** Internal server error */
      500: unknown
      /** Not implemented */
      501: unknown
    }
  }
  getDiscountScheme: {
    parameters: {
      path: {
        netRateSchemeUid: string
      }
    }
    responses: {
      /** successful operation */
      200: {
        schema: definitions['NetRateScheme']
      }
      /** Bad request */
      400: unknown
      /** Not authorized */
      401: unknown
      /** Forbidden */
      403: unknown
      /** Resource not found */
      404: unknown
      /** Method not allowed */
      405: unknown
      /** Timeout */
      408: unknown
      /** Gone */
      410: unknown
      /** Unsupported media type */
      415: unknown
      /** Too many requests */
      429: unknown
      /** Internal server error */
      500: unknown
      /** Not implemented */
      501: unknown
    }
  }
  updateDiscountScheme: {
    parameters: {
      body: {
        body?: definitions['NetRateSchemeEdit']
      }
      path: {
        netRateSchemeUid: string
      }
    }
    responses: {
      /** successful operation */
      200: {
        schema: definitions['NetRateScheme']
      }
      /** Bad request */
      400: unknown
      /** Not authorized */
      401: unknown
      /** Forbidden */
      403: unknown
      /** Resource not found */
      404: unknown
      /** Method not allowed */
      405: unknown
      /** Timeout */
      408: unknown
      /** Gone */
      410: unknown
      /** Unsupported media type */
      415: unknown
      /** Too many requests */
      429: unknown
      /** Internal server error */
      500: unknown
      /** Not implemented */
      501: unknown
    }
  }
  getDiscountSchemes: {
    parameters: {
      query: {
        pageNumber?: number
        /** Page size, accepts values between 1 and 50, default 50 */
        pageSize?: number
      }
    }
    responses: {
      /** successful operation */
      200: {
        schema: definitions['PageDtoNetRateSchemeReference']
      }
      /** Bad request */
      400: unknown
      /** Not authorized */
      401: unknown
      /** Forbidden */
      403: unknown
      /** Resource not found */
      404: unknown
      /** Method not allowed */
      405: unknown
      /** Timeout */
      408: unknown
      /** Gone */
      410: unknown
      /** Unsupported media type */
      415: unknown
      /** Too many requests */
      429: unknown
      /** Internal server error */
      500: unknown
      /** Not implemented */
      501: unknown
    }
  }
  createDiscountScheme: {
    parameters: {
      body: {
        body?: definitions['DiscountSchemeCreateDto']
      }
    }
    responses: {
      /** Created */
      201: {
        schema: definitions['NetRateScheme']
      }
      /** Bad request */
      400: unknown
      /** Not authorized */
      401: unknown
      /** Forbidden */
      403: unknown
      /** Resource not found */
      404: unknown
      /** Method not allowed */
      405: unknown
      /** Timeout */
      408: unknown
      /** Gone */
      410: unknown
      /** Unsupported media type */
      415: unknown
      /** Too many requests */
      429: unknown
      /** Internal server error */
      500: unknown
      /** Not implemented */
      501: unknown
    }
  }
  getDiscountSchemeWorkflowStep: {
    parameters: {
      path: {
        netRateSchemeUid: string
        netRateSchemeWorkflowStepId: number
      }
    }
    responses: {
      /** successful operation */
      200: {
        schema: definitions['NetRateSchemeWorkflowStep']
      }
      /** Bad request */
      400: unknown
      /** Not authorized */
      401: unknown
      /** Forbidden */
      403: unknown
      /** Resource not found */
      404: unknown
      /** Method not allowed */
      405: unknown
      /** Timeout */
      408: unknown
      /** Gone */
      410: unknown
      /** Unsupported media type */
      415: unknown
      /** Too many requests */
      429: unknown
      /** Internal server error */
      500: unknown
      /** Not implemented */
      501: unknown
    }
  }
  editDiscountSchemeWorkflowStep: {
    parameters: {
      path: {
        netRateSchemeUid: string
        netRateSchemeWorkflowStepId: number
      }
      body: {
        body?: definitions['NetRateSchemeWorkflowStepEdit']
      }
    }
    responses: {
      /** successful operation */
      200: {
        schema: definitions['NetRateSchemeWorkflowStep']
      }
      /** Bad request */
      400: unknown
      /** Not authorized */
      401: unknown
      /** Forbidden */
      403: unknown
      /** Resource not found */
      404: unknown
      /** Method not allowed */
      405: unknown
      /** Timeout */
      408: unknown
      /** Gone */
      410: unknown
      /** Unsupported media type */
      415: unknown
      /** Too many requests */
      429: unknown
      /** Internal server error */
      500: unknown
      /** Not implemented */
      501: unknown
    }
  }
  getDiscountSchemeWorkflowSteps: {
    parameters: {
      path: {
        netRateSchemeUid: string
      }
      query: {
        pageNumber?: number
        /** Page size, accepts values between 1 and 50, default 50 */
        pageSize?: number
      }
    }
    responses: {
      /** successful operation */
      200: {
        schema: definitions['PageDtoNetRateSchemeWorkflowStepReference']
      }
      /** Bad request */
      400: unknown
      /** Not authorized */
      401: unknown
      /** Forbidden */
      403: unknown
      /** Resource not found */
      404: unknown
      /** Method not allowed */
      405: unknown
      /** Timeout */
      408: unknown
      /** Gone */
      410: unknown
      /** Unsupported media type */
      415: unknown
      /** Too many requests */
      429: unknown
      /** Internal server error */
      500: unknown
      /** Not implemented */
      501: unknown
    }
  }
  getDomain: {
    parameters: {
      path: {
        domainUid: string
      }
    }
    responses: {
      /** successful operation */
      200: {
        schema: definitions['DomainDto']
      }
      /** Bad request */
      400: unknown
      /** Not authorized */
      401: unknown
      /** Forbidden */
      403: unknown
      /** Resource not found */
      404: unknown
      /** Method not allowed */
      405: unknown
      /** Timeout */
      408: unknown
      /** Gone */
      410: unknown
      /** Unsupported media type */
      415: unknown
      /** Too many requests */
      429: unknown
      /** Internal server error */
      500: unknown
      /** Not implemented */
      501: unknown
    }
  }
  updateDomain: {
    parameters: {
      path: {
        domainUid: string
      }
      body: {
        body?: definitions['DomainEditDto']
      }
    }
    responses: {
      /** successful operation */
      200: {
        schema: definitions['DomainDto']
      }
      /** Bad request */
      400: unknown
      /** Not authorized */
      401: unknown
      /** Forbidden */
      403: unknown
      /** Resource not found */
      404: unknown
      /** Method not allowed */
      405: unknown
      /** Timeout */
      408: unknown
      /** Gone */
      410: unknown
      /** Unsupported media type */
      415: unknown
      /** Too many requests */
      429: unknown
      /** Internal server error */
      500: unknown
      /** Not implemented */
      501: unknown
    }
  }
  deleteDomain: {
    parameters: {
      path: {
        domainUid: string
      }
    }
    responses: {
      /** No Content */
      204: never
      /** Bad request */
      400: unknown
      /** Not authorized */
      401: unknown
      /** Forbidden */
      403: unknown
      /** Resource not found */
      404: unknown
      /** Method not allowed */
      405: unknown
      /** Timeout */
      408: unknown
      /** Gone */
      410: unknown
      /** Unsupported media type */
      415: unknown
      /** Too many requests */
      429: unknown
      /** Internal server error */
      500: unknown
      /** Not implemented */
      501: unknown
    }
  }
  listDomains: {
    parameters: {
      query: {
        name?: string
        /** Uid of user */
        createdBy?: string
        sort?: 'NAME' | 'DATE_CREATED'
        order?: 'ASC' | 'DESC'
        /** Page number, starting with 0, default 0 */
        pageNumber?: number
        /** Page size, accepts values between 1 and 50, default 50 */
        pageSize?: number
      }
    }
    responses: {
      /** successful operation */
      200: {
        schema: definitions['PageDtoDomainDto']
      }
      /** Bad request */
      400: unknown
      /** Not authorized */
      401: unknown
      /** Forbidden */
      403: unknown
      /** Resource not found */
      404: unknown
      /** Method not allowed */
      405: unknown
      /** Timeout */
      408: unknown
      /** Gone */
      410: unknown
      /** Unsupported media type */
      415: unknown
      /** Too many requests */
      429: unknown
      /** Internal server error */
      500: unknown
      /** Not implemented */
      501: unknown
    }
  }
  createDomain: {
    parameters: {
      body: {
        body?: definitions['DomainEditDto']
      }
    }
    responses: {
      /** Created */
      201: {
        schema: definitions['DomainDto']
      }
      /** Bad request */
      400: unknown
      /** Not authorized */
      401: unknown
      /** Forbidden */
      403: unknown
      /** Resource not found */
      404: unknown
      /** Method not allowed */
      405: unknown
      /** Timeout */
      408: unknown
      /** Gone */
      410: unknown
      /** Unsupported media type */
      415: unknown
      /** Too many requests */
      429: unknown
      /** Internal server error */
      500: unknown
      /** Not implemented */
      501: unknown
    }
  }
  getOrgEmailTemplate: {
    parameters: {
      path: {
        templateUid: string
      }
    }
    responses: {
      /** successful operation */
      200: {
        schema: definitions['OrganizationEmailTemplateDto']
      }
      /** Bad request */
      400: unknown
      /** Not authorized */
      401: unknown
      /** Forbidden */
      403: unknown
      /** Resource not found */
      404: unknown
      /** Method not allowed */
      405: unknown
      /** Timeout */
      408: unknown
      /** Gone */
      410: unknown
      /** Unsupported media type */
      415: unknown
      /** Too many requests */
      429: unknown
      /** Internal server error */
      500: unknown
      /** Not implemented */
      501: unknown
    }
  }
  listOrgEmailTemplates: {
    parameters: {
      query: {
        type?: string
        /** Page number, starting with 0, default 0 */
        pageNumber?: number
        /** Page size, accepts values between 1 and 50, default 50 */
        pageSize?: number
      }
    }
    responses: {
      /** successful operation */
      200: {
        schema: definitions['PageDtoOrganizationEmailTemplateDto']
      }
      /** Bad request */
      400: unknown
      /** Not authorized */
      401: unknown
      /** Forbidden */
      403: unknown
      /** Resource not found */
      404: unknown
      /** Method not allowed */
      405: unknown
      /** Timeout */
      408: unknown
      /** Gone */
      410: unknown
      /** Unsupported media type */
      415: unknown
      /** Too many requests */
      429: unknown
      /** Internal server error */
      500: unknown
      /** Not implemented */
      501: unknown
    }
  }
  /**
   * For downloading multiple files as ZIP file provide multiple IDs in query parameters.
   * * For example `?jobUid={id1}&jobUid={id2}`
   * * When no files matched given IDs error 404 is returned, otherwise ZIP file will include those that were found
   */
  getHandoverFiles: {
    parameters: {
      path: {
        projectUid: string
      }
      query: {
        /** JobPart Id of requested handover file */
        jobUid?: string[]
      }
    }
    responses: {
      /** File / Archive with file handovers */
      200: unknown
      /** Bad request */
      400: unknown
      /** Not authorized */
      401: unknown
      /** Forbidden */
      403: unknown
      /** Resource not found */
      404: unknown
      /** Method not allowed */
      405: unknown
      /** Timeout */
      408: unknown
      /** Gone */
      410: unknown
      /** Unsupported media type */
      415: unknown
      /** Too many requests */
      429: unknown
      /** Internal server error */
      500: unknown
      /** Not implemented */
      501: unknown
    }
  }
  /**
   * For following jobs the handover file is not supported:
   * * Continuous jobs
   * * Jobs from connectors
   * * Split jobs
   * * Multilingual jobs
   */
  uploadHandoverFile: {
    parameters: {
      path: {
        projectUid: string
      }
      header: {
        Memsource: string
        /** must match pattern `((inline|attachment); )?(filename\*=UTF-8''(.+)|filename="?(.+)"?)` */
        'Content-Disposition': string
        'Content-Length'?: number
      }
      body: {
        body?: definitions['InputStream']
      }
    }
    responses: {
      /** successful operation */
      200: {
        schema: definitions['FileHandoverDto']
      }
      /** Bad request */
      400: unknown
      /** Not authorized */
      401: unknown
      /** Forbidden */
      403: unknown
      /** Resource not found */
      404: unknown
      /** Method not allowed */
      405: unknown
      /** Timeout */
      408: unknown
      /** Gone */
      410: unknown
      /** Unsupported media type */
      415: unknown
      /** Too many requests */
      429: unknown
      /** Internal server error */
      500: unknown
      /** Not implemented */
      501: unknown
    }
  }
  deleteHandoverFile: {
    parameters: {
      path: {
        projectUid: string
      }
      body: {
        body?: definitions['JobPartReferences']
      }
    }
    responses: {
      /** Deleted */
      204: never
      /** Bad request */
      400: unknown
      /** Not authorized */
      401: unknown
      /** Forbidden */
      403: unknown
      /** Resource not found */
      404: unknown
      /** Method not allowed */
      405: unknown
      /** Timeout */
      408: unknown
      /** Gone */
      410: unknown
      /** Unsupported media type */
      415: unknown
      /** Too many requests */
      429: unknown
      /** Internal server error */
      500: unknown
      /** Not implemented */
      501: unknown
    }
  }
  getFiles: {
    parameters: {
      query: {
        /** Page number, starting with 0, default 0 */
        pageNumber?: number
        /** Page size, accepts values between 1 and 50, default 50 */
        pageSize?: number
        name?: string
        types?: string[]
        createdBy?: number
        /** Size in bytes */
        biggerThan?: number
      }
    }
    responses: {
      /** successful operation */
      200: {
        schema: definitions['PageDtoUploadedFileDto']
      }
      /** Bad request */
      400: unknown
      /** Not authorized */
      401: unknown
      /** Forbidden */
      403: unknown
      /** Resource not found */
      404: unknown
      /** Method not allowed */
      405: unknown
      /** Timeout */
      408: unknown
      /** Gone */
      410: unknown
      /** Unsupported media type */
      415: unknown
      /** Too many requests */
      429: unknown
      /** Internal server error */
      500: unknown
      /** Not implemented */
      501: unknown
    }
  }
  /** Accepts multipart/form-data, application/octet-stream or application/json. */
  createUrlFile: {
    parameters: {
      body: {
        /** file */
        body: definitions['RemoteUploadedFileDto']
      }
      header: {
        /** must match pattern `((inline|attachment); )?filename\*=UTF-8''(.+)` */
        'Content-Disposition': string
      }
    }
    responses: {
      /** Created */
      201: {
        schema: definitions['UploadedFileDto']
      }
      /** Bad request */
      400: unknown
      /** Not authorized */
      401: unknown
      /** Forbidden */
      403: unknown
      /** Resource not found */
      404: unknown
      /** Method not allowed */
      405: unknown
      /** Timeout */
      408: unknown
      /** Gone */
      410: unknown
      /** Unsupported media type */
      415: unknown
      /** Too many requests */
      429: unknown
      /** Internal server error */
      500: unknown
      /** Not implemented */
      501: unknown
    }
  }
  /** Get uploaded file as <b>octet-stream</b> or as <b>json</b> based on 'Accept' header */
  getFileJson: {
    parameters: {
      path: {
        fileUid: string
      }
    }
    responses: {
      /** successful operation */
      200: {
        schema: definitions['UploadedFileDto']
      }
      /** Bad request */
      400: unknown
      /** Not authorized */
      401: unknown
      /** Forbidden */
      403: unknown
      /** Resource not found */
      404: unknown
      /** Method not allowed */
      405: unknown
      /** Timeout */
      408: unknown
      /** Gone */
      410: unknown
      /** Unsupported media type */
      415: unknown
      /** Too many requests */
      429: unknown
      /** Internal server error */
      500: unknown
      /** Not implemented */
      501: unknown
    }
  }
  deletesFile: {
    parameters: {
      path: {
        fileUid: string
      }
    }
    responses: {
      /** No Content */
      204: never
      /** Bad request */
      400: unknown
      /** Not authorized */
      401: unknown
      /** Forbidden */
      403: unknown
      /** Resource not found */
      404: unknown
      /** Method not allowed */
      405: unknown
      /** Timeout */
      408: unknown
      /** Gone */
      410: unknown
      /** Unsupported media type */
      415: unknown
      /** Too many requests */
      429: unknown
      /** Internal server error */
      500: unknown
      /** Not implemented */
      501: unknown
    }
  }
  getGlossary: {
    parameters: {
      path: {
        glossaryUid: string
      }
    }
    responses: {
      /** successful operation */
      200: {
        schema: definitions['GlossaryDto']
      }
      /** Bad request */
      400: unknown
      /** Not authorized */
      401: unknown
      /** Forbidden */
      403: unknown
      /** Resource not found */
      404: unknown
      /** Method not allowed */
      405: unknown
      /** Timeout */
      408: unknown
      /** Gone */
      410: unknown
      /** Unsupported media type */
      415: unknown
      /** Too many requests */
      429: unknown
      /** Internal server error */
      500: unknown
      /** Not implemented */
      501: unknown
    }
  }
  /** Languages can only be added, their removal is not supported */
  updateGlossary: {
    parameters: {
      path: {
        glossaryUid: string
      }
      body: {
        body?: definitions['GlossaryEditDto']
      }
    }
    responses: {
      /** successful operation */
      200: {
        schema: definitions['GlossaryDto']
      }
      /** Bad request */
      400: unknown
      /** Not authorized */
      401: unknown
      /** Forbidden */
      403: unknown
      /** Resource not found */
      404: unknown
      /** Method not allowed */
      405: unknown
      /** Timeout */
      408: unknown
      /** Gone */
      410: unknown
      /** Unsupported media type */
      415: unknown
      /** Too many requests */
      429: unknown
      /** Internal server error */
      500: unknown
      /** Not implemented */
      501: unknown
    }
  }
  deleteGlossary: {
    parameters: {
      path: {
        glossaryUid: string
      }
      query: {
        /**
         * purge=false - the Glossary can later be restored,
         *                     'purge=true - the Glossary is completely deleted and cannot be restored
         */
        purge?: boolean
      }
    }
    responses: {
      /** No Content */
      204: never
      /** Bad request */
      400: unknown
      /** Not authorized */
      401: unknown
      /** Forbidden */
      403: unknown
      /** Resource not found */
      404: unknown
      /** Method not allowed */
      405: unknown
      /** Timeout */
      408: unknown
      /** Gone */
      410: unknown
      /** Unsupported media type */
      415: unknown
      /** Too many requests */
      429: unknown
      /** Internal server error */
      500: unknown
      /** Not implemented */
      501: unknown
    }
  }
  listGlossaries: {
    parameters: {
      query: {
        name?: string
        /** Language of the glossary */
        lang?: string[]
        /** Page number, starting with 0, default 0 */
        pageNumber?: number
        /** Page size, accepts values between 1 and 50, default 50 */
        pageSize?: number
      }
    }
    responses: {
      /** successful operation */
      200: {
        schema: definitions['PageDtoGlossaryDto']
      }
      /** Bad request */
      400: unknown
      /** Not authorized */
      401: unknown
      /** Forbidden */
      403: unknown
      /** Resource not found */
      404: unknown
      /** Method not allowed */
      405: unknown
      /** Timeout */
      408: unknown
      /** Gone */
      410: unknown
      /** Unsupported media type */
      415: unknown
      /** Too many requests */
      429: unknown
      /** Internal server error */
      500: unknown
      /** Not implemented */
      501: unknown
    }
  }
  createGlossary: {
    parameters: {
      body: {
        body?: definitions['GlossaryEditDto']
      }
    }
    responses: {
      /** Created */
      200: {
        schema: definitions['GlossaryDto']
      }
      /** Bad request */
      400: unknown
      /** Not authorized */
      401: unknown
      /** Forbidden */
      403: unknown
      /** Resource not found */
      404: unknown
      /** Method not allowed */
      405: unknown
      /** Timeout */
      408: unknown
      /** Gone */
      410: unknown
      /** Unsupported media type */
      415: unknown
      /** Too many requests */
      429: unknown
      /** Internal server error */
      500: unknown
      /** Not implemented */
      501: unknown
    }
  }
  activateGlossary: {
    parameters: {
      path: {
        glossaryUid: string
      }
      body: {
        body?: definitions['GlossaryActivationDto']
      }
    }
    responses: {
      /** successful operation */
      200: {
        schema: definitions['GlossaryDto']
      }
      /** Bad request */
      400: unknown
      /** Not authorized */
      401: unknown
      /** Forbidden */
      403: unknown
      /** Resource not found */
      404: unknown
      /** Method not allowed */
      405: unknown
      /** Timeout */
      408: unknown
      /** Gone */
      410: unknown
      /** Unsupported media type */
      415: unknown
      /** Too many requests */
      429: unknown
      /** Internal server error */
      500: unknown
      /** Not implemented */
      501: unknown
    }
  }
  /**
   * Returns at most <i>maxSegments</i>
   *             records with <i>score >= scoreThreshold</i> and at most <i>maxSubsegments</i> records which are subsegment,
   *             i.e. the source text is substring of the query text.
   */
  searchSegmentByJob: {
    parameters: {
      path: {
        projectUid: string
        jobUid: string
      }
      body: {
        body?: definitions['SearchTMByJobRequestDto']
      }
    }
    responses: {
      /** successful operation */
      200: {
        schema: definitions['SearchResponseListTmDto']
      }
      /** Bad request */
      400: unknown
      /** Not authorized */
      401: unknown
      /** Forbidden */
      403: unknown
      /** Resource not found */
      404: unknown
      /** Method not allowed */
      405: unknown
      /** Timeout */
      408: unknown
      /** Gone */
      410: unknown
      /** Unsupported media type */
      415: unknown
      /** Too many requests */
      429: unknown
      /** Internal server error */
      500: unknown
      /** Not implemented */
      501: unknown
    }
  }
  deleteLQAComment: {
    parameters: {
      path: {
        jobUid: string
        conversationId: string
        commentId: string
      }
    }
    responses: {
      /** No Content */
      204: never
      /** Bad request */
      400: unknown
      /** Not authorized */
      401: unknown
      /** Forbidden */
      403: unknown
      /** Resource not found */
      404: unknown
      /** Method not allowed */
      405: unknown
      /** Timeout */
      408: unknown
      /** Gone */
      410: unknown
      /** Unsupported media type */
      415: unknown
      /** Too many requests */
      429: unknown
      /** Internal server error */
      500: unknown
      /** Not implemented */
      501: unknown
    }
  }
  getLQAConversation: {
    parameters: {
      path: {
        jobUid: string
        conversationId: string
      }
    }
    responses: {
      /** successful operation */
      200: {
        schema: definitions['LQAConversationDto']
      }
      /** Bad request */
      400: unknown
      /** Not authorized */
      401: unknown
      /** Forbidden */
      403: unknown
      /** Resource not found */
      404: unknown
      /** Method not allowed */
      405: unknown
      /** Timeout */
      408: unknown
      /** Gone */
      410: unknown
      /** Unsupported media type */
      415: unknown
      /** Too many requests */
      429: unknown
      /** Internal server error */
      500: unknown
      /** Not implemented */
      501: unknown
    }
  }
  deleteLQAConversation: {
    parameters: {
      path: {
        jobUid: string
        conversationId: string
      }
    }
    responses: {
      /** No Content */
      204: never
      /** Bad request */
      400: unknown
      /** Not authorized */
      401: unknown
      /** Forbidden */
      403: unknown
      /** Resource not found */
      404: unknown
      /** Method not allowed */
      405: unknown
      /** Timeout */
      408: unknown
      /** Gone */
      410: unknown
      /** Unsupported media type */
      415: unknown
      /** Too many requests */
      429: unknown
      /** Internal server error */
      500: unknown
      /** Not implemented */
      501: unknown
    }
  }
  listLQAConversations: {
    parameters: {
      path: {
        jobUid: string
      }
      query: {
        includeDeleted?: boolean
        since?: string
      }
    }
    responses: {
      /** successful operation */
      200: {
        schema: definitions['LQAConversationsListDto']
      }
      /** Bad request */
      400: unknown
      /** Not authorized */
      401: unknown
      /** Forbidden */
      403: unknown
      /** Resource not found */
      404: unknown
      /** Method not allowed */
      405: unknown
      /** Timeout */
      408: unknown
      /** Gone */
      410: unknown
      /** Unsupported media type */
      415: unknown
      /** Too many requests */
      429: unknown
      /** Internal server error */
      500: unknown
      /** Not implemented */
      501: unknown
    }
  }
  listOfLanguages: {
    parameters: {
      query: {
        active?: boolean
      }
    }
    responses: {
      /** successful operation */
      200: {
        schema: definitions['LanguageListDto']
      }
      /** Bad request */
      400: unknown
      /** Not authorized */
      401: unknown
      /** Forbidden */
      403: unknown
      /** Resource not found */
      404: unknown
      /** Method not allowed */
      405: unknown
      /** Timeout */
      408: unknown
      /** Gone */
      410: unknown
      /** Unsupported media type */
      415: unknown
      /** Too many requests */
      429: unknown
      /** Internal server error */
      500: unknown
      /** Not implemented */
      501: unknown
    }
  }
  /**
   * Returns a single xlsx report or ZIP archive with multiple reports.
   * If any given jobPart is not from LQA workflow step, reports from successive workflow steps may be returned
   * If none were found returns 404 error, otherwise returns those that were found.
   */
  downloadLqaReports: {
    parameters: {
      query: {
        /** Comma separated list of JobPart UIDs, between 1 and 100 UIDs */
        jobParts: string
      }
    }
    responses: {
      /** application/octet-stream */
      200: unknown
      /** Invalid request */
      400: unknown
      /** Not authorized */
      401: unknown
      /** Forbidden */
      403: unknown
      /** No reports found */
      404: unknown
      /** Method not allowed */
      405: unknown
      /** Timeout */
      408: unknown
      /** Gone */
      410: unknown
      /** Unsupported media type */
      415: unknown
      /** Too many requests */
      429: unknown
      /** Internal server error */
      500: unknown
      /** Not implemented */
      501: unknown
    }
  }
  getLqaProfiles: {
    parameters: {
      query: {
        /** Name of LQA profiles, it is used for filter the list by name */
        name?: string
        /** It is used for filter the list by who created the profile */
        createdBy?: string
        /** It is used for filter the list by date created */
        dateCreated?: string
        /** Page number, starting with 0, default 0 */
        pageNumber?: number
        /** Page size, accepts values between 1 and 50, default 20 */
        pageSize?: number
        sort?: ('NAME' | 'CREATED_BY' | 'DATE_CREATED')[]
        order?: ('ASC' | 'DESC')[]
      }
    }
    responses: {
      /** successful operation */
      200: {
        schema: definitions['PageDtoLqaProfileReferenceDto']
      }
      /** Bad request */
      400: unknown
      /** Not authorized */
      401: unknown
      /** Forbidden */
      403: unknown
      /** Resource not found */
      404: unknown
      /** Method not allowed */
      405: unknown
      /** Timeout */
      408: unknown
      /** Gone */
      410: unknown
      /** Unsupported media type */
      415: unknown
      /** Too many requests */
      429: unknown
      /** Internal server error */
      500: unknown
      /** Not implemented */
      501: unknown
    }
  }
  createLqaProfile: {
    parameters: {
      body: {
        body?: definitions['CreateLqaProfileDto']
      }
    }
    responses: {
      /** Created */
      201: {
        schema: definitions['LqaProfileDetailDto']
      }
      /** Bad request */
      400: unknown
      /** Not authorized */
      401: unknown
      /** Forbidden */
      403: unknown
      /** Resource not found */
      404: unknown
      /** Method not allowed */
      405: unknown
      /** Timeout */
      408: unknown
      /** Gone */
      410: unknown
      /** Unsupported media type */
      415: unknown
      /** Too many requests */
      429: unknown
      /** Internal server error */
      500: unknown
      /** Not implemented */
      501: unknown
    }
  }
  getLqaProfile: {
    parameters: {
      path: {
        profileUid: string
      }
    }
    responses: {
      /** successful operation */
      200: {
        schema: definitions['LqaProfileDetailDto']
      }
      /** Bad request */
      400: unknown
      /** Not authorized */
      401: unknown
      /** Forbidden */
      403: unknown
      /** Resource not found */
      404: unknown
      /** Method not allowed */
      405: unknown
      /** Timeout */
      408: unknown
      /** Gone */
      410: unknown
      /** Unsupported media type */
      415: unknown
      /** Too many requests */
      429: unknown
      /** Internal server error */
      500: unknown
      /** Not implemented */
      501: unknown
    }
  }
  updateLqaProfile: {
    parameters: {
      path: {
        profileUid: string
      }
      body: {
        body?: definitions['UpdateLqaProfileDto']
      }
    }
    responses: {
      /** successful operation */
      200: {
        schema: definitions['LqaProfileDetailDto']
      }
      /** Bad request */
      400: unknown
      /** Not authorized */
      401: unknown
      /** Forbidden */
      403: unknown
      /** Resource not found */
      404: unknown
      /** Method not allowed */
      405: unknown
      /** Timeout */
      408: unknown
      /** Gone */
      410: unknown
      /** Unsupported media type */
      415: unknown
      /** Too many requests */
      429: unknown
      /** Internal server error */
      500: unknown
      /** Not implemented */
      501: unknown
    }
  }
  deleteLqaProfile: {
    parameters: {
      path: {
        profileUid: string
      }
    }
    responses: {
      /** Deleted */
      204: never
      /** Bad request */
      400: unknown
      /** Not authorized */
      401: unknown
      /** Forbidden */
      403: unknown
      /** Resource not found */
      404: unknown
      /** Method not allowed */
      405: unknown
      /** Timeout */
      408: unknown
      /** Gone */
      410: unknown
      /** Unsupported media type */
      415: unknown
      /** Too many requests */
      429: unknown
      /** Internal server error */
      500: unknown
      /** Not implemented */
      501: unknown
    }
  }
  getLqaProfileDefaultValues: {
    parameters: {}
    responses: {
      /** successful operation */
      200: {
        schema: definitions['LqaProfileDetailDto']
      }
      /** Bad request */
      400: unknown
      /** Not authorized */
      401: unknown
      /** Forbidden */
      403: unknown
      /** Resource not found */
      404: unknown
      /** Method not allowed */
      405: unknown
      /** Timeout */
      408: unknown
      /** Gone */
      410: unknown
      /** Unsupported media type */
      415: unknown
      /** Too many requests */
      429: unknown
      /** Internal server error */
      500: unknown
      /** Not implemented */
      501: unknown
    }
  }
  makeDefault: {
    parameters: {
      path: {
        profileUid: string
      }
    }
    responses: {
      /** successful operation */
      200: {
        schema: definitions['LqaProfileReferenceDto']
      }
      /** Bad request */
      400: unknown
      /** Not authorized */
      401: unknown
      /** Forbidden */
      403: unknown
      /** Resource not found */
      404: unknown
      /** Method not allowed */
      405: unknown
      /** Timeout */
      408: unknown
      /** Gone */
      410: unknown
      /** Unsupported media type */
      415: unknown
      /** Too many requests */
      429: unknown
      /** Internal server error */
      500: unknown
      /** Not implemented */
      501: unknown
    }
  }
  duplicateProfile: {
    parameters: {
      path: {
        profileUid: string
      }
    }
    responses: {
      /** successful operation */
      200: {
        schema: definitions['LqaProfileReferenceDto']
      }
      /** Bad request */
      400: unknown
      /** Not authorized */
      401: unknown
      /** Forbidden */
      403: unknown
      /** Resource not found */
      404: unknown
      /** Method not allowed */
      405: unknown
      /** Timeout */
      408: unknown
      /** Gone */
      410: unknown
      /** Unsupported media type */
      415: unknown
      /** Too many requests */
      429: unknown
      /** Internal server error */
      500: unknown
      /** Not implemented */
      501: unknown
    }
  }
  getLqaProfileAuthors: {
    parameters: {}
    responses: {
      /** successful operation */
      200: {
        schema: definitions['UserReference'][]
      }
      /** Bad request */
      400: unknown
      /** Not authorized */
      401: unknown
      /** Forbidden */
      403: unknown
      /** Resource not found */
      404: unknown
      /** Method not allowed */
      405: unknown
      /** Timeout */
      408: unknown
      /** Gone */
      410: unknown
      /** Unsupported media type */
      415: unknown
      /** Too many requests */
      429: unknown
      /** Internal server error */
      500: unknown
      /** Not implemented */
      501: unknown
    }
  }
  getStatus: {
    parameters: {
      path: {
        mtsUid: string
      }
    }
    responses: {
      /** successful operation */
      200: {
        schema: definitions['MachineTranslateStatusDto']
      }
      /** Bad request */
      400: unknown
      /** Not authorized */
      401: unknown
      /** Forbidden */
      403: unknown
      /** Resource not found */
      404: unknown
      /** Method not allowed */
      405: unknown
      /** Timeout */
      408: unknown
      /** Gone */
      410: unknown
      /** Unsupported media type */
      415: unknown
      /** Too many requests */
      429: unknown
      /** Internal server error */
      500: unknown
      /** Not implemented */
      501: unknown
    }
  }
  getList: {
    parameters: {
      query: {
        name?: string
        /** Page number, starting with 0, default 0 */
        pageNumber?: number
        /** Page size, accepts values between 1 and 50, default 50 */
        pageSize?: number
        /** Sorting field */
        sort?: 'NAME'
        order?: string
      }
    }
    responses: {
      /** successful operation */
      200: {
        schema: definitions['PageDtoMachineTranslateSettingsPbmDto']
      }
      /** Bad request */
      400: unknown
      /** Not authorized */
      401: unknown
      /** Forbidden */
      403: unknown
      /** Resource not found */
      404: unknown
      /** Method not allowed */
      405: unknown
      /** Timeout */
      408: unknown
      /** Gone */
      410: unknown
      /** Unsupported media type */
      415: unknown
      /** Too many requests */
      429: unknown
      /** Internal server error */
      500: unknown
      /** Not implemented */
      501: unknown
    }
  }
  getMTSettings: {
    parameters: {
      path: {
        mtsUid: string
      }
    }
    responses: {
      /** successful operation */
      200: {
        schema: definitions['MachineTranslateSettingsPbmDto']
      }
      /** Bad request */
      400: unknown
      /** Not authorized */
      401: unknown
      /** Forbidden */
      403: unknown
      /** Resource not found */
      404: unknown
      /** Method not allowed */
      405: unknown
      /** Timeout */
      408: unknown
      /** Gone */
      410: unknown
      /** Unsupported media type */
      415: unknown
      /** Too many requests */
      429: unknown
      /** Internal server error */
      500: unknown
      /** Not implemented */
      501: unknown
    }
  }
  getThirdPartyEnginesList: {
    parameters: {
      query: {
        name?: string
        /** Page number, starting with 0, default 0 */
        pageNumber?: number
        /** Page size, accepts values between 1 and 50, default 50 */
        pageSize?: number
        /** Sorting field */
        sort?: 'NAME'
        order?: string
      }
    }
    responses: {
      /** successful operation */
      200: {
        schema: definitions['PageDtoMachineTranslateSettingsPbmDto']
      }
      /** Bad request */
      400: unknown
      /** Not authorized */
      401: unknown
      /** Forbidden */
      403: unknown
      /** Resource not found */
      404: unknown
      /** Method not allowed */
      405: unknown
      /** Timeout */
      408: unknown
      /** Gone */
      410: unknown
      /** Unsupported media type */
      415: unknown
      /** Too many requests */
      429: unknown
      /** Internal server error */
      500: unknown
      /** Not implemented */
      501: unknown
    }
  }
  getMTTypes: {
    parameters: {}
    responses: {
      /** successful operation */
      200: {
        schema: definitions['TypesDto']
      }
      /** Bad request */
      400: unknown
      /** Not authorized */
      401: unknown
      /** Forbidden */
      403: unknown
      /** Resource not found */
      404: unknown
      /** Method not allowed */
      405: unknown
      /** Timeout */
      408: unknown
      /** Gone */
      410: unknown
      /** Unsupported media type */
      415: unknown
      /** Too many requests */
      429: unknown
      /** Internal server error */
      500: unknown
      /** Not implemented */
      501: unknown
    }
  }
  machineTranslation: {
    parameters: {
      path: {
        mtSettingsUid: string
      }
      body: {
        body?: definitions['TranslationRequestExtendedDto']
      }
    }
    responses: {
      /** successful operation */
      200: {
        schema: definitions['MachineTranslateResponse']
      }
      /** Bad request */
      400: unknown
      /** Not authorized */
      401: unknown
      /** Forbidden */
      403: unknown
      /** Resource not found */
      404: unknown
      /** Method not allowed */
      405: unknown
      /** Timeout */
      408: unknown
      /** Gone */
      410: unknown
      /** Unsupported media type */
      415: unknown
      /** Too many requests */
      429: unknown
      /** Internal server error */
      500: unknown
      /** Not implemented */
      501: unknown
    }
  }
  getMappingForTask: {
    parameters: {
      path: {
        id: string
      }
      query: {
        workflowLevel?: number
      }
    }
    responses: {
      /** successful operation */
      200: {
        schema: definitions['TaskMappingDto']
      }
      /** Bad request */
      400: unknown
      /** Not authorized */
      401: unknown
      /** Forbidden */
      403: unknown
      /** Resource not found */
      404: unknown
      /** Method not allowed */
      405: unknown
      /** Timeout */
      408: unknown
      /** Gone */
      410: unknown
      /** Unsupported media type */
      415: unknown
      /** Too many requests */
      429: unknown
      /** Internal server error */
      500: unknown
      /** Not implemented */
      501: unknown
    }
  }
  getImportSettings: {
    parameters: {}
    responses: {
      /** successful operation */
      200: {
        schema: definitions['ImportSettingsDto']
      }
      /** Bad request */
      400: unknown
      /** Not authorized */
      401: unknown
      /** Forbidden */
      403: unknown
      /** Resource not found */
      404: unknown
      /** Method not allowed */
      405: unknown
      /** Timeout */
      408: unknown
      /** Gone */
      410: unknown
      /** Unsupported media type */
      415: unknown
      /** Too many requests */
      429: unknown
      /** Internal server error */
      500: unknown
      /** Not implemented */
      501: unknown
    }
  }
  getImportSettings_1: {
    parameters: {
      path: {
        uid: string
      }
    }
    responses: {
      /** successful operation */
      200: {
        schema: definitions['ImportSettingsDto']
      }
      /** Bad request */
      400: unknown
      /** Not authorized */
      401: unknown
      /** Forbidden */
      403: unknown
      /** Resource not found */
      404: unknown
      /** Method not allowed */
      405: unknown
      /** Timeout */
      408: unknown
      /** Gone */
      410: unknown
      /** Unsupported media type */
      415: unknown
      /** Too many requests */
      429: unknown
      /** Internal server error */
      500: unknown
      /** Not implemented */
      501: unknown
    }
  }
  deleteImportSettings: {
    parameters: {
      path: {
        uid: string
      }
    }
    responses: {
      /** No Content */
      204: never
      /** Bad request */
      400: unknown
      /** Not authorized */
      401: unknown
      /** Forbidden */
      403: unknown
      /** Resource not found */
      404: unknown
      /** Method not allowed */
      405: unknown
      /** Timeout */
      408: unknown
      /** Gone */
      410: unknown
      /** Unsupported media type */
      415: unknown
      /** Too many requests */
      429: unknown
      /** Internal server error */
      500: unknown
      /** Not implemented */
      501: unknown
    }
  }
  listImportSettings: {
    parameters: {
      query: {
        name?: string
        /** Page number, starting with 0, default 0 */
        pageNumber?: number
        /** Page size, accepts values between 1 and 50, default 50 */
        pageSize?: number
      }
    }
    responses: {
      /** successful operation */
      200: {
        schema: definitions['PageDtoImportSettingsReference']
      }
      /** Bad request */
      400: unknown
      /** Not authorized */
      401: unknown
      /** Forbidden */
      403: unknown
      /** Resource not found */
      404: unknown
      /** Method not allowed */
      405: unknown
      /** Timeout */
      408: unknown
      /** Gone */
      410: unknown
      /** Unsupported media type */
      415: unknown
      /** Too many requests */
      429: unknown
      /** Internal server error */
      500: unknown
      /** Not implemented */
      501: unknown
    }
  }
  editImportSettings: {
    parameters: {
      body: {
        body?: definitions['ImportSettingsEditDto']
      }
    }
    responses: {
      /** successful operation */
      200: {
        schema: definitions['ImportSettingsDto']
      }
      /** Bad request */
      400: unknown
      /** Not authorized */
      401: unknown
      /** Forbidden */
      403: unknown
      /** Resource not found */
      404: unknown
      /** Method not allowed */
      405: unknown
      /** Timeout */
      408: unknown
      /** Gone */
      410: unknown
      /** Unsupported media type */
      415: unknown
      /** Too many requests */
      429: unknown
      /** Internal server error */
      500: unknown
      /** Not implemented */
      501: unknown
    }
  }
  /**
   * Pre-defined import settings is handy for [Create Job](#operation/createJob).
   *                   See [supported file types](https://wiki.memsource.com/wiki/API_File_Type_List)
   */
  createImportSettings: {
    parameters: {
      body: {
        body?: definitions['ImportSettingsCreateDto']
      }
    }
    responses: {
      /** Created */
      201: {
        schema: definitions['ImportSettingsDto']
      }
      /** Bad request */
      400: unknown
      /** Not authorized */
      401: unknown
      /** Forbidden */
      403: unknown
      /** Resource not found */
      404: unknown
      /** Method not allowed */
      405: unknown
      /** Timeout */
      408: unknown
      /** Gone */
      410: unknown
      /** Unsupported media type */
      415: unknown
      /** Too many requests */
      429: unknown
      /** Internal server error */
      500: unknown
      /** Not implemented */
      501: unknown
    }
  }
  getPlainConversation: {
    parameters: {
      path: {
        jobUid: string
        conversationId: string
      }
    }
    responses: {
      /** successful operation */
      200: {
        schema: definitions['PlainConversationDto']
      }
      /** Bad request */
      400: unknown
      /** Not authorized */
      401: unknown
      /** Forbidden */
      403: unknown
      /** Resource not found */
      404: unknown
      /** Method not allowed */
      405: unknown
      /** Timeout */
      408: unknown
      /** Gone */
      410: unknown
      /** Unsupported media type */
      415: unknown
      /** Too many requests */
      429: unknown
      /** Internal server error */
      500: unknown
      /** Not implemented */
      501: unknown
    }
  }
  updatePlainConversation: {
    parameters: {
      path: {
        jobUid: string
        conversationId: string
      }
      body: {
        body?: definitions['EditPlainConversationDto']
      }
    }
    responses: {
      /** successful operation */
      200: {
        schema: definitions['PlainConversationDto']
      }
      /** Bad request */
      400: unknown
      /** Not authorized */
      401: unknown
      /** Forbidden */
      403: unknown
      /** Resource not found */
      404: unknown
      /** Method not allowed */
      405: unknown
      /** Timeout */
      408: unknown
      /** Gone */
      410: unknown
      /** Unsupported media type */
      415: unknown
      /** Too many requests */
      429: unknown
      /** Internal server error */
      500: unknown
      /** Not implemented */
      501: unknown
    }
  }
  deletePlainConversation: {
    parameters: {
      path: {
        jobUid: string
        conversationId: string
      }
    }
    responses: {
      /** No Content */
      204: never
      /** Bad request */
      400: unknown
      /** Not authorized */
      401: unknown
      /** Forbidden */
      403: unknown
      /** Resource not found */
      404: unknown
      /** Method not allowed */
      405: unknown
      /** Timeout */
      408: unknown
      /** Gone */
      410: unknown
      /** Unsupported media type */
      415: unknown
      /** Too many requests */
      429: unknown
      /** Internal server error */
      500: unknown
      /** Not implemented */
      501: unknown
    }
  }
  listPlainConversations: {
    parameters: {
      path: {
        jobUid: string
      }
      query: {
        includeDeleted?: boolean
        since?: string
      }
    }
    responses: {
      /** successful operation */
      200: {
        schema: definitions['PlainConversationsListDto']
      }
      /** Bad request */
      400: unknown
      /** Not authorized */
      401: unknown
      /** Forbidden */
      403: unknown
      /** Resource not found */
      404: unknown
      /** Method not allowed */
      405: unknown
      /** Timeout */
      408: unknown
      /** Gone */
      410: unknown
      /** Unsupported media type */
      415: unknown
      /** Too many requests */
      429: unknown
      /** Internal server error */
      500: unknown
      /** Not implemented */
      501: unknown
    }
  }
  deletePlainComment: {
    parameters: {
      path: {
        jobUid: string
        conversationId: string
        commentId: string
      }
    }
    responses: {
      /** No Content */
      204: never
      /** Bad request */
      400: unknown
      /** Not authorized */
      401: unknown
      /** Forbidden */
      403: unknown
      /** Resource not found */
      404: unknown
      /** Method not allowed */
      405: unknown
      /** Timeout */
      408: unknown
      /** Gone */
      410: unknown
      /** Unsupported media type */
      415: unknown
      /** Too many requests */
      429: unknown
      /** Internal server error */
      500: unknown
      /** Not implemented */
      501: unknown
    }
  }
  getProject: {
    parameters: {
      path: {
        projectUid: string
      }
    }
    responses: {
      /** successful operation */
      200: {
        schema: definitions['AbstractProjectDto']
      }
      /** Bad request */
      400: unknown
      /** Not authorized */
      401: unknown
      /** Forbidden */
      403: unknown
      /** Resource not found */
      404: unknown
      /** Method not allowed */
      405: unknown
      /** Timeout */
      408: unknown
      /** Gone */
      410: unknown
      /** Unsupported media type */
      415: unknown
      /** Too many requests */
      429: unknown
      /** Internal server error */
      500: unknown
      /** Not implemented */
      501: unknown
    }
  }
  deleteProject: {
    parameters: {
      path: {
        projectUid: string
      }
      query: {
        purge?: boolean
      }
    }
    responses: {
      /** No Content */
      204: never
      /** Bad request */
      400: unknown
      /** Not authorized */
      401: unknown
      /** Forbidden */
      403: unknown
      /** Resource not found */
      404: unknown
      /** Method not allowed */
      405: unknown
      /** Timeout */
      408: unknown
      /** Gone */
      410: unknown
      /** Unsupported media type */
      415: unknown
      /** Too many requests */
      429: unknown
      /** Internal server error */
      500: unknown
      /** Not implemented */
      501: unknown
    }
  }
  patchProject: {
    parameters: {
      path: {
        projectUid: string
      }
      body: {
        body?: definitions['PatchProjectDto']
      }
    }
    responses: {
      /** successful operation */
      200: {
        schema: definitions['AbstractProjectDto']
      }
      /** Bad request */
      400: unknown
      /** Not authorized */
      401: unknown
      /** Forbidden */
      403: unknown
      /** Resource not found */
      404: unknown
      /** Method not allowed */
      405: unknown
      /** Timeout */
      408: unknown
      /** Gone */
      410: unknown
      /** Unsupported media type */
      415: unknown
      /** Too many requests */
      429: unknown
      /** Internal server error */
      500: unknown
      /** Not implemented */
      501: unknown
    }
  }
  assignableTemplates: {
    parameters: {
      path: {
        projectUid: string
      }
    }
    responses: {
      /** successful operation */
      200: {
        schema: definitions['AssignableTemplatesDto']
      }
      /** Bad request */
      400: unknown
      /** Not authorized */
      401: unknown
      /** Forbidden */
      403: unknown
      /** Resource not found */
      404: unknown
      /** Method not allowed */
      405: unknown
      /** Timeout */
      408: unknown
      /** Gone */
      410: unknown
      /** Unsupported media type */
      415: unknown
      /** Too many requests */
      429: unknown
      /** Internal server error */
      500: unknown
      /** Not implemented */
      501: unknown
    }
  }
  assignLinguistsFromTemplate: {
    parameters: {
      path: {
        templateUid: string
        projectUid: string
      }
    }
    responses: {
      /** successful operation */
      200: {
        schema: definitions['JobPartsDto']
      }
      /** Bad request */
      400: unknown
      /** Not authorized */
      401: unknown
      /** Forbidden */
      403: unknown
      /** Resource not found */
      404: unknown
      /** Method not allowed */
      405: unknown
      /** Timeout */
      408: unknown
      /** Gone */
      410: unknown
      /** Unsupported media type */
      415: unknown
      /** Too many requests */
      429: unknown
      /** Internal server error */
      500: unknown
      /** Not implemented */
      501: unknown
    }
  }
  assignLinguistsFromTemplateToJobParts: {
    parameters: {
      path: {
        templateUid: string
        projectUid: string
      }
      body: {
        body?: definitions['JobPartReferences']
      }
    }
    responses: {
      /** successful operation */
      200: {
        schema: definitions['JobPartsDto']
      }
      /** Bad request */
      400: unknown
      /** Not authorized */
      401: unknown
      /** Forbidden */
      403: unknown
      /** Resource not found */
      404: unknown
      /** Method not allowed */
      405: unknown
      /** Timeout */
      408: unknown
      /** Gone */
      410: unknown
      /** Unsupported media type */
      415: unknown
      /** Too many requests */
      429: unknown
      /** Internal server error */
      500: unknown
      /** Not implemented */
      501: unknown
    }
  }
  listProjects: {
    parameters: {
      query: {
        name?: string
        clientId?: number
        clientName?: string
        businessUnitId?: number
        businessUnitName?: string
        statuses?: (
          | 'NEW'
          | 'ASSIGNED'
          | 'COMPLETED'
          | 'ACCEPTED_BY_VENDOR'
          | 'DECLINED_BY_VENDOR'
          | 'COMPLETED_BY_VENDOR'
          | 'CANCELLED'
        )[]
        targetLangs?: string[]
        domainId?: number
        domainName?: string
        subDomainId?: number
        subDomainName?: string
        costCenterId?: number
        costCenterName?: string
        /** -1 for projects that are overdue */
        dueInHours?: number
        createdInLastHours?: number
        sourceLangs?: string[]
        ownerId?: number
        /** Allowed for linguists only */
        jobStatuses?: (
          | 'NEW'
          | 'ACCEPTED'
          | 'DECLINED'
          | 'DELIVERED'
          | 'EMAILED'
          | 'COMPLETED'
          | 'CANCELLED'
        )[]
        /** Allowed for linguists only */
        jobStatusGroup?: 'NEW' | 'ACCEPTED' | 'COMPLETED'
        buyerId?: number
        /** Page number, starting with 0, default 0 */
        pageNumber?: number
        /** Page size, accepts values between 1 and 50, default 50 */
        pageSize?: number
        /** Name or internal ID of project */
        nameOrInternalId?: string
        /** List also archived projects */
        includeArchived?: boolean
        /** List only archived projects, regardless of `includeArchived` */
        archivedOnly?: boolean
      }
    }
    responses: {
      /** successful operation */
      200: {
        schema: definitions['PageDtoAbstractProjectDto']
      }
      /** Bad request */
      400: unknown
      /** Not authorized */
      401: unknown
      /** Forbidden */
      403: unknown
      /** Resource not found */
      404: unknown
      /** Method not allowed */
      405: unknown
      /** Timeout */
      408: unknown
      /** Gone */
      410: unknown
      /** Unsupported media type */
      415: unknown
      /** Too many requests */
      429: unknown
      /** Internal server error */
      500: unknown
      /** Not implemented */
      501: unknown
    }
  }
  addWorkflowSteps: {
    parameters: {
      path: {
        projectUid: string
      }
      body: {
        body?: definitions['AddWorkflowStepsDto']
      }
    }
    responses: {
      /** No Content */
      204: never
      /** Bad request */
      400: unknown
      /** Not authorized */
      401: unknown
      /** Forbidden */
      403: unknown
      /** Resource not found */
      404: unknown
      /** Method not allowed */
      405: unknown
      /** Timeout */
      408: unknown
      /** Gone */
      410: unknown
      /** Unsupported media type */
      415: unknown
      /** Too many requests */
      429: unknown
      /** Internal server error */
      500: unknown
      /** Not implemented */
      501: unknown
    }
  }
  /** Add target languages to project */
  addTargetLanguageToProject: {
    parameters: {
      path: {
        projectUid: string
      }
      body: {
        body?: definitions['AddTargetLangDto']
      }
    }
    responses: {
      /** No Content */
      204: never
      /** Bad request */
      400: unknown
      /** Not authorized */
      401: unknown
      /** Forbidden */
      403: unknown
      /** Resource not found */
      404: unknown
      /** Method not allowed */
      405: unknown
      /** Timeout */
      408: unknown
      /** Gone */
      410: unknown
      /** Unsupported media type */
      415: unknown
      /** Too many requests */
      429: unknown
      /** Internal server error */
      500: unknown
      /** Not implemented */
      501: unknown
    }
  }
  /**
   * To unassign Vendor from Project, use empty body:
   * ```
   * {}
   * ```
   */
  assignVendorToProject: {
    parameters: {
      path: {
        projectUid: string
      }
      body: {
        body?: definitions['AssignVendorDto']
      }
    }
    responses: {
      /** No Content */
      204: never
      /** Bad request */
      400: unknown
      /** Not authorized */
      401: unknown
      /** Forbidden */
      403: unknown
      /** Resource not found */
      404: unknown
      /** Method not allowed */
      405: unknown
      /** Timeout */
      408: unknown
      /** Gone */
      410: unknown
      /** Unsupported media type */
      415: unknown
      /** Too many requests */
      429: unknown
      /** Internal server error */
      500: unknown
      /** Not implemented */
      501: unknown
    }
  }
  cloneProject: {
    parameters: {
      path: {
        projectUid: string
      }
      body: {
        body?: definitions['CloneProjectDto']
      }
    }
    responses: {
      /** Created */
      201: {
        schema: definitions['AbstractProjectDto']
      }
      /** Bad request */
      400: unknown
      /** Not authorized */
      401: unknown
      /** Forbidden */
      403: unknown
      /** Resource not found */
      404: unknown
      /** Method not allowed */
      405: unknown
      /** Timeout */
      408: unknown
      /** Gone */
      410: unknown
      /** Unsupported media type */
      415: unknown
      /** Too many requests */
      429: unknown
      /** Internal server error */
      500: unknown
      /** Not implemented */
      501: unknown
    }
  }
  getProjectAssignments: {
    parameters: {
      path: {
        projectUid: string
      }
      query: {
        providerName?: string
        /** Page number, starting with 0, default 0 */
        pageNumber?: number
        /** Page size, accepts values between 1 and 50, default 50 */
        pageSize?: number
      }
    }
    responses: {
      /** successful operation */
      200: {
        schema: definitions['PageDtoProviderReference']
      }
      /** Bad request */
      400: unknown
      /** Not authorized */
      401: unknown
      /** Forbidden */
      403: unknown
      /** Resource not found */
      404: unknown
      /** Method not allowed */
      405: unknown
      /** Timeout */
      408: unknown
      /** Gone */
      410: unknown
      /** Unsupported media type */
      415: unknown
      /** Too many requests */
      429: unknown
      /** Internal server error */
      500: unknown
      /** Not implemented */
      501: unknown
    }
  }
  setProjectStatus: {
    parameters: {
      path: {
        projectUid: string
      }
      body: {
        body?: definitions['SetProjectStatusDto']
      }
    }
    responses: {
      /** No Content */
      204: never
      /** Bad request */
      400: unknown
      /** Not authorized */
      401: unknown
      /** Forbidden */
      403: unknown
      /** Resource not found */
      404: unknown
      /** Method not allowed */
      405: unknown
      /** Timeout */
      408: unknown
      /** Gone */
      410: unknown
      /** Unsupported media type */
      415: unknown
      /** Too many requests */
      429: unknown
      /** Internal server error */
      500: unknown
      /** Not implemented */
      501: unknown
    }
  }
  getFinancialSettings: {
    parameters: {
      path: {
        projectUid: string
      }
    }
    responses: {
      /** successful operation */
      200: {
        schema: definitions['FinancialSettingsDto']
      }
      /** Bad request */
      400: unknown
      /** Not authorized */
      401: unknown
      /** Forbidden */
      403: unknown
      /** Resource not found */
      404: unknown
      /** Method not allowed */
      405: unknown
      /** Timeout */
      408: unknown
      /** Gone */
      410: unknown
      /** Unsupported media type */
      415: unknown
      /** Too many requests */
      429: unknown
      /** Internal server error */
      500: unknown
      /** Not implemented */
      501: unknown
    }
  }
  setFinancialSettings: {
    parameters: {
      path: {
        projectUid: string
      }
      body: {
        body?: definitions['SetFinancialSettingsDto']
      }
    }
    responses: {
      /** successful operation */
      200: {
        schema: definitions['FinancialSettingsDto']
      }
      /** Bad request */
      400: unknown
      /** Not authorized */
      401: unknown
      /** Forbidden */
      403: unknown
      /** Resource not found */
      404: unknown
      /** Method not allowed */
      405: unknown
      /** Timeout */
      408: unknown
      /** Gone */
      410: unknown
      /** Unsupported media type */
      415: unknown
      /** Too many requests */
      429: unknown
      /** Internal server error */
      500: unknown
      /** Not implemented */
      501: unknown
    }
  }
  /** Returns enabled quality assurance settings. */
  enabledQualityChecks: {
    parameters: {
      path: {
        projectUid: string
      }
    }
    responses: {
      /** successful operation */
      200: {
        schema: definitions['EnabledQualityChecksDto']
      }
      /** Bad request */
      400: unknown
      /** Not authorized */
      401: unknown
      /** Forbidden */
      403: unknown
      /** Resource not found */
      404: unknown
      /** Method not allowed */
      405: unknown
      /** Timeout */
      408: unknown
      /** Gone */
      410: unknown
      /** Unsupported media type */
      415: unknown
      /** Too many requests */
      429: unknown
      /** Internal server error */
      500: unknown
      /** Not implemented */
      501: unknown
    }
  }
  getProjectSettings: {
    parameters: {
      path: {
        projectUid: string
      }
      query: {
        workflowLevel?: number
      }
    }
    responses: {
      /** successful operation */
      200: {
        schema: definitions['LqaSettingsDto']
      }
      /** Bad request */
      400: unknown
      /** Not authorized */
      401: unknown
      /** Forbidden */
      403: unknown
      /** Resource not found */
      404: unknown
      /** Method not allowed */
      405: unknown
      /** Timeout */
      408: unknown
      /** Gone */
      410: unknown
      /** Unsupported media type */
      415: unknown
      /** Too many requests */
      429: unknown
      /** Internal server error */
      500: unknown
      /** Not implemented */
      501: unknown
    }
  }
  getMtSettingsForProject: {
    parameters: {
      path: {
        projectUid: string
      }
    }
    responses: {
      /** successful operation */
      200: {
        schema: definitions['MTSettingsPerLanguageListDto']
      }
      /** Bad request */
      400: unknown
      /** Not authorized */
      401: unknown
      /** Forbidden */
      403: unknown
      /** Resource not found */
      404: unknown
      /** Method not allowed */
      405: unknown
      /** Timeout */
      408: unknown
      /** Gone */
      410: unknown
      /** Unsupported media type */
      415: unknown
      /** Too many requests */
      429: unknown
      /** Internal server error */
      500: unknown
      /** Not implemented */
      501: unknown
    }
  }
  /**
   * This will erase all mtSettings per language for project.
   *         To remove all machine translate settings from project call without a machineTranslateSettings parameter.
   */
  setMtSettingsForProject: {
    parameters: {
      path: {
        projectUid: string
      }
      body: {
        body?: definitions['EditProjectMTSettingsDto']
      }
    }
    responses: {
      /** successful operation */
      200: {
        schema: definitions['MTSettingsPerLanguageListDto']
      }
      /** Bad request */
      400: unknown
      /** Not authorized */
      401: unknown
      /** Forbidden */
      403: unknown
      /** Resource not found */
      404: unknown
      /** Method not allowed */
      405: unknown
      /** Timeout */
      408: unknown
      /** Gone */
      410: unknown
      /** Unsupported media type */
      415: unknown
      /** Too many requests */
      429: unknown
      /** Internal server error */
      500: unknown
      /** Not implemented */
      501: unknown
    }
  }
  getQuotesForProject: {
    parameters: {
      path: {
        projectUid: string
      }
      query: {
        pageNumber?: number
        /** Page size, accepts values between 1 and 50, default 50 */
        pageSize?: number
      }
    }
    responses: {
      /** successful operation */
      200: {
        schema: definitions['PageDtoQuoteDto']
      }
      /** Bad request */
      400: unknown
      /** Not authorized */
      401: unknown
      /** Forbidden */
      403: unknown
      /** Resource not found */
      404: unknown
      /** Method not allowed */
      405: unknown
      /** Timeout */
      408: unknown
      /** Gone */
      410: unknown
      /** Unsupported media type */
      415: unknown
      /** Too many requests */
      429: unknown
      /** Internal server error */
      500: unknown
      /** Not implemented */
      501: unknown
    }
  }
  /** This will erase mtSettings for project */
  setMtSettingsPerLanguageForProject: {
    parameters: {
      path: {
        projectUid: string
      }
      body: {
        body?: definitions['EditProjectMTSettPerLangListDto']
      }
    }
    responses: {
      /** successful operation */
      200: {
        schema: definitions['MTSettingsPerLanguageListDto']
      }
      /** Bad request */
      400: unknown
      /** Not authorized */
      401: unknown
      /** Forbidden */
      403: unknown
      /** Resource not found */
      404: unknown
      /** Method not allowed */
      405: unknown
      /** Timeout */
      408: unknown
      /** Gone */
      410: unknown
      /** Unsupported media type */
      415: unknown
      /** Too many requests */
      429: unknown
      /** Internal server error */
      500: unknown
      /** Not implemented */
      501: unknown
    }
  }
  getAnalyseSettingsForProject: {
    parameters: {
      path: {
        projectUid: string
      }
    }
    responses: {
      /** successful operation */
      200: {
        schema: definitions['AnalyseSettingsDto']
      }
      /** Bad request */
      400: unknown
      /** Not authorized */
      401: unknown
      /** Forbidden */
      403: unknown
      /** Resource not found */
      404: unknown
      /** Method not allowed */
      405: unknown
      /** Timeout */
      408: unknown
      /** Gone */
      410: unknown
      /** Unsupported media type */
      415: unknown
      /** Too many requests */
      429: unknown
      /** Internal server error */
      500: unknown
      /** Not implemented */
      501: unknown
    }
  }
  getImportSettings_2: {
    parameters: {
      path: {
        projectUid: string
      }
    }
    responses: {
      /** successful operation */
      200: {
        schema: definitions['FileImportSettingsDto']
      }
      /** Bad request */
      400: unknown
      /** Not authorized */
      401: unknown
      /** Forbidden */
      403: unknown
      /** Resource not found */
      404: unknown
      /** Method not allowed */
      405: unknown
      /** Timeout */
      408: unknown
      /** Gone */
      410: unknown
      /** Unsupported media type */
      415: unknown
      /** Too many requests */
      429: unknown
      /** Internal server error */
      500: unknown
      /** Not implemented */
      501: unknown
    }
  }
  editImportSettings_1: {
    parameters: {
      path: {
        projectUid: string
      }
      body: {
        body?: definitions['FileImportSettingsCreateDto']
      }
    }
    responses: {
      /** successful operation */
      200: {
        schema: definitions['FileImportSettingsDto']
      }
      /** Bad request */
      400: unknown
      /** Not authorized */
      401: unknown
      /** Forbidden */
      403: unknown
      /** Resource not found */
      404: unknown
      /** Method not allowed */
      405: unknown
      /** Timeout */
      408: unknown
      /** Gone */
      410: unknown
      /** Unsupported media type */
      415: unknown
      /** Too many requests */
      429: unknown
      /** Internal server error */
      500: unknown
      /** Not implemented */
      501: unknown
    }
  }
  getFileNamingSettings: {
    parameters: {
      path: {
        projectUid: string
      }
    }
    responses: {
      /** successful operation */
      200: {
        schema: definitions['FileNamingSettingsDto']
      }
      /** Bad request */
      400: unknown
      /** Not authorized */
      401: unknown
      /** Forbidden */
      403: unknown
      /** Resource not found */
      404: unknown
      /** Method not allowed */
      405: unknown
      /** Timeout */
      408: unknown
      /** Gone */
      410: unknown
      /** Unsupported media type */
      415: unknown
      /** Too many requests */
      429: unknown
      /** Internal server error */
      500: unknown
      /** Not implemented */
      501: unknown
    }
  }
  updateFileNamingSettings: {
    parameters: {
      path: {
        projectUid: string
      }
      body: {
        body?: definitions['FileNamingSettingsDto']
      }
    }
    responses: {
      /** successful operation */
      200: {
        schema: definitions['FileNamingSettingsDto']
      }
      /** Bad request */
      400: unknown
      /** Not authorized */
      401: unknown
      /** Forbidden */
      403: unknown
      /** Resource not found */
      404: unknown
      /** Method not allowed */
      405: unknown
      /** Timeout */
      408: unknown
      /** Gone */
      410: unknown
      /** Unsupported media type */
      415: unknown
      /** Too many requests */
      429: unknown
      /** Internal server error */
      500: unknown
      /** Not implemented */
      501: unknown
    }
  }
  getCustomFieldsPage: {
    parameters: {
      path: {
        projectUid: string
      }
      query: {
        /** Page number, starting with 0, default 0 */
        pageNumber?: number
        /** Page size, accepts values between 1 and 50, default 20 */
        pageSize?: number
        /** Filter by webhook creators UIDs */
        createdBy?: string[]
        /** Filter by webhook updaters UIDs */
        modifiedBy?: string[]
        /** Sort by this field */
        sortField?: 'CREATED' | 'LAST_MODIFIED'
        /** Sort direction */
        sortTrend?: 'ASC' | 'DESC'
      }
    }
    responses: {
      /** successful operation */
      200: {
        schema: definitions['PageDtoCustomFieldInstanceDto']
      }
      /** Bad request */
      400: unknown
      /** Not authorized */
      401: unknown
      /** Forbidden */
      403: unknown
      /** Resource not found */
      404: unknown
      /** Method not allowed */
      405: unknown
      /** Timeout */
      408: unknown
      /** Gone */
      410: unknown
      /** Unsupported media type */
      415: unknown
      /** Too many requests */
      429: unknown
      /** Internal server error */
      500: unknown
      /** Not implemented */
      501: unknown
    }
  }
  editCustomFields: {
    parameters: {
      path: {
        projectUid: string
      }
      body: {
        body?: definitions['UpdateCustomFieldInstancesDto']
      }
    }
    responses: {
      /** successful operation */
      200: {
        schema: definitions['CustomFieldInstancesDto']
      }
      /** Bad request */
      400: unknown
      /** Not authorized */
      401: unknown
      /** Forbidden */
      403: unknown
      /** Resource not found */
      404: unknown
      /** Method not allowed */
      405: unknown
      /** Timeout */
      408: unknown
      /** Gone */
      410: unknown
      /** Unsupported media type */
      415: unknown
      /** Too many requests */
      429: unknown
      /** Internal server error */
      500: unknown
      /** Not implemented */
      501: unknown
    }
  }
  createCustomFields: {
    parameters: {
      path: {
        projectUid: string
      }
      body: {
        body?: definitions['CreateCustomFieldInstancesDto']
      }
    }
    responses: {
      /** successful operation */
      200: {
        schema: definitions['CustomFieldInstancesDto']
      }
      /** Bad request */
      400: unknown
      /** Not authorized */
      401: unknown
      /** Forbidden */
      403: unknown
      /** Resource not found */
      404: unknown
      /** Method not allowed */
      405: unknown
      /** Timeout */
      408: unknown
      /** Gone */
      410: unknown
      /** Unsupported media type */
      415: unknown
      /** Too many requests */
      429: unknown
      /** Internal server error */
      500: unknown
      /** Not implemented */
      501: unknown
    }
  }
  getCustomField_1: {
    parameters: {
      path: {
        projectUid: string
        fieldInstanceUid: string
      }
    }
    responses: {
      /** successful operation */
      200: {
        schema: definitions['CustomFieldInstanceDto']
      }
      /** Bad request */
      400: unknown
      /** Not authorized */
      401: unknown
      /** Forbidden */
      403: unknown
      /** Resource not found */
      404: unknown
      /** Method not allowed */
      405: unknown
      /** Timeout */
      408: unknown
      /** Gone */
      410: unknown
      /** Unsupported media type */
      415: unknown
      /** Too many requests */
      429: unknown
      /** Internal server error */
      500: unknown
      /** Not implemented */
      501: unknown
    }
  }
  editCustomField: {
    parameters: {
      path: {
        projectUid: string
        fieldInstanceUid: string
      }
      body: {
        body?: definitions['UpdateCustomFieldInstanceDto']
      }
    }
    responses: {
      /** successful operation */
      200: {
        schema: definitions['CustomFieldInstanceDto']
      }
      /** Bad request */
      400: unknown
      /** Not authorized */
      401: unknown
      /** Forbidden */
      403: unknown
      /** Resource not found */
      404: unknown
      /** Method not allowed */
      405: unknown
      /** Timeout */
      408: unknown
      /** Gone */
      410: unknown
      /** Unsupported media type */
      415: unknown
      /** Too many requests */
      429: unknown
      /** Internal server error */
      500: unknown
      /** Not implemented */
      501: unknown
    }
  }
  deleteCustomField_1: {
    parameters: {
      path: {
        projectUid: string
        fieldInstanceUid: string
      }
    }
    responses: {
      /** Bad request */
      400: unknown
      /** Not authorized */
      401: unknown
      /** Forbidden */
      403: unknown
      /** Resource not found */
      404: unknown
      /** Method not allowed */
      405: unknown
      /** Timeout */
      408: unknown
      /** Gone */
      410: unknown
      /** Unsupported media type */
      415: unknown
      /** Too many requests */
      429: unknown
      /** Internal server error */
      500: unknown
      /** Not implemented */
      501: unknown
    }
  }
  setStatus: {
    parameters: {
      path: {
        projectUid: string
        jobUid: string
      }
      body: {
        body?: definitions['JobStatusChangeActionDto']
      }
    }
    responses: {
      /** No Content */
      204: never
      /** Bad request */
      400: unknown
      /** Not authorized */
      401: unknown
      /** Forbidden */
      403: unknown
      /** Resource not found */
      404: unknown
      /** Method not allowed */
      405: unknown
      /** Timeout */
      408: unknown
      /** Gone */
      410: unknown
      /** Unsupported media type */
      415: unknown
      /** Too many requests */
      429: unknown
      /** Internal server error */
      500: unknown
      /** Not implemented */
      501: unknown
    }
  }
  getPart: {
    parameters: {
      path: {
        projectUid: string
        jobUid: string
      }
    }
    responses: {
      /** successful operation */
      200: {
        schema: definitions['JobPartExtendedDto']
      }
      /** Bad request */
      400: unknown
      /** Not authorized */
      401: unknown
      /** Forbidden */
      403: unknown
      /** Resource not found */
      404: unknown
      /** Method not allowed */
      405: unknown
      /** Timeout */
      408: unknown
      /** Gone */
      410: unknown
      /** Unsupported media type */
      415: unknown
      /** Too many requests */
      429: unknown
      /** Internal server error */
      500: unknown
      /** Not implemented */
      501: unknown
    }
  }
  editPart: {
    parameters: {
      path: {
        projectUid: string
        jobUid: string
      }
      body: {
        body?: definitions['JobPartUpdateSingleDto']
      }
    }
    responses: {
      /** successful operation */
      200: {
        schema: definitions['JobPartExtendedDto']
      }
      /** Bad request */
      400: unknown
      /** Not authorized */
      401: unknown
      /** Forbidden */
      403: unknown
      /** Resource not found */
      404: unknown
      /** Method not allowed */
      405: unknown
      /** Timeout */
      408: unknown
      /** Gone */
      410: unknown
      /** Unsupported media type */
      415: unknown
      /** Too many requests */
      429: unknown
      /** Internal server error */
      500: unknown
      /** Not implemented */
      501: unknown
    }
  }
  patchPart: {
    parameters: {
      path: {
        projectUid: string
        jobUid: string
      }
      body: {
        body?: definitions['JobPartPatchSingleDto']
      }
    }
    responses: {
      /** successful operation */
      200: {
        schema: definitions['JobPartExtendedDto']
      }
      /** Bad request */
      400: unknown
      /** Not authorized */
      401: unknown
      /** Forbidden */
      403: unknown
      /** Resource not found */
      404: unknown
      /** Method not allowed */
      405: unknown
      /** Timeout */
      408: unknown
      /** Gone */
      410: unknown
      /** Unsupported media type */
      415: unknown
      /** Too many requests */
      429: unknown
      /** Internal server error */
      500: unknown
      /** Not implemented */
      501: unknown
    }
  }
  pseudoTranslateJobPart: {
    parameters: {
      path: {
        projectUid: string
        jobUid: string
      }
      body: {
        body?: definitions['PseudoTranslateActionDto']
      }
    }
    responses: {
      /** No Content */
      204: never
      /** Bad request */
      400: unknown
      /** Not authorized */
      401: unknown
      /** Forbidden */
      403: unknown
      /** Resource not found */
      404: unknown
      /** Method not allowed */
      405: unknown
      /** Timeout */
      408: unknown
      /** Gone */
      410: unknown
      /** Unsupported media type */
      415: unknown
      /** Too many requests */
      429: unknown
      /** Internal server error */
      500: unknown
      /** Not implemented */
      501: unknown
    }
  }
  deleteAllTranslations: {
    parameters: {
      path: {
        projectUid: string
      }
      body: {
        body?: definitions['JobPartReadyReferences']
      }
    }
    responses: {
      /** No Content */
      204: never
      /** Bad request */
      400: unknown
      /** Not authorized */
      401: unknown
      /** Forbidden */
      403: unknown
      /** Resource not found */
      404: unknown
      /** Method not allowed */
      405: unknown
      /** Timeout */
      408: unknown
      /** Gone */
      410: unknown
      /** Unsupported media type */
      415: unknown
      /** Too many requests */
      429: unknown
      /** Internal server error */
      500: unknown
      /** Not implemented */
      501: unknown
    }
  }
  addIgnoredWarnings: {
    parameters: {
      path: {
        projectUid: string
        jobUid: string
      }
      body: {
        body?: definitions['UpdateIgnoredWarningsDto']
      }
    }
    responses: {
      /** successful operation */
      200: {
        schema: definitions['UpdateIgnoredWarningsDto']
      }
      /** Bad request */
      400: unknown
      /** Not authorized */
      401: unknown
      /** Forbidden */
      403: unknown
      /** Resource not found */
      404: unknown
      /** Method not allowed */
      405: unknown
      /** Timeout */
      408: unknown
      /** Gone */
      410: unknown
      /** Unsupported media type */
      415: unknown
      /** Too many requests */
      429: unknown
      /** Internal server error */
      500: unknown
      /** Not implemented */
      501: unknown
    }
  }
  deleteIgnoredWarnings: {
    parameters: {
      path: {
        projectUid: string
        jobUid: string
      }
      body: {
        body?: definitions['UpdateIgnoredWarningsDto']
      }
    }
    responses: {
      /** No Content */
      204: never
      /** Bad request */
      400: unknown
      /** Not authorized */
      401: unknown
      /** Forbidden */
      403: unknown
      /** Resource not found */
      404: unknown
      /** Method not allowed */
      405: unknown
      /** Timeout */
      408: unknown
      /** Gone */
      410: unknown
      /** Unsupported media type */
      415: unknown
      /** Too many requests */
      429: unknown
      /** Internal server error */
      500: unknown
      /** Not implemented */
      501: unknown
    }
  }
  getImportSettings_3: {
    parameters: {
      path: {
        projectUid: string
        jobUid: string
      }
    }
    responses: {
      /** successful operation */
      200: {
        schema: definitions['FileImportSettingsDto']
      }
      /** Bad request */
      400: unknown
      /** Not authorized */
      401: unknown
      /** Forbidden */
      403: unknown
      /** Resource not found */
      404: unknown
      /** Method not allowed */
      405: unknown
      /** Timeout */
      408: unknown
      /** Gone */
      410: unknown
      /** Unsupported media type */
      415: unknown
      /** Too many requests */
      429: unknown
      /** Internal server error */
      500: unknown
      /** Not implemented */
      501: unknown
    }
  }
  editJobImportSettings: {
    parameters: {
      path: {
        projectUid: string
        jobUid: string
      }
      body: {
        body?: definitions['FileImportSettingsCreateDto']
      }
    }
    responses: {
      /** successful operation */
      200: {
        schema: definitions['FileImportSettingsDto']
      }
      /** Bad request */
      400: unknown
      /** Not authorized */
      401: unknown
      /** Forbidden */
      403: unknown
      /** Resource not found */
      404: unknown
      /** Method not allowed */
      405: unknown
      /** Timeout */
      408: unknown
      /** Gone */
      410: unknown
      /** Unsupported media type */
      415: unknown
      /** Too many requests */
      429: unknown
      /** Internal server error */
      500: unknown
      /** Not implemented */
      501: unknown
    }
  }
  statusChanges: {
    parameters: {
      path: {
        projectUid: string
        jobUid: string
      }
    }
    responses: {
      /** successful operation */
      200: {
        schema: definitions['JobPartStatusChangesDto']
      }
      /** Bad request */
      400: unknown
      /** Not authorized */
      401: unknown
      /** Forbidden */
      403: unknown
      /** Resource not found */
      404: unknown
      /** Method not allowed */
      405: unknown
      /** Timeout */
      408: unknown
      /** Gone */
      410: unknown
      /** Unsupported media type */
      415: unknown
      /** Too many requests */
      429: unknown
      /** Internal server error */
      500: unknown
      /** Not implemented */
      501: unknown
    }
  }
  copySourceToTarget: {
    parameters: {
      path: {
        projectUid: string
      }
      body: {
        body?: definitions['JobPartReadyReferences']
      }
    }
    responses: {
      /** No Content */
      204: never
      /** Bad request */
      400: unknown
      /** Not authorized */
      401: unknown
      /** Forbidden */
      403: unknown
      /** Resource not found */
      404: unknown
      /** Method not allowed */
      405: unknown
      /** Timeout */
      408: unknown
      /** Gone */
      410: unknown
      /** Unsupported media type */
      415: unknown
      /** Too many requests */
      429: unknown
      /** Internal server error */
      500: unknown
      /** Not implemented */
      501: unknown
    }
  }
  copySourceToTargetJobPart: {
    parameters: {
      path: {
        projectUid: string
        jobUid: string
      }
    }
    responses: {
      /** No Content */
      204: never
      /** Bad request */
      400: unknown
      /** Not authorized */
      401: unknown
      /** Forbidden */
      403: unknown
      /** Resource not found */
      404: unknown
      /** Method not allowed */
      405: unknown
      /** Timeout */
      408: unknown
      /** Gone */
      410: unknown
      /** Unsupported media type */
      415: unknown
      /** Too many requests */
      429: unknown
      /** Internal server error */
      500: unknown
      /** Not implemented */
      501: unknown
    }
  }
  getTranslationResources: {
    parameters: {
      path: {
        projectUid: string
        jobUid: string
      }
    }
    responses: {
      /** successful operation */
      200: {
        schema: definitions['TranslationResourcesDto']
      }
      /** Bad request */
      400: unknown
      /** Not authorized */
      401: unknown
      /** Forbidden */
      403: unknown
      /** Resource not found */
      404: unknown
      /** Method not allowed */
      405: unknown
      /** Timeout */
      408: unknown
      /** Gone */
      410: unknown
      /** Unsupported media type */
      415: unknown
      /** Too many requests */
      429: unknown
      /** Internal server error */
      500: unknown
      /** Not implemented */
      501: unknown
    }
  }
  listSegments: {
    parameters: {
      path: {
        projectUid: string
        jobUid: string
      }
      query: {
        beginIndex?: number
        endIndex?: number
      }
    }
    responses: {
      /** successful operation */
      200: {
        schema: definitions['SegmentListDto']
      }
      /** Bad request */
      400: unknown
      /** Not authorized */
      401: unknown
      /** Forbidden */
      403: unknown
      /** Resource not found */
      404: unknown
      /** Method not allowed */
      405: unknown
      /** Timeout */
      408: unknown
      /** Gone */
      410: unknown
      /** Unsupported media type */
      415: unknown
      /** Too many requests */
      429: unknown
      /** Internal server error */
      500: unknown
      /** Not implemented */
      501: unknown
    }
  }
  getOriginalFile: {
    parameters: {
      path: {
        projectUid: string
        jobUid: string
      }
    }
    responses: {
      /** application/octet-stream */
      200: unknown
      /** Bad request */
      400: unknown
      /** Not authorized */
      401: unknown
      /** Forbidden */
      403: unknown
      /** Resource not found */
      404: unknown
      /** Method not allowed */
      405: unknown
      /** Timeout */
      408: unknown
      /** Gone */
      410: unknown
      /** Unsupported media type */
      415: unknown
      /** Too many requests */
      429: unknown
      /** Internal server error */
      500: unknown
      /** Not implemented */
      501: unknown
    }
  }
  filePreviewJob: {
    parameters: {
      path: {
        projectUid: string
        jobUid: string
      }
    }
    responses: {
      /** application/octet-stream */
      200: unknown
      /** Bad request */
      400: unknown
      /** Not authorized */
      401: unknown
      /** Forbidden */
      403: unknown
      /** Resource not found */
      404: unknown
      /** Method not allowed */
      405: unknown
      /** Timeout */
      408: unknown
      /** Gone */
      410: unknown
      /** Unsupported media type */
      415: unknown
      /** Too many requests */
      429: unknown
      /** Internal server error */
      500: unknown
      /** Not implemented */
      501: unknown
    }
  }
  /** Takes bilingual file (.mxliff only) as argument. If not passed, data will be taken from database */
  filePreview: {
    parameters: {
      path: {
        projectUid: string
        jobUid: string
      }
      body: {
        body?: definitions['InputStream']
      }
    }
    responses: {
      /** application/octet-stream */
      200: unknown
      /** Bad request */
      400: unknown
      /** Not authorized */
      401: unknown
      /** Forbidden */
      403: unknown
      /** Resource not found */
      404: unknown
      /** Method not allowed */
      405: unknown
      /** Timeout */
      408: unknown
      /** Gone */
      410: unknown
      /** Unsupported media type */
      415: unknown
      /** Too many requests */
      429: unknown
      /** Internal server error */
      500: unknown
      /** Not implemented */
      501: unknown
    }
  }
  /** This call will return target file's warnings. This means even for other jobs that were created via 'split jobs' etc. */
  getCompletedFileWarnings: {
    parameters: {
      path: {
        projectUid: string
        jobUid: string
      }
    }
    responses: {
      /** successful operation */
      200: {
        schema: definitions['TargetFileWarningsDto']
      }
      /** Bad request */
      400: unknown
      /** Not authorized */
      401: unknown
      /** Forbidden */
      403: unknown
      /** Resource not found */
      404: unknown
      /** Method not allowed */
      405: unknown
      /** Timeout */
      408: unknown
      /** Gone */
      410: unknown
      /** Unsupported media type */
      415: unknown
      /** Too many requests */
      429: unknown
      /** Internal server error */
      500: unknown
      /** Not implemented */
      501: unknown
    }
  }
  previewUrls: {
    parameters: {
      path: {
        projectUid: string
        jobUid: string
      }
      query: {
        workflowLevel?: number
      }
    }
    responses: {
      /** successful operation */
      200: {
        schema: definitions['PreviewUrlsDto']
      }
      /** Bad request */
      400: unknown
      /** Not authorized */
      401: unknown
      /** Forbidden */
      403: unknown
      /** Resource not found */
      404: unknown
      /** Method not allowed */
      405: unknown
      /** Timeout */
      408: unknown
      /** Gone */
      410: unknown
      /** Unsupported media type */
      415: unknown
      /** Too many requests */
      429: unknown
      /** Internal server error */
      500: unknown
      /** Not implemented */
      501: unknown
    }
  }
  /**
   * Job file can be provided directly in the message body or downloaded from connector.
   *
   * Please supply job metadata in `Memsource` header.
   *
   * For file in the request body provide also the filename in `Content-Disposition` header.
   *
   * Accepted metadata:
   *
   *   - `targetLangs` - **required**
   *   - `due` - ISO 8601
   *   - `workflowSettings` - project with workflow - see examples bellow
   *   - `assignments` - project without workflows - see examples bellow
   *   - `importSettings` - re-usable import settings - see [Create import settings](#operation/createImportSettings)
   *   - `useProjectFileImportSettings` - mutually exclusive with importSettings
   *   - `callbackUrl` - consumer callback
   *   - `path` - original destination directory
   *   - `preTranslate` - set pre translate job after import
   *   - `semanticMarkup` - set semantic markup processing after import when enabled for organization
   *
   *   for remote file jobs also `remoteFile` - see examples bellow:
   *   - `connectorToken` - remote connector token
   *   - `remoteFolder`
   *   - `remoteFileName`
   *   - `continuous` - true for continuous job
   *
   * Create and assign job in project without workflow step:
   * ```
   *
   * {
   *   "targetLangs": [
   *     "cs_cz"
   *   ],
   *   "callbackUrl": "https://my-shiny-service.com/consumeCallback",
   *   "importSettings": {
   *     "uid": "abcd123"
   *   },
   *   "due": "2007-12-03T10:15:30.00Z",
   *   "path": "destination directory",
   *   "assignments": [
   *     {
   *       "targetLang": "cs_cz",
   *       "providers": [
   *         {
   *           "id": "4321",
   *           "type": "USER"
   *         }
   *       ]
   *     }
   *   ],
   *   "notifyProvider": {
   *     "organizationEmailTemplate": {
   *       "id": "39"
   *     },
   *     "notificationIntervalInMinutes": "10"
   *   }
   * }
   * ```
   *
   * Create job from remote file without workflow steps:
   * ```
   *
   * {
   *   "remoteFile": {
   *     "connectorToken": "948123ef-e1ef-4cd3-a90e-af1617848af3",
   *     "remoteFolder": "/",
   *     "remoteFileName": "Few words.docx",
   *     "continuous": false
   *   },
   *   "assignments": [],
   *   "workflowSettings": [],
   *   "targetLangs": [
   *     "cs"
   *   ]
   * }
   * ```
   *
   * Create and assign job in project with workflow step:
   * ```
   *
   * {
   *   "targetLangs": [
   *     "de"
   *   ],
   *   "useProjectFileImportSettings": "true",
   *   "workflowSettings": [
   *     {
   *       "id": "64",
   *       "due": "2007-12-03T10:15:30.00Z",
   *       "assignments": [
   *         {
   *           "targetLang": "de",
   *           "providers": [
   *             {
   *               "id": "3",
   *               "type": "VENDOR"
   *             }
   *           ]
   *         }
   *       ],
   *       "notifyProvider": {
   *         "organizationEmailTemplate": {
   *           "id": "39"
   *         },
   *         "notificationIntervalInMinutes": "10"
   *       }
   *     }
   *   ]
   * }
   * ```
   */
  createJob: {
    parameters: {
      path: {
        projectUid: string
      }
      header: {
        Memsource?: string
        /** must match pattern `((inline|attachment); )?(filename\*=UTF-8''(.+)|filename="?(.+)"?)` */
        'Content-Disposition'?: string
      }
      body: {
        body?: definitions['InputStream']
      }
    }
    responses: {
      /** Created */
      201: {
        schema: definitions['JobListDto']
      }
      /** Bad request */
      400: unknown
      /** Not authorized */
      401: unknown
      /** Forbidden */
      403: unknown
      /** Resource not found */
      404: unknown
      /** Method not allowed */
      405: unknown
      /** Timeout */
      408: unknown
      /** Gone */
      410: unknown
      /** Unsupported media type */
      415: unknown
      /** Too many requests */
      429: unknown
      /** Internal server error */
      500: unknown
      /** Not implemented */
      501: unknown
    }
  }
  /**
   * Creates the job in project specified by path param projectUid. Source file is defined by downloadTaskId parameter. That is value of finished download async task
   * [Connector - Download file (async)](#operation/getFile_1).
   *
   * Please supply job metadata in body.
   *
   * Accepted metadata:
   *
   *   - `targetLangs` - **required**
   *   - `due` - ISO 8601
   *   - `workflowSettings` - project with workflow - see examples bellow
   *   - `assignments` - project without workflows - see examples bellow
   *   - `importSettings` - re-usable import settings - see [Create import settings](#operation/createImportSettings)
   *   - `useProjectFileImportSettings` - mutually exclusive with importSettings
   *   - `callbackUrl` - consumer callback
   *   - `path` - original destination directory
   *   - `preTranslate` - set pre translate job after import
   *   - `semanticMarkup` - set semantic markup processing after import when enabled for organization
   *
   * Create job simple (without workflow steps, without assignments):
   * ```
   * {
   *   "targetLangs": [
   *     "cs_cz",
   *     "es_es"
   *   ]
   * }
   * ```
   *
   * Create and assign job in project without workflow step:
   * ```
   * {
   *   "targetLangs": [
   *     "cs_cz"
   *   ],
   *   "callbackUrl": "https://my-shiny-service.com/consumeCallback",
   *   "importSettings": {
   *     "uid": "abcd123"
   *   },
   *   "due": "2007-12-03T10:15:30.00Z",
   *   "path": "destination directory",
   *   "assignments": [
   *     {
   *       "targetLang": "cs_cz",
   *       "providers": [
   *         {
   *           "id": "4321",
   *           "type": "USER"
   *         }
   *       ]
   *     }
   *   ],
   *   "notifyProvider": {
   *     "organizationEmailTemplate": {
   *       "id": "39"
   *     },
   *     "notificationIntervalInMinutes": "10"
   *   }
   * }
   * ```
   *
   * Create and assign job in project with workflow step:
   * ```
   * {
   *   "targetLangs": [
   *     "de"
   *   ],
   *   "useProjectFileImportSettings": "true",
   *   "workflowSettings": [
   *     {
   *       "id": "64",
   *       "due": "2007-12-03T10:15:30.00Z",
   *       "assignments": [
   *         {
   *           "targetLang": "de",
   *           "providers": [
   *             {
   *               "id": "3",
   *               "type": "VENDOR"
   *             }
   *           ]
   *         }
   *       ],
   *       "notifyProvider": {
   *         "organizationEmailTemplate": {
   *           "id": "39"
   *         },
   *         "notificationIntervalInMinutes": "10"
   *       }
   *     }
   *   ]
   * }
   * ```
   */
  createJobFromAsyncDownloadTask: {
    parameters: {
      path: {
        projectUid: string
      }
      query: {
        downloadTaskId?: string
        continuous?: boolean
      }
      body: {
        body?: definitions['JobCreateRequestDto']
      }
    }
    responses: {
      /** Created */
      201: {
        schema: definitions['JobListDto']
      }
      /** Bad request */
      400: unknown
      /** Not authorized */
      401: unknown
      /** Forbidden */
      403: unknown
      /** Resource not found */
      404: unknown
      /** Method not allowed */
      405: unknown
      /** Timeout */
      408: unknown
      /** Gone */
      410: unknown
      /** Unsupported media type */
      415: unknown
      /** Too many requests */
      429: unknown
      /** Internal server error */
      500: unknown
      /** Not implemented */
      501: unknown
    }
  }
  /**
   * API updated source file for specified job
   *
   * Job file can be provided directly in the message body.
   *
   * Please supply jobs in `Memsource` header.
   *
   * For file in the request body provide also the filename in `Content-Disposition` header.
   *
   * If a job from a multilingual file is updated, all jobs from the same file are update too even if their UIDs aren't
   * listed in the jobs field.
   *
   * Accepted metadata:
   *
   *   - `jobs` - **required** - list of jobs UID reference (maximum size `100`)
   *   - `preTranslate` - pre translate flag (default `false`)
   *   - `allowAutomaticPostAnalysis` - if automatic post editing analysis should be created. If not specified then value
   *                                    is taken from the analyse settings of the project
   *   - `callbackUrl` - consumer callback
   *
   * Job restrictions:
   *   - job must belong to project specified in path (`projectUid`)
   *   - job `UID` must be from the first workflow step
   *   - job cannot be split
   *   - job cannot be continuous
   *   - job cannot originate in a connector
   *   - status in any of the job's workflow steps cannot be a final
   *     status (`COMPLETED_BY_LINGUIST`, `COMPLETED`, `CANCELLED`)
   *   - job UIDs must be from the same multilingual file if a multilingual file is updated
   *   - multiple multilingual files or a mixture of multilingual and other jobs cannot be updated in one call
   *
   * File restrictions:
   *   - file cannot be a `.zip` file
   *
   * Example:
   *
   * ```
   * {
   *   "jobs": [
   *     {
   *         "uid": "jobIn1stWfStepAndNonFinalStatusUid"
   *     }
   *   ],
   *   "preTranslate": false,
   *   "allowAutomaticPostAnalysis": false
   *   "callbackUrl": "https://my-shiny-service.com/consumeCallback"
   * }
   * ```
   */
  updateSource: {
    parameters: {
      path: {
        projectUid: string
      }
      header: {
        Memsource?: string
        /** must match pattern `((inline|attachment); )?(filename\*=UTF-8''(.+)|filename="?(.+)"?)` */
        'Content-Disposition'?: string
      }
      body: {
        body?: definitions['InputStream']
      }
    }
    responses: {
      /** Updated */
      200: {
        schema: definitions['JobUpdateSourceResponseDto']
      }
      /** Bad request */
      400: unknown
      /** Not authorized */
      401: unknown
      /** Forbidden */
      403: unknown
      /** Resource not found */
      404: unknown
      /** Method not allowed */
      405: unknown
      /** Timeout */
      408: unknown
      /** Gone */
      410: unknown
      /** Unsupported media type */
      415: unknown
      /** Too many requests */
      429: unknown
      /** Internal server error */
      500: unknown
      /** Not implemented */
      501: unknown
    }
  }
  /**
   * API update target file for specified job
   *
   * Job file can be provided directly in the message body.
   *
   * Please supply jobs in `Memsource` header.
   *
   * For file in the request body provide also the filename in `Content-Disposition` header.
   *
   * Accepted metadata:
   *
   *   - `jobs` - **required** - list of jobs UID reference (maximum size `1`)
   *   - `propagateConfirmedToTm` - sets if confirmed segments should be stored in TM (default value: true)
   *   - `callbackUrl` - consumer callback
   *   - `targetSegmentationRule` - ID reference to segmentation rule of organization to use for update target
   *   - `unconfirmChangedSegments` - sets if segments should stay unconfirmed
   *
   * Job restrictions:
   *   - job must belong to project specified in path (`projectUid`)
   *   - job cannot be split
   *   - job cannot be continuous
   *   - job cannot be multilingual
   *   - job cannot originate in a connector
   *   - job cannot have different file extension than original file
   *
   * File restrictions:
   *   - file cannot be a `.zip` file
   *   - update target is not allowed for jobs with file extensions: xliff, po, tbx, tmx, ttx, ts
   *
   * Example:
   *
   * ```
   * {
   *   "jobs": [
   *     {
   *         "uid": "jobUid"
   *     }
   *   ],
   *   "propagateConfirmedToTm": true,
   *   "targetSegmentationRule": {
   *         "id": "1"
   *    },
   *   "callbackUrl": "https://my-shiny-service.com/consumeCallback"
   * }
   * ```
   */
  updateTarget: {
    parameters: {
      path: {
        projectUid: string
      }
      header: {
        Memsource?: string
        /** must match pattern `((inline|attachment); )?(filename\*=UTF-8''(.+)|filename="?(.+)"?)` */
        'Content-Disposition'?: string
      }
      body: {
        body?: definitions['InputStream']
      }
    }
    responses: {
      /** Updated */
      202: {
        schema: definitions['JobUpdateSourceResponseDto']
      }
      /** Bad request */
      400: unknown
      /** Not authorized */
      401: unknown
      /** Forbidden */
      403: unknown
      /** Resource not found */
      404: unknown
      /** Method not allowed */
      405: unknown
      /** Timeout */
      408: unknown
      /** Gone */
      410: unknown
      /** Unsupported media type */
      415: unknown
      /** Too many requests */
      429: unknown
      /** Internal server error */
      500: unknown
      /** Not implemented */
      501: unknown
    }
  }
  /** Returns only jobs which were updated by the batch operation. */
  editParts: {
    parameters: {
      path: {
        projectUid: string
      }
      body: {
        body?: definitions['JobPartUpdateBatchDto']
      }
    }
    responses: {
      /** successful operation */
      200: {
        schema: definitions['JobPartsDto']
      }
      /** Bad request */
      400: unknown
      /** Not authorized */
      401: unknown
      /** Forbidden */
      403: unknown
      /** Resource not found */
      404: unknown
      /** Method not allowed */
      405: unknown
      /** Timeout */
      408: unknown
      /** Gone */
      410: unknown
      /** Unsupported media type */
      415: unknown
      /** Too many requests */
      429: unknown
      /** Internal server error */
      500: unknown
      /** Not implemented */
      501: unknown
    }
  }
  deleteParts: {
    parameters: {
      path: {
        projectUid: string
      }
      body: {
        body?: definitions['JobPartDeleteReferences']
      }
      query: {
        purge?: boolean
      }
    }
    responses: {
      /** No Content */
      204: never
      /** Bad request */
      400: unknown
      /** Not authorized */
      401: unknown
      /** Forbidden */
      403: unknown
      /** Resource not found */
      404: unknown
      /** Method not allowed */
      405: unknown
      /** Timeout */
      408: unknown
      /** Gone */
      410: unknown
      /** Unsupported media type */
      415: unknown
      /** Too many requests */
      429: unknown
      /** Internal server error */
      500: unknown
      /** Not implemented */
      501: unknown
    }
  }
  humanTranslate: {
    parameters: {
      path: {
        projectUid: string
      }
      body: {
        body?: definitions['HumanTranslateJobsDto']
      }
    }
    responses: {
      /** successful operation */
      200: {
        schema: definitions['AsyncRequestWrapperDto']
      }
      /** Bad request */
      400: unknown
      /** Not authorized */
      401: unknown
      /** Forbidden */
      403: unknown
      /** Resource not found */
      404: unknown
      /** Method not allowed */
      405: unknown
      /** Timeout */
      408: unknown
      /** Gone */
      410: unknown
      /** Unsupported media type */
      415: unknown
      /** Too many requests */
      429: unknown
      /** Internal server error */
      500: unknown
      /** Not implemented */
      501: unknown
    }
  }
  notifyAssigned: {
    parameters: {
      path: {
        projectUid: string
      }
      body: {
        body?: definitions['NotifyJobPartsRequestDto']
      }
    }
    responses: {
      /** No Content */
      204: never
      /** Bad request */
      400: unknown
      /** Not authorized */
      401: unknown
      /** Forbidden */
      403: unknown
      /** Resource not found */
      404: unknown
      /** Method not allowed */
      405: unknown
      /** Timeout */
      408: unknown
      /** Gone */
      410: unknown
      /** Unsupported media type */
      415: unknown
      /** Too many requests */
      429: unknown
      /** Internal server error */
      500: unknown
      /** Not implemented */
      501: unknown
    }
  }
  comparePart: {
    parameters: {
      path: {
        projectUid: string
      }
      body: {
        body?: definitions['JobPartReadyReferences']
      }
      query: {
        atWorkflowLevel?: number
        withWorkflowLevel?: number
      }
    }
    responses: {
      /** successful operation */
      200: {
        schema: definitions['ComparedSegmentsDto']
      }
      /** Bad request */
      400: unknown
      /** Not authorized */
      401: unknown
      /** Forbidden */
      403: unknown
      /** Resource not found */
      404: unknown
      /** Method not allowed */
      405: unknown
      /** Timeout */
      408: unknown
      /** Gone */
      410: unknown
      /** Unsupported media type */
      415: unknown
      /** Too many requests */
      429: unknown
      /** Internal server error */
      500: unknown
      /** Not implemented */
      501: unknown
    }
  }
  getBilingualFile: {
    parameters: {
      path: {
        projectUid: string
      }
      body: {
        body?: definitions['GetBilingualFileDto']
      }
      query: {
        format?: 'MXLF' | 'DOCX' | 'XLIFF' | 'TMX'
        preview?: boolean
      }
    }
    responses: {
      /** application/octet-stream, application/mxliff, application/xliff+xml */
      200: unknown
      /** Bad request */
      400: unknown
      /** Not authorized */
      401: unknown
      /** Forbidden */
      403: unknown
      /** Resource not found */
      404: unknown
      /** Method not allowed */
      405: unknown
      /** Timeout */
      408: unknown
      /** Gone */
      410: unknown
      /** Unsupported media type */
      415: unknown
      /** Too many requests */
      429: unknown
      /** Internal server error */
      500: unknown
      /** Not implemented */
      501: unknown
    }
  }
  updateIgnoredChecks: {
    parameters: {
      path: {
        projectUid: string
        jobUid: string
      }
      body: {
        body?: definitions['UpdateIgnoredChecksDto']
      }
    }
    responses: {
      /** No Content */
      204: never
      /** Bad request */
      400: unknown
      /** Not authorized */
      401: unknown
      /** Forbidden */
      403: unknown
      /** Resource not found */
      404: unknown
      /** Method not allowed */
      405: unknown
      /** Timeout */
      408: unknown
      /** Gone */
      410: unknown
      /** Unsupported media type */
      415: unknown
      /** Too many requests */
      429: unknown
      /** Internal server error */
      500: unknown
      /** Not implemented */
      501: unknown
    }
  }
  getPartsWorkflowStep: {
    parameters: {
      path: {
        projectUid: string
        jobUid: string
      }
    }
    responses: {
      /** successful operation */
      200: {
        schema: definitions['ProjectWorkflowStepDto']
      }
      /** Bad request */
      400: unknown
      /** Not authorized */
      401: unknown
      /** Forbidden */
      403: unknown
      /** Resource not found */
      404: unknown
      /** Method not allowed */
      405: unknown
      /** Timeout */
      408: unknown
      /** Gone */
      410: unknown
      /** Unsupported media type */
      415: unknown
      /** Too many requests */
      429: unknown
      /** Internal server error */
      500: unknown
      /** Not implemented */
      501: unknown
    }
  }
  searchPartsInProject: {
    parameters: {
      path: {
        projectUid: string
      }
      body: {
        body?: definitions['SearchJobsRequestDto']
      }
    }
    responses: {
      /** successful operation */
      200: {
        schema: definitions['SearchJobsDto']
      }
      /** Bad request */
      400: unknown
      /** Not authorized */
      401: unknown
      /** Forbidden */
      403: unknown
      /** Resource not found */
      404: unknown
      /** Method not allowed */
      405: unknown
      /** Timeout */
      408: unknown
      /** Gone */
      410: unknown
      /** Unsupported media type */
      415: unknown
      /** Too many requests */
      429: unknown
      /** Internal server error */
      500: unknown
      /** Not implemented */
      501: unknown
    }
  }
  /** Provides segments count (progress data) */
  getSegmentsCount: {
    parameters: {
      path: {
        projectUid: string
      }
      body: {
        body?: definitions['JobPartReadyReferences']
      }
    }
    responses: {
      /** successful operation */
      200: {
        schema: definitions['SegmentsCountsResponseListDto']
      }
      /** Bad request */
      400: unknown
      /** Not authorized */
      401: unknown
      /** Forbidden */
      403: unknown
      /** Resource not found */
      404: unknown
      /** Method not allowed */
      405: unknown
      /** Timeout */
      408: unknown
      /** Gone */
      410: unknown
      /** Unsupported media type */
      415: unknown
      /** Too many requests */
      429: unknown
      /** Internal server error */
      500: unknown
      /** Not implemented */
      501: unknown
    }
  }
  /**
   * Splits job by one of the following methods:
   * * **After specific segments** - fill in `segmentOrdinals`
   * * **Into X parts** - fill in `partCount`
   * * **Into parts with specific size** - fill in `partSize`. partSize represents segment count in each part.
   * * **Into parts with specific word count** - fill in `wordCount`
   * * **By document parts** - fill in `byDocumentParts`, works only with **PowerPoint** files
   *
   * Only one option at a time is allowed.
   */
  split: {
    parameters: {
      path: {
        projectUid: string
        jobUid: string
      }
      body: {
        body?: definitions['SplitJobActionDto']
      }
    }
    responses: {
      /** successful operation */
      200: {
        schema: definitions['JobPartsDto']
      }
      /** Bad request */
      400: unknown
      /** Not authorized */
      401: unknown
      /** Forbidden */
      403: unknown
      /** Resource not found */
      404: unknown
      /** Method not allowed */
      405: unknown
      /** Timeout */
      408: unknown
      /** Gone */
      410: unknown
      /** Unsupported media type */
      415: unknown
      /** Too many requests */
      429: unknown
      /** Internal server error */
      500: unknown
      /** Not implemented */
      501: unknown
    }
  }
  /** Create new term in the write term base assigned to the job */
  createTermByJob: {
    parameters: {
      path: {
        jobUid: string
        projectUid: string
      }
      body: {
        body?: definitions['CreateTermsDto']
      }
    }
    responses: {
      /** successful operation */
      200: {
        schema: definitions['TermPairDto']
      }
      /** Bad request */
      400: unknown
      /** Not authorized */
      401: unknown
      /** Forbidden */
      403: unknown
      /** Resource not found */
      404: unknown
      /** Method not allowed */
      405: unknown
      /** Timeout */
      408: unknown
      /** Gone */
      410: unknown
      /** Unsupported media type */
      415: unknown
      /** Too many requests */
      429: unknown
      /** Internal server error */
      500: unknown
      /** Not implemented */
      501: unknown
    }
  }
  listReferenceFiles: {
    parameters: {
      path: {
        projectUid: string
      }
      query: {
        filename?: string
        /** date time in ISO 8601 UTC format */
        dateCreatedSince?: string
        /** UID of user */
        createdBy?: string
        pageNumber?: number
        pageSize?: number
        sort?: 'FILENAME' | 'DATE_CREATED' | 'CREATED_BY'
        order?: 'ASC' | 'DESC'
      }
    }
    responses: {
      /** successful operation */
      200: {
        schema: definitions['ReferenceFilePageDto']
      }
      /** Bad request */
      400: unknown
      /** Not authorized */
      401: unknown
      /** Forbidden */
      403: unknown
      /** Resource not found */
      404: unknown
      /** Method not allowed */
      405: unknown
      /** Timeout */
      408: unknown
      /** Gone */
      410: unknown
      /** Unsupported media type */
      415: unknown
      /** Too many requests */
      429: unknown
      /** Internal server error */
      500: unknown
      /** Not implemented */
      501: unknown
    }
  }
  batchDeleteReferenceFiles: {
    parameters: {
      path: {
        projectUid: string
      }
      body: {
        body?: definitions['ProjectReferenceFilesRequestDto']
      }
    }
    responses: {
      /** No Content */
      204: never
      /** Bad request */
      400: unknown
      /** Not authorized */
      401: unknown
      /** Forbidden */
      403: unknown
      /** Resource not found */
      404: unknown
      /** Method not allowed */
      405: unknown
      /** Timeout */
      408: unknown
      /** Gone */
      410: unknown
      /** Unsupported media type */
      415: unknown
      /** Too many requests */
      429: unknown
      /** Internal server error */
      500: unknown
      /** Not implemented */
      501: unknown
    }
  }
  downloadReference: {
    parameters: {
      path: {
        projectUid: string
        referenceFileId: string
      }
    }
    responses: {
      /** application/octet-stream */
      200: unknown
      /** Bad request */
      400: unknown
      /** Not authorized */
      401: unknown
      /** Forbidden */
      403: unknown
      /** Resource not found */
      404: unknown
      /** Method not allowed */
      405: unknown
      /** Timeout */
      408: unknown
      /** Gone */
      410: unknown
      /** Unsupported media type */
      415: unknown
      /** Too many requests */
      429: unknown
      /** Internal server error */
      500: unknown
      /** Not implemented */
      501: unknown
    }
  }
  batchDownloadReferenceFiles: {
    parameters: {
      path: {
        projectUid: string
      }
      body: {
        body?: definitions['ProjectReferenceFilesRequestDto']
      }
    }
    responses: {
      /** application/octet-stream */
      200: unknown
      /** Bad request */
      400: unknown
      /** Not authorized */
      401: unknown
      /** Forbidden */
      403: unknown
      /** Resource not found */
      404: unknown
      /** Method not allowed */
      405: unknown
      /** Timeout */
      408: unknown
      /** Gone */
      410: unknown
      /** Unsupported media type */
      415: unknown
      /** Too many requests */
      429: unknown
      /** Internal server error */
      500: unknown
      /** Not implemented */
      501: unknown
    }
  }
  /**
   * The result is not paged and returns up to 50 users.
   *                 If the requested user is not included, the search can be narrowed down with the `userName` parameter.
   */
  listReferenceFileCreators: {
    parameters: {
      path: {
        projectUid: string
      }
      query: {
        userName?: string
      }
    }
    responses: {
      /** successful operation */
      200: {
        schema: definitions['UserReferencesDto']
      }
      /** Bad request */
      400: unknown
      /** Not authorized */
      401: unknown
      /** Forbidden */
      403: unknown
      /** Resource not found */
      404: unknown
      /** Method not allowed */
      405: unknown
      /** Timeout */
      408: unknown
      /** Gone */
      410: unknown
      /** Unsupported media type */
      415: unknown
      /** Too many requests */
      429: unknown
      /** Internal server error */
      500: unknown
      /** Not implemented */
      501: unknown
    }
  }
  relevantTransMemories: {
    parameters: {
      path: {
        projectTemplateUid: string
      }
      query: {
        name?: string
        domainName?: string
        clientName?: string
        subDomainName?: string
        targetLangs?: string[]
        strictLangMatching?: boolean
        /** Page number, starting with 0, default 0 */
        pageNumber?: number
        /** Page size, accepts values between 1 and 50, default 50 */
        pageSize?: number
      }
    }
    responses: {
      /** successful operation */
      200: {
        schema: definitions['PageDtoTransMemoryDto']
      }
      /** Bad request */
      400: unknown
      /** Not authorized */
      401: unknown
      /** Forbidden */
      403: unknown
      /** Resource not found */
      404: unknown
      /** Method not allowed */
      405: unknown
      /** Timeout */
      408: unknown
      /** Gone */
      410: unknown
      /** Unsupported media type */
      415: unknown
      /** Too many requests */
      429: unknown
      /** Internal server error */
      500: unknown
      /** Not implemented */
      501: unknown
    }
  }
  getProjectTemplateQASettings: {
    parameters: {
      path: {
        projectTemplateUid: string
      }
    }
    responses: {
      /** successful operation */
      200: {
        schema: definitions['QASettingsDtoV2']
      }
      /** Bad request */
      400: unknown
      /** Not authorized */
      401: unknown
      /** Forbidden */
      403: unknown
      /** Resource not found */
      404: unknown
      /** Method not allowed */
      405: unknown
      /** Timeout */
      408: unknown
      /** Gone */
      410: unknown
      /** Unsupported media type */
      415: unknown
      /** Too many requests */
      429: unknown
      /** Internal server error */
      500: unknown
      /** Not implemented */
      501: unknown
    }
  }
  setProjectTemplateQASettings: {
    parameters: {
      path: {
        projectTemplateUid: string
      }
      body: {
        body?: definitions['EditQASettingsDtoV2']
      }
    }
    responses: {
      /** successful operation */
      200: {
        schema: definitions['QASettingsDtoV2']
      }
      /** Bad request */
      400: unknown
      /** Not authorized */
      401: unknown
      /** Forbidden */
      403: unknown
      /** Resource not found */
      404: unknown
      /** Method not allowed */
      405: unknown
      /** Timeout */
      408: unknown
      /** Gone */
      410: unknown
      /** Unsupported media type */
      415: unknown
      /** Too many requests */
      429: unknown
      /** Internal server error */
      500: unknown
      /** Not implemented */
      501: unknown
    }
  }
  getProjectTemplates: {
    parameters: {
      query: {
        name?: string
        clientId?: number
        clientName?: string
        ownerUid?: string
        domainName?: string
        subDomainName?: string
        costCenterId?: number
        costCenterName?: string
        businessUnitName?: string
        sort?: string
        direction?: string
        /** Page number, starting with 0, default 0 */
        pageNumber?: number
        /** Page size, accepts values between 1 and 50, default 50 */
        pageSize?: number
      }
    }
    responses: {
      /** successful operation */
      200: {
        schema: definitions['PageDtoProjectTemplateReference']
      }
      /** Bad request */
      400: unknown
      /** Not authorized */
      401: unknown
      /** Forbidden */
      403: unknown
      /** Resource not found */
      404: unknown
      /** Method not allowed */
      405: unknown
      /** Timeout */
      408: unknown
      /** Gone */
      410: unknown
      /** Unsupported media type */
      415: unknown
      /** Too many requests */
      429: unknown
      /** Internal server error */
      500: unknown
      /** Not implemented */
      501: unknown
    }
  }
  createProjectTemplate: {
    parameters: {
      body: {
        body: definitions['ProjectTemplateCreateActionDto']
      }
    }
    responses: {
      /** Created */
      201: {
        schema: definitions['ProjectTemplate']
      }
      /** Bad request */
      400: unknown
      /** Not authorized */
      401: unknown
      /** Forbidden */
      403: unknown
      /** Resource not found */
      404: unknown
      /** Method not allowed */
      405: unknown
      /** Timeout */
      408: unknown
      /** Gone */
      410: unknown
      /** Unsupported media type */
      415: unknown
      /** Too many requests */
      429: unknown
      /** Internal server error */
      500: unknown
      /** Not implemented */
      501: unknown
    }
  }
  /** Note: importSettings in response is deprecated and will be always null */
  getProjectTemplate: {
    parameters: {
      path: {
        projectTemplateUid: string
      }
    }
    responses: {
      /** successful operation */
      200: {
        schema: definitions['ProjectTemplate']
      }
      /** Bad request */
      400: unknown
      /** Not authorized */
      401: unknown
      /** Forbidden */
      403: unknown
      /** Resource not found */
      404: unknown
      /** Method not allowed */
      405: unknown
      /** Timeout */
      408: unknown
      /** Gone */
      410: unknown
      /** Unsupported media type */
      415: unknown
      /** Too many requests */
      429: unknown
      /** Internal server error */
      500: unknown
      /** Not implemented */
      501: unknown
    }
  }
  editProjectTemplate: {
    parameters: {
      path: {
        projectTemplateUid: string
      }
      body: {
        body: definitions['ProjectTemplateEditDto']
      }
    }
    responses: {
      /** Edited */
      200: {
        schema: definitions['ProjectTemplate']
      }
      /** Bad request */
      400: unknown
      /** Not authorized */
      401: unknown
      /** Forbidden */
      403: unknown
      /** Resource not found */
      404: unknown
      /** Method not allowed */
      405: unknown
      /** Timeout */
      408: unknown
      /** Gone */
      410: unknown
      /** Unsupported media type */
      415: unknown
      /** Too many requests */
      429: unknown
      /** Internal server error */
      500: unknown
      /** Not implemented */
      501: unknown
    }
  }
  deleteProjectTemplate: {
    parameters: {
      path: {
        projectTemplateUid: string
      }
    }
    responses: {
      /** No Content */
      204: never
      /** Bad request */
      400: unknown
      /** Not authorized */
      401: unknown
      /** Forbidden */
      403: unknown
      /** Resource not found */
      404: unknown
      /** Method not allowed */
      405: unknown
      /** Timeout */
      408: unknown
      /** Gone */
      410: unknown
      /** Unsupported media type */
      415: unknown
      /** Too many requests */
      429: unknown
      /** Internal server error */
      500: unknown
      /** Not implemented */
      501: unknown
    }
  }
  getAnalyseSettingsForProjectTemplate: {
    parameters: {
      path: {
        projectTemplateUid: string
      }
    }
    responses: {
      /** OK */
      200: {
        schema: definitions['AbstractAnalyseSettingsDto']
      }
      /** Bad request */
      400: unknown
      /** Not authorized */
      401: unknown
      /** Forbidden */
      403: unknown
      /** Resource not found */
      404: unknown
      /** Method not allowed */
      405: unknown
      /** Timeout */
      408: unknown
      /** Gone */
      410: unknown
      /** Unsupported media type */
      415: unknown
      /** Too many requests */
      429: unknown
      /** Internal server error */
      500: unknown
      /** Not implemented */
      501: unknown
    }
  }
  updateAnalyseSettingsForProjectTemplate: {
    parameters: {
      path: {
        projectTemplateUid: string
      }
      body: {
        body?: definitions['EditAnalyseSettingsDto']
      }
    }
    responses: {
      /** OK */
      200: {
        schema: definitions['AbstractAnalyseSettingsDto']
      }
      /** Bad request */
      400: unknown
      /** Not authorized */
      401: unknown
      /** Forbidden */
      403: unknown
      /** Resource not found */
      404: unknown
      /** Method not allowed */
      405: unknown
      /** Timeout */
      408: unknown
      /** Gone */
      410: unknown
      /** Unsupported media type */
      415: unknown
      /** Too many requests */
      429: unknown
      /** Internal server error */
      500: unknown
      /** Not implemented */
      501: unknown
    }
  }
  getImportSettingsForProjectTemplate: {
    parameters: {
      path: {
        projectTemplateUid: string
      }
    }
    responses: {
      /** successful operation */
      200: {
        schema: definitions['FileImportSettingsDto']
      }
      /** Bad request */
      400: unknown
      /** Not authorized */
      401: unknown
      /** Forbidden */
      403: unknown
      /** Resource not found */
      404: unknown
      /** Method not allowed */
      405: unknown
      /** Timeout */
      408: unknown
      /** Gone */
      410: unknown
      /** Unsupported media type */
      415: unknown
      /** Too many requests */
      429: unknown
      /** Internal server error */
      500: unknown
      /** Not implemented */
      501: unknown
    }
  }
  editProjectTemplateImportSettings: {
    parameters: {
      path: {
        projectTemplateUid: string
      }
      body: {
        body?: definitions['FileImportSettingsCreateDto']
      }
    }
    responses: {
      /** successful operation */
      200: {
        schema: definitions['FileImportSettingsDto']
      }
      /** Bad request */
      400: unknown
      /** Not authorized */
      401: unknown
      /** Forbidden */
      403: unknown
      /** Resource not found */
      404: unknown
      /** Method not allowed */
      405: unknown
      /** Timeout */
      408: unknown
      /** Gone */
      410: unknown
      /** Unsupported media type */
      415: unknown
      /** Too many requests */
      429: unknown
      /** Internal server error */
      500: unknown
      /** Not implemented */
      501: unknown
    }
  }
  getMachineTranslateSettingsForProjectTemplate: {
    parameters: {
      path: {
        projectTemplateUid: string
      }
    }
    responses: {
      /** successful operation */
      200: {
        schema: definitions['MTSettingsPerLanguageListDto']
      }
      /** Bad request */
      400: unknown
      /** Not authorized */
      401: unknown
      /** Forbidden */
      403: unknown
      /** Resource not found */
      404: unknown
      /** Method not allowed */
      405: unknown
      /** Timeout */
      408: unknown
      /** Gone */
      410: unknown
      /** Unsupported media type */
      415: unknown
      /** Too many requests */
      429: unknown
      /** Internal server error */
      500: unknown
      /** Not implemented */
      501: unknown
    }
  }
  getProjectTemplateTermBases: {
    parameters: {
      path: {
        projectTemplateUid: string
      }
    }
    responses: {
      /** successful operation */
      200: {
        schema: definitions['ProjectTemplateTermBaseListDto']
      }
      /** Bad request */
      400: unknown
      /** Not authorized */
      401: unknown
      /** Forbidden */
      403: unknown
      /** Resource not found */
      404: unknown
      /** Method not allowed */
      405: unknown
      /** Timeout */
      408: unknown
      /** Gone */
      410: unknown
      /** Unsupported media type */
      415: unknown
      /** Too many requests */
      429: unknown
      /** Internal server error */
      500: unknown
      /** Not implemented */
      501: unknown
    }
  }
  setProjectTemplateTermBases: {
    parameters: {
      path: {
        projectTemplateUid: string
      }
      body: {
        body?: definitions['SetProjectTemplateTermBaseDto']
      }
    }
    responses: {
      /** successful operation */
      200: {
        schema: definitions['ProjectTemplateTermBaseListDto']
      }
      /** Bad request */
      400: unknown
      /** Not authorized */
      401: unknown
      /** Forbidden */
      403: unknown
      /** Resource not found */
      404: unknown
      /** Method not allowed */
      405: unknown
      /** Timeout */
      408: unknown
      /** Gone */
      410: unknown
      /** Unsupported media type */
      415: unknown
      /** Too many requests */
      429: unknown
      /** Internal server error */
      500: unknown
      /** Not implemented */
      501: unknown
    }
  }
  getProjectTemplateAccessSettings: {
    parameters: {
      path: {
        projectTemplateUid: string
      }
    }
    responses: {
      /** successful operation */
      200: {
        schema: definitions['ProjectSecuritySettingsDtoV2']
      }
      /** Bad request */
      400: unknown
      /** Not authorized */
      401: unknown
      /** Forbidden */
      403: unknown
      /** Resource not found */
      404: unknown
      /** Method not allowed */
      405: unknown
      /** Timeout */
      408: unknown
      /** Gone */
      410: unknown
      /** Unsupported media type */
      415: unknown
      /** Too many requests */
      429: unknown
      /** Internal server error */
      500: unknown
      /** Not implemented */
      501: unknown
    }
  }
  editProjectTemplateAccessSettings: {
    parameters: {
      path: {
        projectTemplateUid: string
      }
      body: {
        body?: definitions['EditProjectSecuritySettingsDtoV2']
      }
    }
    responses: {
      /** successful operation */
      200: {
        schema: definitions['ProjectSecuritySettingsDtoV2']
      }
      /** Bad request */
      400: unknown
      /** Not authorized */
      401: unknown
      /** Forbidden */
      403: unknown
      /** Resource not found */
      404: unknown
      /** Method not allowed */
      405: unknown
      /** Timeout */
      408: unknown
      /** Gone */
      410: unknown
      /** Unsupported media type */
      415: unknown
      /** Too many requests */
      429: unknown
      /** Internal server error */
      500: unknown
      /** Not implemented */
      501: unknown
    }
  }
  getCustomFieldsPage_1: {
    parameters: {
      path: {
        projectTemplateUid: string
      }
      query: {
        /** Page number, starting with 0, default 0 */
        pageNumber?: number
        /** Page size, accepts values between 1 and 50, default 20 */
        pageSize?: number
        /** Filter by webhook creators UIDs */
        createdBy?: string[]
        /** Filter by webhook updaters UIDs */
        modifiedBy?: string[]
        /** Sort by this field */
        sortField?: 'CREATED' | 'LAST_MODIFIED'
        /** Sort direction */
        sortTrend?: 'ASC' | 'DESC'
      }
    }
    responses: {
      /** successful operation */
      200: {
        schema: definitions['PageDtoCustomFieldInstanceDto']
      }
      /** Bad request */
      400: unknown
      /** Not authorized */
      401: unknown
      /** Forbidden */
      403: unknown
      /** Resource not found */
      404: unknown
      /** Method not allowed */
      405: unknown
      /** Timeout */
      408: unknown
      /** Gone */
      410: unknown
      /** Unsupported media type */
      415: unknown
      /** Too many requests */
      429: unknown
      /** Internal server error */
      500: unknown
      /** Not implemented */
      501: unknown
    }
  }
  editCustomFields_1: {
    parameters: {
      path: {
        projectTemplateUid: string
      }
      body: {
        body?: definitions['UpdateCustomFieldInstancesDto']
      }
    }
    responses: {
      /** successful operation */
      200: {
        schema: definitions['CustomFieldInstancesDto']
      }
      /** Bad request */
      400: unknown
      /** Not authorized */
      401: unknown
      /** Forbidden */
      403: unknown
      /** Resource not found */
      404: unknown
      /** Method not allowed */
      405: unknown
      /** Timeout */
      408: unknown
      /** Gone */
      410: unknown
      /** Unsupported media type */
      415: unknown
      /** Too many requests */
      429: unknown
      /** Internal server error */
      500: unknown
      /** Not implemented */
      501: unknown
    }
  }
  createCustomFields_1: {
    parameters: {
      path: {
        projectTemplateUid: string
      }
      body: {
        body?: definitions['CreateCustomFieldInstancesDto']
      }
    }
    responses: {
      /** successful operation */
      200: {
        schema: definitions['CustomFieldInstancesDto']
      }
      /** Bad request */
      400: unknown
      /** Not authorized */
      401: unknown
      /** Forbidden */
      403: unknown
      /** Resource not found */
      404: unknown
      /** Method not allowed */
      405: unknown
      /** Timeout */
      408: unknown
      /** Gone */
      410: unknown
      /** Unsupported media type */
      415: unknown
      /** Too many requests */
      429: unknown
      /** Internal server error */
      500: unknown
      /** Not implemented */
      501: unknown
    }
  }
  getCustomField_2: {
    parameters: {
      path: {
        projectTemplateUid: string
        fieldInstanceUid: string
      }
    }
    responses: {
      /** successful operation */
      200: {
        schema: definitions['CustomFieldInstanceDto']
      }
      /** Bad request */
      400: unknown
      /** Not authorized */
      401: unknown
      /** Forbidden */
      403: unknown
      /** Resource not found */
      404: unknown
      /** Method not allowed */
      405: unknown
      /** Timeout */
      408: unknown
      /** Gone */
      410: unknown
      /** Unsupported media type */
      415: unknown
      /** Too many requests */
      429: unknown
      /** Internal server error */
      500: unknown
      /** Not implemented */
      501: unknown
    }
  }
  editCustomField_1: {
    parameters: {
      path: {
        projectTemplateUid: string
        fieldInstanceUid: string
      }
      body: {
        body?: definitions['UpdateCustomFieldInstanceDto']
      }
    }
    responses: {
      /** successful operation */
      200: {
        schema: definitions['CustomFieldInstanceDto']
      }
      /** Bad request */
      400: unknown
      /** Not authorized */
      401: unknown
      /** Forbidden */
      403: unknown
      /** Resource not found */
      404: unknown
      /** Method not allowed */
      405: unknown
      /** Timeout */
      408: unknown
      /** Gone */
      410: unknown
      /** Unsupported media type */
      415: unknown
      /** Too many requests */
      429: unknown
      /** Internal server error */
      500: unknown
      /** Not implemented */
      501: unknown
    }
  }
  deleteCustomField_2: {
    parameters: {
      path: {
        projectTemplateUid: string
        fieldInstanceUid: string
      }
    }
    responses: {
      /** Bad request */
      400: unknown
      /** Not authorized */
      401: unknown
      /** Forbidden */
      403: unknown
      /** Resource not found */
      404: unknown
      /** Method not allowed */
      405: unknown
      /** Timeout */
      408: unknown
      /** Gone */
      410: unknown
      /** Unsupported media type */
      415: unknown
      /** Too many requests */
      429: unknown
      /** Internal server error */
      500: unknown
      /** Not implemented */
      501: unknown
    }
  }
  getProjectTermBases: {
    parameters: {
      path: {
        projectUid: string
      }
    }
    responses: {
      /** successful operation */
      200: {
        schema: definitions['ProjectTermBaseListDto']
      }
      /** Bad request */
      400: unknown
      /** Not authorized */
      401: unknown
      /** Forbidden */
      403: unknown
      /** Resource not found */
      404: unknown
      /** Method not allowed */
      405: unknown
      /** Timeout */
      408: unknown
      /** Gone */
      410: unknown
      /** Unsupported media type */
      415: unknown
      /** Too many requests */
      429: unknown
      /** Internal server error */
      500: unknown
      /** Not implemented */
      501: unknown
    }
  }
  setProjectTermBases: {
    parameters: {
      path: {
        projectUid: string
      }
      body: {
        body?: definitions['SetTermBaseDto']
      }
    }
    responses: {
      /** successful operation */
      200: {
        schema: definitions['ProjectTermBaseListDto']
      }
      /** Bad request */
      400: unknown
      /** Not authorized */
      401: unknown
      /** Forbidden */
      403: unknown
      /** Resource not found */
      404: unknown
      /** Method not allowed */
      405: unknown
      /** Timeout */
      408: unknown
      /** Gone */
      410: unknown
      /** Unsupported media type */
      415: unknown
      /** Too many requests */
      429: unknown
      /** Internal server error */
      500: unknown
      /** Not implemented */
      501: unknown
    }
  }
  relevantTermBases: {
    parameters: {
      path: {
        projectUid: string
      }
      query: {
        name?: string
        domainName?: string
        clientName?: string
        subDomainName?: string
        targetLangs?: string[]
        strictLangMatching?: boolean
        /** Page number, starting with 0, default 0 */
        pageNumber?: number
        /** Page size, accepts values between 1 and 50, default 50 */
        pageSize?: number
      }
    }
    responses: {
      /** successful operation */
      200: {
        schema: definitions['PageDtoTermBaseDto']
      }
      /** Bad request */
      400: unknown
      /** Not authorized */
      401: unknown
      /** Forbidden */
      403: unknown
      /** Resource not found */
      404: unknown
      /** Method not allowed */
      405: unknown
      /** Timeout */
      408: unknown
      /** Gone */
      410: unknown
      /** Unsupported media type */
      415: unknown
      /** Too many requests */
      429: unknown
      /** Internal server error */
      500: unknown
      /** Not implemented */
      501: unknown
    }
  }
  relevantTransMemories_1: {
    parameters: {
      path: {
        projectUid: string
      }
      query: {
        name?: string
        domainName?: string
        clientName?: string
        subDomainName?: string
        targetLangs?: string[]
        strictLangMatching?: boolean
        /** Page number, starting with 0, default 0 */
        pageNumber?: number
        /** Page size, accepts values between 1 and 50, default 50 */
        pageSize?: number
      }
    }
    responses: {
      /** successful operation */
      200: {
        schema: definitions['PageDtoTransMemoryDto']
      }
      /** Bad request */
      400: unknown
      /** Not authorized */
      401: unknown
      /** Forbidden */
      403: unknown
      /** Resource not found */
      404: unknown
      /** Method not allowed */
      405: unknown
      /** Timeout */
      408: unknown
      /** Gone */
      410: unknown
      /** Unsupported media type */
      415: unknown
      /** Too many requests */
      429: unknown
      /** Internal server error */
      500: unknown
      /** Not implemented */
      501: unknown
    }
  }
  /**
   * Returns at most <i>maxSegments</i>
   *             records with <i>score >= scoreThreshold</i> and at most <i>maxSubsegments</i> records which are subsegment,
   *             i.e. the source text is substring of the query text.
   */
  searchSegment_1: {
    parameters: {
      path: {
        projectUid: string
      }
      body: {
        body?: definitions['SearchTMRequestDto']
      }
    }
    responses: {
      /** successful operation */
      200: {
        schema: definitions['SearchResponseListTmDto']
      }
      /** Bad request */
      400: unknown
      /** Not authorized */
      401: unknown
      /** Forbidden */
      403: unknown
      /** Resource not found */
      404: unknown
      /** Method not allowed */
      405: unknown
      /** Timeout */
      408: unknown
      /** Gone */
      410: unknown
      /** Unsupported media type */
      415: unknown
      /** Too many requests */
      429: unknown
      /** Internal server error */
      500: unknown
      /** Not implemented */
      501: unknown
    }
  }
  get_2: {
    parameters: {
      path: {
        quoteUid: string
      }
    }
    responses: {
      /** successful operation */
      200: {
        schema: definitions['QuoteDto']
      }
      /** Bad request */
      400: unknown
      /** Not authorized */
      401: unknown
      /** Forbidden */
      403: unknown
      /** Resource not found */
      404: unknown
      /** Method not allowed */
      405: unknown
      /** Timeout */
      408: unknown
      /** Gone */
      410: unknown
      /** Unsupported media type */
      415: unknown
      /** Too many requests */
      429: unknown
      /** Internal server error */
      500: unknown
      /** Not implemented */
      501: unknown
    }
  }
  deleteQuote: {
    parameters: {
      path: {
        quoteUid: string
      }
    }
    responses: {
      /** No Content */
      204: never
      /** Bad request */
      400: unknown
      /** Not authorized */
      401: unknown
      /** Forbidden */
      403: unknown
      /** Resource not found */
      404: unknown
      /** Method not allowed */
      405: unknown
      /** Timeout */
      408: unknown
      /** Gone */
      410: unknown
      /** Unsupported media type */
      415: unknown
      /** Too many requests */
      429: unknown
      /** Internal server error */
      500: unknown
      /** Not implemented */
      501: unknown
    }
  }
  emailQuotes: {
    parameters: {
      body: {
        body?: definitions['EmailQuotesRequestDto']
      }
    }
    responses: {
      /** successful operation */
      200: {
        schema: definitions['EmailQuotesResponseDto']
      }
      /** Bad request */
      400: unknown
      /** Not authorized */
      401: unknown
      /** Forbidden */
      403: unknown
      /** Resource not found */
      404: unknown
      /** Method not allowed */
      405: unknown
      /** Timeout */
      408: unknown
      /** Gone */
      410: unknown
      /** Unsupported media type */
      415: unknown
      /** Too many requests */
      429: unknown
      /** Internal server error */
      500: unknown
      /** Not implemented */
      501: unknown
    }
  }
  getServiceProviderConfigDto: {
    parameters: {}
    responses: {
      /** successful operation */
      200: {
        schema: definitions['ServiceProviderConfigDto']
      }
      /** Bad request */
      400: unknown
      /** Not authorized */
      401: unknown
      /** Forbidden */
      403: unknown
      /** Resource not found */
      404: unknown
      /** Method not allowed */
      405: unknown
      /** Timeout */
      408: unknown
      /** Gone */
      410: unknown
      /** Unsupported media type */
      415: unknown
      /** Too many requests */
      429: unknown
      /** Internal server error */
      500: unknown
      /** Not implemented */
      501: unknown
    }
  }
  getResourceTypes: {
    parameters: {}
    responses: {
      /** successful operation */
      200: {
        schema: definitions['ScimResourceTypeSchema'][]
      }
      /** Bad request */
      400: unknown
      /** Not authorized */
      401: unknown
      /** Forbidden */
      403: unknown
      /** Resource not found */
      404: unknown
      /** Method not allowed */
      405: unknown
      /** Timeout */
      408: unknown
      /** Gone */
      410: unknown
      /** Unsupported media type */
      415: unknown
      /** Too many requests */
      429: unknown
      /** Internal server error */
      500: unknown
      /** Not implemented */
      501: unknown
    }
  }
  getSchemas: {
    parameters: {}
    responses: {
      /** successful operation */
      200: {
        schema: definitions['ScimResourceSchema'][]
      }
      /** Bad request */
      400: unknown
      /** Not authorized */
      401: unknown
      /** Forbidden */
      403: unknown
      /** Resource not found */
      404: unknown
      /** Method not allowed */
      405: unknown
      /** Timeout */
      408: unknown
      /** Gone */
      410: unknown
      /** Unsupported media type */
      415: unknown
      /** Too many requests */
      429: unknown
      /** Internal server error */
      500: unknown
      /** Not implemented */
      501: unknown
    }
  }
  getSchemaByUrn: {
    parameters: {
      path: {
        schemaUrn: string
      }
    }
    responses: {
      /** successful operation */
      200: {
        schema: definitions['ScimResourceSchema']
      }
      /** Bad request */
      400: unknown
      /** Not authorized */
      401: unknown
      /** Forbidden */
      403: unknown
      /** Resource not found */
      404: unknown
      /** Method not allowed */
      405: unknown
      /** Timeout */
      408: unknown
      /** Gone */
      410: unknown
      /** Unsupported media type */
      415: unknown
      /** Too many requests */
      429: unknown
      /** Internal server error */
      500: unknown
      /** Not implemented */
      501: unknown
    }
  }
  getScimUser: {
    parameters: {
      header: {
        Authorization?: string
      }
      path: {
        userId: number
      }
    }
    responses: {
      /** successful operation */
      200: {
        schema: definitions['ScimUserCoreDto']
      }
      /** Bad request */
      400: unknown
      /** Not authorized */
      401: unknown
      /** Forbidden */
      403: unknown
      /** Resource not found */
      404: unknown
      /** Method not allowed */
      405: unknown
      /** Timeout */
      408: unknown
      /** Gone */
      410: unknown
      /** Unsupported media type */
      415: unknown
      /** Too many requests */
      429: unknown
      /** Internal server error */
      500: unknown
      /** Not implemented */
      501: unknown
    }
  }
  editUser: {
    parameters: {
      body: {
        body?: definitions['ScimUserCoreDto']
      }
      header: {
        Authorization?: string
      }
      path: {
        userId: number
      }
    }
    responses: {
      /** Updated */
      200: {
        schema: definitions['ScimUserCoreDto']
      }
      /** Bad request */
      400: unknown
      /** Not authorized */
      401: unknown
      /** Forbidden */
      403: unknown
      /** Resource not found */
      404: unknown
      /** Method not allowed */
      405: unknown
      /** Timeout */
      408: unknown
      /** Gone */
      410: unknown
      /** Unsupported media type */
      415: unknown
      /** Too many requests */
      429: unknown
      /** Internal server error */
      500: unknown
      /** Not implemented */
      501: unknown
    }
  }
  deleteUser: {
    parameters: {
      header: {
        Authorization?: string
      }
      path: {
        userId: number
      }
    }
    responses: {
      /** No Content */
      200: unknown
      /** Bad request */
      400: unknown
      /** Not authorized */
      401: unknown
      /** Forbidden */
      403: unknown
      /** Resource not found */
      404: unknown
      /** Method not allowed */
      405: unknown
      /** Timeout */
      408: unknown
      /** Gone */
      410: unknown
      /** Unsupported media type */
      415: unknown
      /** Too many requests */
      429: unknown
      /** Internal server error */
      500: unknown
      /** Not implemented */
      501: unknown
    }
  }
  patchUser: {
    parameters: {
      body: {
        body?: {[key: string]: {[key: string]: unknown}}
      }
      header: {
        Authorization?: string
      }
      path: {
        userId: number
      }
    }
    responses: {
      /** Patched */
      200: {
        schema: definitions['ScimUserCoreDto']
      }
      /** Bad request */
      400: unknown
      /** Not authorized */
      401: unknown
      /** Forbidden */
      403: unknown
      /** Resource not found */
      404: unknown
      /** Method not allowed */
      405: unknown
      /** Timeout */
      408: unknown
      /** Gone */
      410: unknown
      /** Unsupported media type */
      415: unknown
      /** Too many requests */
      429: unknown
      /** Internal server error */
      500: unknown
      /** Not implemented */
      501: unknown
    }
  }
  /**
   * This operation supports <a href="http://ldapwiki.com/wiki/SCIM%20Filtering" target="_blank">SCIM Filter</a>,
   * <a href="http://ldapwiki.com/wiki/SCIM%20Search%20Request" target="_blank">SCIM attributes</a> and
   * <a href="http://ldapwiki.com/wiki/SCIM%20Sorting" target="_blank">SCIM sort</a>
   *
   * Supported attributes:
   *   - `id`
   *   - `active`
   *   - `userName`
   *   - `name.givenName`
   *   - `name.familyName`
   *   - `emails.value`
   *   - `meta.created`
   */
  searchUsers: {
    parameters: {
      header: {
        Authorization?: string
      }
      query: {
        /** See method description */
        filter?: string
        /** See method description */
        attributes?: string
        /** See method description */
        sortBy?: string
        /** See method description */
        sortOrder?: 'ascending' | 'descending'
        /** The 1-based index of the first search result. Default 1 */
        startIndex?: number
        /** Non-negative Integer. Specifies the desired maximum number of search results per page; e.g., 10. */
        count?: number
      }
    }
    responses: {
      /** Bad request */
      400: unknown
      /** Not authorized */
      401: unknown
      /** Forbidden */
      403: unknown
      /** Resource not found */
      404: unknown
      /** Method not allowed */
      405: unknown
      /** Timeout */
      408: unknown
      /** Gone */
      410: unknown
      /** Unsupported media type */
      415: unknown
      /** Too many requests */
      429: unknown
      /** Internal server error */
      500: unknown
      /** Not implemented */
      501: unknown
    }
  }
  /**
   * Supported schema: `"urn:ietf:params:scim:schemas:core:2.0:User"`
   *
   * Create active user:
   * ```
   * {
   *     "schemas": [
   *         "urn:ietf:params:scim:schemas:core:2.0:User"
   *     ],
   *     "active": true,
   *     "userName": "john.doe",
   *     "emails": [
   *         {
   *             "primary": true,
   *             "value": "john.doe@example.com",
   *             "type": "work"
   *         }
   *     ],
   *     "name": {
   *         "givenName": "John",
   *         "familyName": "Doe"
   *     }
   * }
   * ```
   */
  createUserSCIM: {
    parameters: {
      body: {
        body?: definitions['ScimUserCoreDto']
      }
      header: {
        Authorization?: string
      }
    }
    responses: {
      /** Created */
      201: {
        schema: definitions['ScimUserCoreDto']
      }
      /** Bad request */
      400: unknown
      /** Not authorized */
      401: unknown
      /** Forbidden */
      403: unknown
      /** Resource not found */
      404: unknown
      /** Method not allowed */
      405: unknown
      /** Timeout */
      408: unknown
      /** Gone */
      410: unknown
      /** Unsupported media type */
      415: unknown
      /** Too many requests */
      429: unknown
      /** Internal server error */
      500: unknown
      /** Not implemented */
      501: unknown
    }
  }
  getSegmentationRule: {
    parameters: {
      path: {
        segRuleId: number
      }
    }
    responses: {
      /** successful operation */
      200: {
        schema: definitions['SegmentationRuleDto']
      }
      /** Bad request */
      400: unknown
      /** Not authorized */
      401: unknown
      /** Forbidden */
      403: unknown
      /** Resource not found */
      404: unknown
      /** Method not allowed */
      405: unknown
      /** Timeout */
      408: unknown
      /** Gone */
      410: unknown
      /** Unsupported media type */
      415: unknown
      /** Too many requests */
      429: unknown
      /** Internal server error */
      500: unknown
      /** Not implemented */
      501: unknown
    }
  }
  updatesSegmentationRule: {
    parameters: {
      body: {
        body?: definitions['EditSegmentationRuleDto']
      }
      path: {
        segRuleId: number
      }
    }
    responses: {
      /** successful operation */
      200: {
        schema: definitions['SegmentationRuleDto']
      }
      /** Bad request */
      400: unknown
      /** Not authorized */
      401: unknown
      /** Forbidden */
      403: unknown
      /** Resource not found */
      404: unknown
      /** Method not allowed */
      405: unknown
      /** Timeout */
      408: unknown
      /** Gone */
      410: unknown
      /** Unsupported media type */
      415: unknown
      /** Too many requests */
      429: unknown
      /** Internal server error */
      500: unknown
      /** Not implemented */
      501: unknown
    }
  }
  deletesSegmentationRule: {
    parameters: {
      path: {
        segRuleId: number
      }
    }
    responses: {
      /** No Content */
      204: never
      /** Bad request */
      400: unknown
      /** Not authorized */
      401: unknown
      /** Forbidden */
      403: unknown
      /** Resource not found */
      404: unknown
      /** Method not allowed */
      405: unknown
      /** Timeout */
      408: unknown
      /** Gone */
      410: unknown
      /** Unsupported media type */
      415: unknown
      /** Too many requests */
      429: unknown
      /** Internal server error */
      500: unknown
      /** Not implemented */
      501: unknown
    }
  }
  getListOfSegmentationRules: {
    parameters: {
      query: {
        locales?: string[]
        /** Page number, starting with 0, default 0 */
        pageNumber?: number
        /** Page size, accepts values between 1 and 50, default 50 */
        pageSize?: number
      }
    }
    responses: {
      /** successful operation */
      200: {
        schema: definitions['PageDtoSegmentationRuleReference']
      }
      /** Bad request */
      400: unknown
      /** Not authorized */
      401: unknown
      /** Forbidden */
      403: unknown
      /** Resource not found */
      404: unknown
      /** Method not allowed */
      405: unknown
      /** Timeout */
      408: unknown
      /** Gone */
      410: unknown
      /** Unsupported media type */
      415: unknown
      /** Too many requests */
      429: unknown
      /** Internal server error */
      500: unknown
      /** Not implemented */
      501: unknown
    }
  }
  /** Creates new Segmentation Rule with file and segRule JSON Object as header parameter. The same object is used for GET action. */
  createSegmentationRule: {
    parameters: {
      body: {
        /** streamed file */
        body: definitions['InputStream']
      }
      header: {
        segRule: string
      }
    }
    responses: {
      /** Created */
      201: {
        schema: definitions['SegmentationRuleDto']
      }
      /** Bad request */
      400: unknown
      /** Not authorized */
      401: unknown
      /** Forbidden */
      403: unknown
      /** Resource not found */
      404: unknown
      /** Method not allowed */
      405: unknown
      /** Timeout */
      408: unknown
      /** Gone */
      410: unknown
      /** Unsupported media type */
      415: unknown
      /** Too many requests */
      429: unknown
      /** Internal server error */
      500: unknown
      /** Not implemented */
      501: unknown
    }
  }
  /** Spell check using the settings from the project of the job */
  checkByJob: {
    parameters: {
      path: {
        jobUid: string
      }
      body: {
        body?: definitions['SpellCheckRequestDto']
      }
    }
    responses: {
      /** successful operation */
      200: {
        schema: definitions['SpellCheckResponseDto']
      }
      /** Bad request */
      400: unknown
      /** Not authorized */
      401: unknown
      /** Forbidden */
      403: unknown
      /** Resource not found */
      404: unknown
      /** Method not allowed */
      405: unknown
      /** Timeout */
      408: unknown
      /** Gone */
      410: unknown
      /** Unsupported media type */
      415: unknown
      /** Too many requests */
      429: unknown
      /** Internal server error */
      500: unknown
      /** Not implemented */
      501: unknown
    }
  }
  /** Spell check suggest using the users's spell check dictionary */
  suggest: {
    parameters: {
      body: {
        body?: definitions['SuggestRequestDto']
      }
    }
    responses: {
      /** successful operation */
      200: {
        schema: definitions['SuggestResponseDto']
      }
      /** Bad request */
      400: unknown
      /** Not authorized */
      401: unknown
      /** Forbidden */
      403: unknown
      /** Resource not found */
      404: unknown
      /** Method not allowed */
      405: unknown
      /** Timeout */
      408: unknown
      /** Gone */
      410: unknown
      /** Unsupported media type */
      415: unknown
      /** Too many requests */
      429: unknown
      /** Internal server error */
      500: unknown
      /** Not implemented */
      501: unknown
    }
  }
  addWord: {
    parameters: {
      body: {
        body?: definitions['DictionaryItemDto']
      }
    }
    responses: {
      /** No Content */
      204: never
      /** Bad request */
      400: unknown
      /** Not authorized */
      401: unknown
      /** Forbidden */
      403: unknown
      /** Resource not found */
      404: unknown
      /** Method not allowed */
      405: unknown
      /** Timeout */
      408: unknown
      /** Gone */
      410: unknown
      /** Unsupported media type */
      415: unknown
      /** Too many requests */
      429: unknown
      /** Internal server error */
      500: unknown
      /** Not implemented */
      501: unknown
    }
  }
  /** Spell check using the settings of the user's organization */
  check: {
    parameters: {
      body: {
        body?: definitions['SpellCheckRequestDto']
      }
    }
    responses: {
      /** successful operation */
      200: {
        schema: definitions['SpellCheckResponseDto']
      }
      /** Bad request */
      400: unknown
      /** Not authorized */
      401: unknown
      /** Forbidden */
      403: unknown
      /** Resource not found */
      404: unknown
      /** Method not allowed */
      405: unknown
      /** Timeout */
      408: unknown
      /** Gone */
      410: unknown
      /** Unsupported media type */
      415: unknown
      /** Too many requests */
      429: unknown
      /** Internal server error */
      500: unknown
      /** Not implemented */
      501: unknown
    }
  }
  getSubDomain: {
    parameters: {
      path: {
        subDomainUid: string
      }
    }
    responses: {
      /** successful operation */
      200: {
        schema: definitions['SubDomainDto']
      }
      /** Bad request */
      400: unknown
      /** Not authorized */
      401: unknown
      /** Forbidden */
      403: unknown
      /** Resource not found */
      404: unknown
      /** Method not allowed */
      405: unknown
      /** Timeout */
      408: unknown
      /** Gone */
      410: unknown
      /** Unsupported media type */
      415: unknown
      /** Too many requests */
      429: unknown
      /** Internal server error */
      500: unknown
      /** Not implemented */
      501: unknown
    }
  }
  updateSubDomain: {
    parameters: {
      path: {
        subDomainUid: string
      }
      body: {
        body?: definitions['SubDomainEditDto']
      }
    }
    responses: {
      /** successful operation */
      200: {
        schema: definitions['SubDomainDto']
      }
      /** Bad request */
      400: unknown
      /** Not authorized */
      401: unknown
      /** Forbidden */
      403: unknown
      /** Resource not found */
      404: unknown
      /** Method not allowed */
      405: unknown
      /** Timeout */
      408: unknown
      /** Gone */
      410: unknown
      /** Unsupported media type */
      415: unknown
      /** Too many requests */
      429: unknown
      /** Internal server error */
      500: unknown
      /** Not implemented */
      501: unknown
    }
  }
  deleteSubDomain: {
    parameters: {
      path: {
        subDomainUid: string
      }
    }
    responses: {
      /** No Content */
      204: never
      /** Bad request */
      400: unknown
      /** Not authorized */
      401: unknown
      /** Forbidden */
      403: unknown
      /** Resource not found */
      404: unknown
      /** Method not allowed */
      405: unknown
      /** Timeout */
      408: unknown
      /** Gone */
      410: unknown
      /** Unsupported media type */
      415: unknown
      /** Too many requests */
      429: unknown
      /** Internal server error */
      500: unknown
      /** Not implemented */
      501: unknown
    }
  }
  listSubDomains: {
    parameters: {
      query: {
        name?: string
        /** Uid of user */
        createdBy?: string
        sort?: 'NAME' | 'DATE_CREATED'
        order?: 'ASC' | 'DESC'
        /** Page number, starting with 0, default 0 */
        pageNumber?: number
        /** Page size, accepts values between 1 and 50, default 50 */
        pageSize?: number
      }
    }
    responses: {
      /** successful operation */
      200: {
        schema: definitions['PageDtoSubDomainDto']
      }
      /** Bad request */
      400: unknown
      /** Not authorized */
      401: unknown
      /** Forbidden */
      403: unknown
      /** Resource not found */
      404: unknown
      /** Method not allowed */
      405: unknown
      /** Timeout */
      408: unknown
      /** Gone */
      410: unknown
      /** Unsupported media type */
      415: unknown
      /** Too many requests */
      429: unknown
      /** Internal server error */
      500: unknown
      /** Not implemented */
      501: unknown
    }
  }
  createSubDomain: {
    parameters: {
      body: {
        body?: definitions['SubDomainEditDto']
      }
    }
    responses: {
      /** Created */
      201: {
        schema: definitions['SubDomainDto']
      }
      /** Bad request */
      400: unknown
      /** Not authorized */
      401: unknown
      /** Forbidden */
      403: unknown
      /** Resource not found */
      404: unknown
      /** Method not allowed */
      405: unknown
      /** Timeout */
      408: unknown
      /** Gone */
      410: unknown
      /** Unsupported media type */
      415: unknown
      /** Too many requests */
      429: unknown
      /** Internal server error */
      500: unknown
      /** Not implemented */
      501: unknown
    }
  }
  getTermBase: {
    parameters: {
      path: {
        termBaseUid: string
      }
    }
    responses: {
      /** successful operation */
      200: {
        schema: definitions['TermBaseDto']
      }
      /** Bad request */
      400: unknown
      /** Not authorized */
      401: unknown
      /** Forbidden */
      403: unknown
      /** Resource not found */
      404: unknown
      /** Method not allowed */
      405: unknown
      /** Timeout */
      408: unknown
      /** Gone */
      410: unknown
      /** Unsupported media type */
      415: unknown
      /** Too many requests */
      429: unknown
      /** Internal server error */
      500: unknown
      /** Not implemented */
      501: unknown
    }
  }
  /** It is possible to add new languages only */
  updateTermBase: {
    parameters: {
      path: {
        termBaseUid: string
      }
      body: {
        body?: definitions['TermBaseEditDto']
      }
    }
    responses: {
      /** successful operation */
      200: {
        schema: definitions['TermBaseDto']
      }
      /** Bad request */
      400: unknown
      /** Not authorized */
      401: unknown
      /** Forbidden */
      403: unknown
      /** Resource not found */
      404: unknown
      /** Method not allowed */
      405: unknown
      /** Timeout */
      408: unknown
      /** Gone */
      410: unknown
      /** Unsupported media type */
      415: unknown
      /** Too many requests */
      429: unknown
      /** Internal server error */
      500: unknown
      /** Not implemented */
      501: unknown
    }
  }
  deleteTermBase: {
    parameters: {
      path: {
        termBaseUid: string
      }
      query: {
        /**
         * purge=false - the Termbase is can later be restored,
         *                     "purge=true - the Termbase is completely deleted and cannot be restored
         */
        purge?: boolean
      }
    }
    responses: {
      /** No Content */
      204: never
      /** Bad request */
      400: unknown
      /** Not authorized */
      401: unknown
      /** Forbidden */
      403: unknown
      /** Resource not found */
      404: unknown
      /** Method not allowed */
      405: unknown
      /** Timeout */
      408: unknown
      /** Gone */
      410: unknown
      /** Unsupported media type */
      415: unknown
      /** Too many requests */
      429: unknown
      /** Internal server error */
      500: unknown
      /** Not implemented */
      501: unknown
    }
  }
  listTermBases: {
    parameters: {
      query: {
        name?: string
        /** Language of the term base */
        lang?: string[]
        clientId?: string
        domainId?: string
        subDomainId?: string
        /** Page number, starting with 0, default 0 */
        pageNumber?: number
        /** Page size, accepts values between 1 and 50, default 50 */
        pageSize?: number
      }
    }
    responses: {
      /** successful operation */
      200: {
        schema: definitions['PageDtoTermBaseDto']
      }
      /** Bad request */
      400: unknown
      /** Not authorized */
      401: unknown
      /** Forbidden */
      403: unknown
      /** Resource not found */
      404: unknown
      /** Method not allowed */
      405: unknown
      /** Timeout */
      408: unknown
      /** Gone */
      410: unknown
      /** Unsupported media type */
      415: unknown
      /** Too many requests */
      429: unknown
      /** Internal server error */
      500: unknown
      /** Not implemented */
      501: unknown
    }
  }
  createTermBase: {
    parameters: {
      body: {
        body?: definitions['TermBaseEditDto']
      }
    }
    responses: {
      /** Created */
      200: {
        schema: definitions['TermBaseDto']
      }
      /** Bad request */
      400: unknown
      /** Not authorized */
      401: unknown
      /** Forbidden */
      403: unknown
      /** Resource not found */
      404: unknown
      /** Method not allowed */
      405: unknown
      /** Timeout */
      408: unknown
      /** Gone */
      410: unknown
      /** Unsupported media type */
      415: unknown
      /** Too many requests */
      429: unknown
      /** Internal server error */
      500: unknown
      /** Not implemented */
      501: unknown
    }
  }
  /**
   * Terms can be imported from XLS/XLSX and TBX file formats into a term base.
   * See <a target="_blank" href="https://support.phrase.com/hc/en-us/articles/5709733372188">Phrase Help Center</a>
   */
  importTermBase: {
    parameters: {
      body: {
        body?: definitions['InputStream']
      }
      header: {
        /** must match pattern `((inline|attachment); )?filename\*=UTF-8''(.+)` */
        'Content-Disposition': string
      }
      path: {
        termBaseUid: string
      }
      query: {
        charset?: string
        strictLangMatching?: boolean
        updateTerms?: boolean
      }
    }
    responses: {
      /** successful operation */
      200: {
        schema: definitions['ImportTermBaseResponseDto']
      }
      /** Bad request */
      400: unknown
      /** Not authorized */
      401: unknown
      /** Forbidden */
      403: unknown
      /** Resource not found */
      404: unknown
      /** Method not allowed */
      405: unknown
      /** Timeout */
      408: unknown
      /** Gone */
      410: unknown
      /** Unsupported media type */
      415: unknown
      /** Too many requests */
      429: unknown
      /** Internal server error */
      500: unknown
      /** Not implemented */
      501: unknown
    }
  }
  listConcepts: {
    parameters: {
      path: {
        termBaseUid: string
      }
      query: {
        /** Page number, starting with 0, default 0 */
        pageNumber?: number
        /** Page size, accepts values between 1 and 50, default 50 */
        pageSize?: number
      }
    }
    responses: {
      /** successful operation */
      200: {
        schema: definitions['ConceptListResponseDto']
      }
      /** Bad request */
      400: unknown
      /** Not authorized */
      401: unknown
      /** Forbidden */
      403: unknown
      /** Resource not found */
      404: unknown
      /** Method not allowed */
      405: unknown
      /** Timeout */
      408: unknown
      /** Gone */
      410: unknown
      /** Unsupported media type */
      415: unknown
      /** Too many requests */
      429: unknown
      /** Internal server error */
      500: unknown
      /** Not implemented */
      501: unknown
    }
  }
  createConcept: {
    parameters: {
      path: {
        termBaseUid: string
      }
      body: {
        body?: definitions['ConceptEditDto']
      }
    }
    responses: {
      /** Created */
      201: {
        schema: definitions['ConceptWithMetadataDto']
      }
      /** Bad request */
      400: unknown
      /** Not authorized */
      401: unknown
      /** Forbidden */
      403: unknown
      /** Resource not found */
      404: unknown
      /** Method not allowed */
      405: unknown
      /** Timeout */
      408: unknown
      /** Gone */
      410: unknown
      /** Unsupported media type */
      415: unknown
      /** Too many requests */
      429: unknown
      /** Internal server error */
      500: unknown
      /** Not implemented */
      501: unknown
    }
  }
  deleteConcepts: {
    parameters: {
      body: {
        body?: definitions['ConceptListReference']
      }
      path: {
        termBaseUid: string
      }
    }
    responses: {
      /** No Content */
      204: never
      /** Bad request */
      400: unknown
      /** Not authorized */
      401: unknown
      /** Forbidden */
      403: unknown
      /** Resource not found */
      404: unknown
      /** Method not allowed */
      405: unknown
      /** Timeout */
      408: unknown
      /** Gone */
      410: unknown
      /** Unsupported media type */
      415: unknown
      /** Too many requests */
      429: unknown
      /** Internal server error */
      500: unknown
      /** Not implemented */
      501: unknown
    }
  }
  getConcept: {
    parameters: {
      path: {
        termBaseUid: string
        conceptUid: string
      }
    }
    responses: {
      /** successful operation */
      200: {
        schema: definitions['ConceptWithMetadataDto']
      }
      /** Bad request */
      400: unknown
      /** Not authorized */
      401: unknown
      /** Forbidden */
      403: unknown
      /** Resource not found */
      404: unknown
      /** Method not allowed */
      405: unknown
      /** Timeout */
      408: unknown
      /** Gone */
      410: unknown
      /** Unsupported media type */
      415: unknown
      /** Too many requests */
      429: unknown
      /** Internal server error */
      500: unknown
      /** Not implemented */
      501: unknown
    }
  }
  updateConcept: {
    parameters: {
      path: {
        termBaseUid: string
        conceptUid: string
      }
      body: {
        body?: definitions['ConceptEditDto']
      }
    }
    responses: {
      /** Ok */
      200: {
        schema: definitions['ConceptWithMetadataDto']
      }
      /** Bad request */
      400: unknown
      /** Not authorized */
      401: unknown
      /** Forbidden */
      403: unknown
      /** Resource not found */
      404: unknown
      /** Method not allowed */
      405: unknown
      /** Timeout */
      408: unknown
      /** Gone */
      410: unknown
      /** Unsupported media type */
      415: unknown
      /** Too many requests */
      429: unknown
      /** Internal server error */
      500: unknown
      /** Not implemented */
      501: unknown
    }
  }
  /** Set conceptId to assign the term to an existing concept, otherwise a new concept will be created. */
  createTerm: {
    parameters: {
      path: {
        termBaseUid: string
      }
      body: {
        body?: definitions['TermCreateDto']
      }
    }
    responses: {
      /** Created */
      201: {
        schema: definitions['TermDto']
      }
      /** Bad request */
      400: unknown
      /** Not authorized */
      401: unknown
      /** Forbidden */
      403: unknown
      /** Resource not found */
      404: unknown
      /** Method not allowed */
      405: unknown
      /** Timeout */
      408: unknown
      /** Gone */
      410: unknown
      /** Unsupported media type */
      415: unknown
      /** Too many requests */
      429: unknown
      /** Internal server error */
      500: unknown
      /** Not implemented */
      501: unknown
    }
  }
  /** Deletes all terms */
  clearTermBase: {
    parameters: {
      path: {
        termBaseUid: string
      }
    }
    responses: {
      /** No Content */
      204: never
      /** Bad request */
      400: unknown
      /** Not authorized */
      401: unknown
      /** Forbidden */
      403: unknown
      /** Resource not found */
      404: unknown
      /** Method not allowed */
      405: unknown
      /** Timeout */
      408: unknown
      /** Gone */
      410: unknown
      /** Unsupported media type */
      415: unknown
      /** Too many requests */
      429: unknown
      /** Internal server error */
      500: unknown
      /** Not implemented */
      501: unknown
    }
  }
  getTerm: {
    parameters: {
      path: {
        termBaseUid: string
        termId: string
      }
    }
    responses: {
      /** successful operation */
      200: {
        schema: definitions['TermDto']
      }
      /** Bad request */
      400: unknown
      /** Not authorized */
      401: unknown
      /** Forbidden */
      403: unknown
      /** Resource not found */
      404: unknown
      /** Method not allowed */
      405: unknown
      /** Timeout */
      408: unknown
      /** Gone */
      410: unknown
      /** Unsupported media type */
      415: unknown
      /** Too many requests */
      429: unknown
      /** Internal server error */
      500: unknown
      /** Not implemented */
      501: unknown
    }
  }
  updateTerm: {
    parameters: {
      path: {
        termBaseUid: string
        termId: string
      }
      body: {
        body?: definitions['TermEditDto']
      }
    }
    responses: {
      /** successful operation */
      200: {
        schema: definitions['TermDto']
      }
      /** Bad request */
      400: unknown
      /** Not authorized */
      401: unknown
      /** Forbidden */
      403: unknown
      /** Resource not found */
      404: unknown
      /** Method not allowed */
      405: unknown
      /** Timeout */
      408: unknown
      /** Gone */
      410: unknown
      /** Unsupported media type */
      415: unknown
      /** Too many requests */
      429: unknown
      /** Internal server error */
      500: unknown
      /** Not implemented */
      501: unknown
    }
  }
  deleteTerm: {
    parameters: {
      path: {
        termBaseUid: string
        termId: string
      }
    }
    responses: {
      /** No Content */
      204: never
      /** Bad request */
      400: unknown
      /** Not authorized */
      401: unknown
      /** Forbidden */
      403: unknown
      /** Resource not found */
      404: unknown
      /** Method not allowed */
      405: unknown
      /** Timeout */
      408: unknown
      /** Gone */
      410: unknown
      /** Unsupported media type */
      415: unknown
      /** Too many requests */
      429: unknown
      /** Internal server error */
      500: unknown
      /** Not implemented */
      501: unknown
    }
  }
  deleteConcept: {
    parameters: {
      path: {
        termBaseUid: string
        conceptId: string
      }
    }
    responses: {
      /** No Content */
      204: never
      /** Bad request */
      400: unknown
      /** Not authorized */
      401: unknown
      /** Forbidden */
      403: unknown
      /** Resource not found */
      404: unknown
      /** Method not allowed */
      405: unknown
      /** Timeout */
      408: unknown
      /** Gone */
      410: unknown
      /** Unsupported media type */
      415: unknown
      /** Too many requests */
      429: unknown
      /** Internal server error */
      500: unknown
      /** Not implemented */
      501: unknown
    }
  }
  listTermsOfConcept: {
    parameters: {
      path: {
        termBaseUid: string
        conceptId: string
      }
    }
    responses: {
      /** successful operation */
      200: {
        schema: definitions['ConceptDto']
      }
      /** Bad request */
      400: unknown
      /** Not authorized */
      401: unknown
      /** Forbidden */
      403: unknown
      /** Resource not found */
      404: unknown
      /** Method not allowed */
      405: unknown
      /** Timeout */
      408: unknown
      /** Gone */
      410: unknown
      /** Unsupported media type */
      415: unknown
      /** Too many requests */
      429: unknown
      /** Internal server error */
      500: unknown
      /** Not implemented */
      501: unknown
    }
  }
  getLastBackgroundTask: {
    parameters: {
      path: {
        termBaseUid: string
      }
    }
    responses: {
      /** successful operation */
      200: {
        schema: definitions['BackgroundTasksTbDto']
      }
      /** Bad request */
      400: unknown
      /** Not authorized */
      401: unknown
      /** Forbidden */
      403: unknown
      /** Resource not found */
      404: unknown
      /** Method not allowed */
      405: unknown
      /** Timeout */
      408: unknown
      /** Gone */
      410: unknown
      /** Unsupported media type */
      415: unknown
      /** Too many requests */
      429: unknown
      /** Internal server error */
      500: unknown
      /** Not implemented */
      501: unknown
    }
  }
  browseTerms: {
    parameters: {
      path: {
        termBaseUid: string
      }
      body: {
        body?: definitions['BrowseRequestDto']
      }
    }
    responses: {
      /** successful operation */
      200: {
        schema: definitions['BrowseResponseListDto']
      }
      /** Bad request */
      400: unknown
      /** Not authorized */
      401: unknown
      /** Forbidden */
      403: unknown
      /** Resource not found */
      404: unknown
      /** Method not allowed */
      405: unknown
      /** Timeout */
      408: unknown
      /** Gone */
      410: unknown
      /** Unsupported media type */
      415: unknown
      /** Too many requests */
      429: unknown
      /** Internal server error */
      500: unknown
      /** Not implemented */
      501: unknown
    }
  }
  searchTerms: {
    parameters: {
      path: {
        termBaseUid: string
      }
      body: {
        body?: definitions['TermBaseSearchRequestDto']
      }
    }
    responses: {
      /** successful operation */
      200: {
        schema: definitions['SearchResponseListTbDto']
      }
      /** Bad request */
      400: unknown
      /** Not authorized */
      401: unknown
      /** Forbidden */
      403: unknown
      /** Resource not found */
      404: unknown
      /** Method not allowed */
      405: unknown
      /** Timeout */
      408: unknown
      /** Gone */
      410: unknown
      /** Unsupported media type */
      415: unknown
      /** Too many requests */
      429: unknown
      /** Internal server error */
      500: unknown
      /** Not implemented */
      501: unknown
    }
  }
  exportTermBase: {
    parameters: {
      path: {
        termBaseUid: string
      }
      query: {
        format?: 'Tbx' | 'Xlsx'
        charset?: string
        termStatus?: 'NEW' | 'APPROVED'
      }
    }
    responses: {
      /** application/octet-stream */
      200: unknown
      /** Bad request */
      400: unknown
      /** Not authorized */
      401: unknown
      /** Forbidden */
      403: unknown
      /** Resource not found */
      404: unknown
      /** Method not allowed */
      405: unknown
      /** Timeout */
      408: unknown
      /** Gone */
      410: unknown
      /** Unsupported media type */
      415: unknown
      /** Too many requests */
      429: unknown
      /** Internal server error */
      500: unknown
      /** Not implemented */
      501: unknown
    }
  }
  getTermBaseMetadata: {
    parameters: {
      path: {
        termBaseUid: string
      }
    }
    responses: {
      /** successful operation */
      200: {
        schema: definitions['MetadataTbDto']
      }
      /** Bad request */
      400: unknown
      /** Not authorized */
      401: unknown
      /** Forbidden */
      403: unknown
      /** Resource not found */
      404: unknown
      /** Method not allowed */
      405: unknown
      /** Timeout */
      408: unknown
      /** Gone */
      410: unknown
      /** Unsupported media type */
      415: unknown
      /** Too many requests */
      429: unknown
      /** Internal server error */
      500: unknown
      /** Not implemented */
      501: unknown
    }
  }
  listTransMemories: {
    parameters: {
      query: {
        name?: string
        sourceLang?: string
        targetLang?: string
        clientId?: string
        domainId?: string
        subDomainId?: string
        businessUnitId?: string
        /** Page number, starting with 0, default 0 */
        pageNumber?: number
        /** Page size, accepts values between 1 and 50, default 50 */
        pageSize?: number
      }
    }
    responses: {
      /** successful operation */
      200: {
        schema: definitions['PageDtoTransMemoryDto']
      }
      /** Bad request */
      400: unknown
      /** Not authorized */
      401: unknown
      /** Forbidden */
      403: unknown
      /** Resource not found */
      404: unknown
      /** Method not allowed */
      405: unknown
      /** Timeout */
      408: unknown
      /** Gone */
      410: unknown
      /** Unsupported media type */
      415: unknown
      /** Too many requests */
      429: unknown
      /** Internal server error */
      500: unknown
      /** Not implemented */
      501: unknown
    }
  }
  createTransMemory: {
    parameters: {
      body: {
        body?: definitions['TransMemoryCreateDto']
      }
    }
    responses: {
      /** Created */
      201: {
        schema: definitions['TransMemoryDto']
      }
      /** Bad request */
      400: unknown
      /** Not authorized */
      401: unknown
      /** Forbidden */
      403: unknown
      /** Resource not found */
      404: unknown
      /** Method not allowed */
      405: unknown
      /** Timeout */
      408: unknown
      /** Gone */
      410: unknown
      /** Unsupported media type */
      415: unknown
      /** Too many requests */
      429: unknown
      /** Internal server error */
      500: unknown
      /** Not implemented */
      501: unknown
    }
  }
  getTransMemory: {
    parameters: {
      path: {
        transMemoryUid: string
      }
    }
    responses: {
      /** successful operation */
      200: {
        schema: definitions['TransMemoryDto']
      }
      /** Bad request */
      400: unknown
      /** Not authorized */
      401: unknown
      /** Forbidden */
      403: unknown
      /** Resource not found */
      404: unknown
      /** Method not allowed */
      405: unknown
      /** Timeout */
      408: unknown
      /** Gone */
      410: unknown
      /** Unsupported media type */
      415: unknown
      /** Too many requests */
      429: unknown
      /** Internal server error */
      500: unknown
      /** Not implemented */
      501: unknown
    }
  }
  editTransMemory: {
    parameters: {
      path: {
        transMemoryUid: string
      }
      body: {
        body?: definitions['TransMemoryEditDto']
      }
    }
    responses: {
      /** successful operation */
      200: {
        schema: definitions['TransMemoryDto']
      }
      /** Bad request */
      400: unknown
      /** Not authorized */
      401: unknown
      /** Forbidden */
      403: unknown
      /** Resource not found */
      404: unknown
      /** Method not allowed */
      405: unknown
      /** Timeout */
      408: unknown
      /** Gone */
      410: unknown
      /** Unsupported media type */
      415: unknown
      /** Too many requests */
      429: unknown
      /** Internal server error */
      500: unknown
      /** Not implemented */
      501: unknown
    }
  }
  deleteTransMemory: {
    parameters: {
      path: {
        transMemoryUid: string
      }
      query: {
        purge?: boolean
      }
    }
    responses: {
      /** No Content */
      204: never
      /** Bad request */
      400: unknown
      /** Not authorized */
      401: unknown
      /** Forbidden */
      403: unknown
      /** Resource not found */
      404: unknown
      /** Method not allowed */
      405: unknown
      /** Timeout */
      408: unknown
      /** Gone */
      410: unknown
      /** Unsupported media type */
      415: unknown
      /** Too many requests */
      429: unknown
      /** Internal server error */
      500: unknown
      /** Not implemented */
      501: unknown
    }
  }
  addTargetLangToTransMemory: {
    parameters: {
      path: {
        transMemoryUid: string
      }
      body: {
        body?: definitions['TargetLanguageDto']
      }
    }
    responses: {
      /** Created */
      201: {
        schema: definitions['TransMemoryDto']
      }
      /** Bad request */
      400: unknown
      /** Not authorized */
      401: unknown
      /** Forbidden */
      403: unknown
      /** Resource not found */
      404: unknown
      /** Method not allowed */
      405: unknown
      /** Timeout */
      408: unknown
      /** Gone */
      410: unknown
      /** Unsupported media type */
      415: unknown
      /** Too many requests */
      429: unknown
      /** Internal server error */
      500: unknown
      /** Not implemented */
      501: unknown
    }
  }
  /** Returns a ZIP file containing the cleaned translation memories in the specified outputFormat. */
  exportCleanedTMs: {
    parameters: {
      body: {
        body?: definitions['CleanedTransMemoriesDto']
      }
    }
    responses: {
      /** successful operation */
      202: {
        schema: definitions['AsyncRequestWrapperDto']
      }
      /** Bad request */
      400: unknown
      /** Not authorized */
      401: unknown
      /** Forbidden */
      403: unknown
      /** Resource not found */
      404: unknown
      /** Method not allowed */
      405: unknown
      /** Timeout */
      408: unknown
      /** Gone */
      410: unknown
      /** Unsupported media type */
      415: unknown
      /** Too many requests */
      429: unknown
      /** Internal server error */
      500: unknown
      /** Not implemented */
      501: unknown
    }
  }
  downloadCleanedTM: {
    parameters: {
      path: {
        /** Request ID */
        asyncRequestId: string
      }
    }
    responses: {
      /** application/octet-stream */
      200: unknown
      /** Bad request */
      400: unknown
      /** Not authorized */
      401: unknown
      /** Forbidden */
      403: unknown
      /** Resource not found */
      404: unknown
      /** Method not allowed */
      405: unknown
      /** Timeout */
      408: unknown
      /** Gone */
      410: unknown
      /** Unsupported media type */
      415: unknown
      /** Too many requests */
      429: unknown
      /** Internal server error */
      500: unknown
      /** Not implemented */
      501: unknown
    }
  }
  insertToTransMemory: {
    parameters: {
      path: {
        transMemoryUid: string
      }
      body: {
        body?: definitions['SegmentDto']
      }
    }
    responses: {
      /** No Content */
      204: never
      /** Bad request */
      400: unknown
      /** Not authorized */
      401: unknown
      /** Forbidden */
      403: unknown
      /** Resource not found */
      404: unknown
      /** Method not allowed */
      405: unknown
      /** Timeout */
      408: unknown
      /** Gone */
      410: unknown
      /** Unsupported media type */
      415: unknown
      /** Too many requests */
      429: unknown
      /** Internal server error */
      500: unknown
      /** Not implemented */
      501: unknown
    }
  }
  clearTransMemory: {
    parameters: {
      path: {
        transMemoryUid: string
      }
    }
    responses: {
      /** No Content */
      204: never
      /** Bad request */
      400: unknown
      /** Not authorized */
      401: unknown
      /** Forbidden */
      403: unknown
      /** Resource not found */
      404: unknown
      /** Method not allowed */
      405: unknown
      /** Timeout */
      408: unknown
      /** Gone */
      410: unknown
      /** Unsupported media type */
      415: unknown
      /** Too many requests */
      429: unknown
      /** Internal server error */
      500: unknown
      /** Not implemented */
      501: unknown
    }
  }
  getRelatedProjects: {
    parameters: {
      path: {
        transMemoryUid: string
      }
      query: {
        /** Page number, starting with 0, default 0 */
        pageNumber?: number
        /** Page size, accepts values between 1 and 50, default 50 */
        pageSize?: number
      }
    }
    responses: {
      /** successful operation */
      200: {
        schema: definitions['PageDtoAbstractProjectDto']
      }
      /** Bad request */
      400: unknown
      /** Not authorized */
      401: unknown
      /** Forbidden */
      403: unknown
      /** Resource not found */
      404: unknown
      /** Method not allowed */
      405: unknown
      /** Timeout */
      408: unknown
      /** Gone */
      410: unknown
      /** Unsupported media type */
      415: unknown
      /** Too many requests */
      429: unknown
      /** Internal server error */
      500: unknown
      /** Not implemented */
      501: unknown
    }
  }
  getMetadata: {
    parameters: {
      path: {
        transMemoryUid: string
      }
      query: {
        byLanguage?: boolean
      }
    }
    responses: {
      /** successful operation */
      200: {
        schema: definitions['MetadataResponse']
      }
      /** Bad request */
      400: unknown
      /** Not authorized */
      401: unknown
      /** Forbidden */
      403: unknown
      /** Resource not found */
      404: unknown
      /** Method not allowed */
      405: unknown
      /** Timeout */
      408: unknown
      /** Gone */
      410: unknown
      /** Unsupported media type */
      415: unknown
      /** Too many requests */
      429: unknown
      /** Internal server error */
      500: unknown
      /** Not implemented */
      501: unknown
    }
  }
  updateTranslation: {
    parameters: {
      path: {
        transMemoryUid: string
        segmentId: string
      }
      body: {
        body?: definitions['TranslationDto']
      }
    }
    responses: {
      /** No Content */
      204: never
      /** Bad request */
      400: unknown
      /** Not authorized */
      401: unknown
      /** Forbidden */
      403: unknown
      /** Resource not found */
      404: unknown
      /** Method not allowed */
      405: unknown
      /** Timeout */
      408: unknown
      /** Gone */
      410: unknown
      /** Unsupported media type */
      415: unknown
      /** Too many requests */
      429: unknown
      /** Internal server error */
      500: unknown
      /** Not implemented */
      501: unknown
    }
  }
  /** Not recommended for bulk removal of segments */
  deleteSourceAndTranslations: {
    parameters: {
      path: {
        transMemoryUid: string
        segmentId: string
      }
    }
    responses: {
      /** No Content */
      204: never
      /** Bad request */
      400: unknown
      /** Not authorized */
      401: unknown
      /** Forbidden */
      403: unknown
      /** Resource not found */
      404: unknown
      /** Method not allowed */
      405: unknown
      /** Timeout */
      408: unknown
      /** Gone */
      410: unknown
      /** Unsupported media type */
      415: unknown
      /** Too many requests */
      429: unknown
      /** Internal server error */
      500: unknown
      /** Not implemented */
      501: unknown
    }
  }
  /** Not recommended for bulk removal of segments */
  deleteTranslation: {
    parameters: {
      path: {
        transMemoryUid: string
        segmentId: string
        lang: string
      }
    }
    responses: {
      /** No Content */
      204: never
      /** Bad request */
      400: unknown
      /** Not authorized */
      401: unknown
      /** Forbidden */
      403: unknown
      /** Resource not found */
      404: unknown
      /** Method not allowed */
      405: unknown
      /** Timeout */
      408: unknown
      /** Gone */
      410: unknown
      /** Unsupported media type */
      415: unknown
      /** Too many requests */
      429: unknown
      /** Internal server error */
      500: unknown
      /** Not implemented */
      501: unknown
    }
  }
  getBackgroundTasks_1: {
    parameters: {
      path: {
        transMemoryUid: string
      }
    }
    responses: {
      /** successful operation */
      200: {
        schema: definitions['BackgroundTasksTmDto']
      }
      /** Bad request */
      400: unknown
      /** Not authorized */
      401: unknown
      /** Forbidden */
      403: unknown
      /** Resource not found */
      404: unknown
      /** Method not allowed */
      405: unknown
      /** Timeout */
      408: unknown
      /** Gone */
      410: unknown
      /** Unsupported media type */
      415: unknown
      /** Too many requests */
      429: unknown
      /** Internal server error */
      500: unknown
      /** Not implemented */
      501: unknown
    }
  }
  wildcardSearch: {
    parameters: {
      path: {
        transMemoryUid: string
      }
      body: {
        body?: definitions['WildCardSearchRequestDto']
      }
    }
    responses: {
      /** successful operation */
      200: {
        schema: definitions['SearchResponseListTmDto']
      }
      /** Bad request */
      400: unknown
      /** Not authorized */
      401: unknown
      /** Forbidden */
      403: unknown
      /** Resource not found */
      404: unknown
      /** Method not allowed */
      405: unknown
      /** Timeout */
      408: unknown
      /** Gone */
      410: unknown
      /** Unsupported media type */
      415: unknown
      /** Too many requests */
      429: unknown
      /** Internal server error */
      500: unknown
      /** Not implemented */
      501: unknown
    }
  }
  downloadSearchResult: {
    parameters: {
      path: {
        /** Request ID */
        asyncRequestId: string
      }
      query: {
        format?: 'TMX' | 'XLSX'
        /** Fields to include in exported XLSX */
        fields?: (
          | 'ID'
          | 'TEXT'
          | 'PREVIOUS_SEGMENT'
          | 'NEXT_SEGMENT'
          | 'CONTEXT_KEY'
          | 'CREATED_BY'
          | 'CREATED_AT'
          | 'MODIFIED_BY'
          | 'MODIFIED_AT'
          | 'CLIENT'
          | 'PROJECT'
          | 'DOMAIN'
          | 'SUBDOMAIN'
          | 'NOTE'
          | 'REVIEWED'
          | 'ALIGNED'
          | 'FILENAME'
          | 'METADATA'
        )[]
      }
    }
    responses: {
      /** application/octet-stream */
      200: unknown
      /** Bad request */
      400: unknown
      /** Not authorized */
      401: unknown
      /** Forbidden */
      403: unknown
      /** Resource not found */
      404: unknown
      /** Method not allowed */
      405: unknown
      /** Timeout */
      408: unknown
      /** Gone */
      410: unknown
      /** Unsupported media type */
      415: unknown
      /** Too many requests */
      429: unknown
      /** Internal server error */
      500: unknown
      /** Not implemented */
      501: unknown
    }
  }
  /** Use [this API](#operation/downloadSearchResult) to download result */
  exportByQueryAsync: {
    parameters: {
      path: {
        transMemoryUid: string
      }
      body: {
        body?: definitions['ExportByQueryDto']
      }
    }
    responses: {
      /** successful operation */
      200: {
        schema: definitions['AsyncExportTMByQueryResponseDto']
      }
      /** Bad request */
      400: unknown
      /** Not authorized */
      401: unknown
      /** Forbidden */
      403: unknown
      /** Resource not found */
      404: unknown
      /** Method not allowed */
      405: unknown
      /** Timeout */
      408: unknown
      /** Gone */
      410: unknown
      /** Unsupported media type */
      415: unknown
      /** Too many requests */
      429: unknown
      /** Internal server error */
      500: unknown
      /** Not implemented */
      501: unknown
    }
  }
  search: {
    parameters: {
      path: {
        transMemoryUid: string
      }
      body: {
        body?: definitions['SearchRequestDto']
      }
    }
    responses: {
      /** successful operation */
      200: {
        schema: definitions['SearchResponseListTmDto']
      }
      /** Bad request */
      400: unknown
      /** Not authorized */
      401: unknown
      /** Forbidden */
      403: unknown
      /** Resource not found */
      404: unknown
      /** Method not allowed */
      405: unknown
      /** Timeout */
      408: unknown
      /** Gone */
      410: unknown
      /** Unsupported media type */
      415: unknown
      /** Too many requests */
      429: unknown
      /** Internal server error */
      500: unknown
      /** Not implemented */
      501: unknown
    }
  }
  /** Configured machine translate settings is used */
  machineTranslationJob: {
    parameters: {
      path: {
        projectUid: string
        jobUid: string
      }
      body: {
        body?: definitions['TranslationRequestDto']
      }
    }
    responses: {
      /** successful operation */
      200: {
        schema: definitions['MachineTranslateResponse']
      }
      /** Bad request */
      400: unknown
      /** Not authorized */
      401: unknown
      /** Forbidden */
      403: unknown
      /** Resource not found */
      404: unknown
      /** Method not allowed */
      405: unknown
      /** Timeout */
      408: unknown
      /** Gone */
      410: unknown
      /** Unsupported media type */
      415: unknown
      /** Too many requests */
      429: unknown
      /** Internal server error */
      500: unknown
      /** Not implemented */
      501: unknown
    }
  }
  getPriceList: {
    parameters: {
      path: {
        priceListUid: string
      }
    }
    responses: {
      /** successful operation */
      200: {
        schema: definitions['TranslationPriceListDto']
      }
      /** Bad request */
      400: unknown
      /** Not authorized */
      401: unknown
      /** Forbidden */
      403: unknown
      /** Resource not found */
      404: unknown
      /** Method not allowed */
      405: unknown
      /** Timeout */
      408: unknown
      /** Gone */
      410: unknown
      /** Unsupported media type */
      415: unknown
      /** Too many requests */
      429: unknown
      /** Internal server error */
      500: unknown
      /** Not implemented */
      501: unknown
    }
  }
  updatePriceList: {
    parameters: {
      body: {
        body?: definitions['TranslationPriceListCreateDto']
      }
      path: {
        priceListUid: string
      }
    }
    responses: {
      /** successful operation */
      200: {
        schema: definitions['TranslationPriceListDto']
      }
      /** Bad request */
      400: unknown
      /** Not authorized */
      401: unknown
      /** Forbidden */
      403: unknown
      /** Resource not found */
      404: unknown
      /** Method not allowed */
      405: unknown
      /** Timeout */
      408: unknown
      /** Gone */
      410: unknown
      /** Unsupported media type */
      415: unknown
      /** Too many requests */
      429: unknown
      /** Internal server error */
      500: unknown
      /** Not implemented */
      501: unknown
    }
  }
  deletePriceList: {
    parameters: {
      path: {
        priceListUid: string
      }
    }
    responses: {
      /** No Content */
      204: never
      /** Bad request */
      400: unknown
      /** Not authorized */
      401: unknown
      /** Forbidden */
      403: unknown
      /** Resource not found */
      404: unknown
      /** Method not allowed */
      405: unknown
      /** Timeout */
      408: unknown
      /** Gone */
      410: unknown
      /** Unsupported media type */
      415: unknown
      /** Too many requests */
      429: unknown
      /** Internal server error */
      500: unknown
      /** Not implemented */
      501: unknown
    }
  }
  getListOfPriceList: {
    parameters: {
      query: {
        /** Page number, starting with 0, default 0 */
        pageNumber?: number
        /** Page size, accepts values between 1 and 50, default 50 */
        pageSize?: number
      }
    }
    responses: {
      /** successful operation */
      200: {
        schema: definitions['PageDtoTranslationPriceListDto']
      }
      /** Bad request */
      400: unknown
      /** Not authorized */
      401: unknown
      /** Forbidden */
      403: unknown
      /** Resource not found */
      404: unknown
      /** Method not allowed */
      405: unknown
      /** Timeout */
      408: unknown
      /** Gone */
      410: unknown
      /** Unsupported media type */
      415: unknown
      /** Too many requests */
      429: unknown
      /** Internal server error */
      500: unknown
      /** Not implemented */
      501: unknown
    }
  }
  createPriceList: {
    parameters: {
      body: {
        body?: definitions['TranslationPriceListCreateDto']
      }
    }
    responses: {
      /** Created */
      201: {
        schema: definitions['TranslationPriceListDto']
      }
      /** Bad request */
      400: unknown
      /** Not authorized */
      401: unknown
      /** Forbidden */
      403: unknown
      /** Resource not found */
      404: unknown
      /** Method not allowed */
      405: unknown
      /** Timeout */
      408: unknown
      /** Gone */
      410: unknown
      /** Unsupported media type */
      415: unknown
      /** Too many requests */
      429: unknown
      /** Internal server error */
      500: unknown
      /** Not implemented */
      501: unknown
    }
  }
  getPricesWithWorkflowSteps: {
    parameters: {
      path: {
        priceListUid: string
      }
      query: {
        /** Page number, starting with 0, default 0 */
        pageNumber?: number
        /** Page size, accepts values between 1 and 50, default 50 */
        pageSize?: number
        sourceLanguages?: string[]
        targetLanguages?: string[]
      }
    }
    responses: {
      /** successful operation */
      200: {
        schema: definitions['PageDtoTranslationPriceSetDto']
      }
      /** Bad request */
      400: unknown
      /** Not authorized */
      401: unknown
      /** Forbidden */
      403: unknown
      /** Resource not found */
      404: unknown
      /** Method not allowed */
      405: unknown
      /** Timeout */
      408: unknown
      /** Gone */
      410: unknown
      /** Unsupported media type */
      415: unknown
      /** Too many requests */
      429: unknown
      /** Internal server error */
      500: unknown
      /** Not implemented */
      501: unknown
    }
  }
  createLanguagePair: {
    parameters: {
      body: {
        body?: definitions['TranslationPriceSetCreateDto']
      }
      path: {
        priceListUid: string
      }
    }
    responses: {
      /** Created */
      201: {
        schema: definitions['TranslationPriceSetListDto']
      }
      /** Bad request */
      400: unknown
      /** Not authorized */
      401: unknown
      /** Forbidden */
      403: unknown
      /** Resource not found */
      404: unknown
      /** Method not allowed */
      405: unknown
      /** Timeout */
      408: unknown
      /** Gone */
      410: unknown
      /** Unsupported media type */
      415: unknown
      /** Too many requests */
      429: unknown
      /** Internal server error */
      500: unknown
      /** Not implemented */
      501: unknown
    }
  }
  deleteLanguagePairs: {
    parameters: {
      path: {
        priceListUid: string
      }
      body: {
        body?: definitions['TranslationPriceSetBulkDeleteDto']
      }
    }
    responses: {
      /** No Content */
      204: never
      /** Bad request */
      400: unknown
      /** Not authorized */
      401: unknown
      /** Forbidden */
      403: unknown
      /** Resource not found */
      404: unknown
      /** Method not allowed */
      405: unknown
      /** Timeout */
      408: unknown
      /** Gone */
      410: unknown
      /** Unsupported media type */
      415: unknown
      /** Too many requests */
      429: unknown
      /** Internal server error */
      500: unknown
      /** Not implemented */
      501: unknown
    }
  }
  deleteLanguagePair: {
    parameters: {
      path: {
        priceListUid: string
        sourceLanguage: string
        targetLanguage: string
      }
    }
    responses: {
      /** No Content */
      204: never
      /** Bad request */
      400: unknown
      /** Not authorized */
      401: unknown
      /** Forbidden */
      403: unknown
      /** Resource not found */
      404: unknown
      /** Method not allowed */
      405: unknown
      /** Timeout */
      408: unknown
      /** Gone */
      410: unknown
      /** Unsupported media type */
      415: unknown
      /** Too many requests */
      429: unknown
      /** Internal server error */
      500: unknown
      /** Not implemented */
      501: unknown
    }
  }
  setMinimumPriceForSet: {
    parameters: {
      body: {
        body?: definitions['TranslationPriceSetBulkMinimumPricesDto']
      }
      path: {
        priceListUid: string
      }
    }
    responses: {
      /** successful operation */
      200: {
        schema: definitions['TranslationPriceListDto']
      }
      /** Bad request */
      400: unknown
      /** Not authorized */
      401: unknown
      /** Forbidden */
      403: unknown
      /** Resource not found */
      404: unknown
      /** Method not allowed */
      405: unknown
      /** Timeout */
      408: unknown
      /** Gone */
      410: unknown
      /** Unsupported media type */
      415: unknown
      /** Too many requests */
      429: unknown
      /** Internal server error */
      500: unknown
      /** Not implemented */
      501: unknown
    }
  }
  /** If object contains only price, all languages and workflow steps will be updated */
  setPrices: {
    parameters: {
      body: {
        body?: definitions['TranslationPriceSetBulkPricesDto']
      }
      path: {
        priceListUid: string
      }
    }
    responses: {
      /** successful operation */
      200: {
        schema: definitions['TranslationPriceListDto']
      }
      /** Bad request */
      400: unknown
      /** Not authorized */
      401: unknown
      /** Forbidden */
      403: unknown
      /** Resource not found */
      404: unknown
      /** Method not allowed */
      405: unknown
      /** Timeout */
      408: unknown
      /** Gone */
      410: unknown
      /** Unsupported media type */
      415: unknown
      /** Too many requests */
      429: unknown
      /** Internal server error */
      500: unknown
      /** Not implemented */
      501: unknown
    }
  }
  deleteUser_1: {
    parameters: {
      path: {
        userUid: string
      }
    }
    responses: {
      /** No Content */
      204: never
      /** Bad request */
      400: unknown
      /** Not authorized */
      401: unknown
      /** Forbidden */
      403: unknown
      /** Resource not found */
      404: unknown
      /** Method not allowed */
      405: unknown
      /** Timeout */
      408: unknown
      /** Gone */
      410: unknown
      /** Unsupported media type */
      415: unknown
      /** Too many requests */
      429: unknown
      /** Internal server error */
      500: unknown
      /** Not implemented */
      501: unknown
    }
  }
  /** List projects in which the user is assigned to at least one job matching the criteria */
  listAssignedProjects: {
    parameters: {
      path: {
        userUid: string
      }
      query: {
        /** Status of the assigned jobs */
        status?: (
          | 'NEW'
          | 'ACCEPTED'
          | 'DECLINED'
          | 'DELIVERED'
          | 'EMAILED'
          | 'COMPLETED'
          | 'CANCELLED'
        )[]
        /** Target language of the assigned jobs */
        targetLang?: string[]
        workflowStepId?: number
        /** Number of hours in which the assigned jobs are due. Use `-1` for jobs that are overdue. */
        dueInHours?: number
        filename?: string
        projectName?: string
        pageNumber?: number
        pageSize?: number
      }
    }
    responses: {
      /** successful operation */
      200: {
        schema: definitions['PageDtoProjectReference']
      }
      /** Bad request */
      400: unknown
      /** Not authorized */
      401: unknown
      /** Forbidden */
      403: unknown
      /** Resource not found */
      404: unknown
      /** Method not allowed */
      405: unknown
      /** Timeout */
      408: unknown
      /** Gone */
      410: unknown
      /** Unsupported media type */
      415: unknown
      /** Too many requests */
      429: unknown
      /** Internal server error */
      500: unknown
      /** Not implemented */
      501: unknown
    }
  }
  /**
   * * Password length must be between 8 and 255
   * * Password must not be same as the username
   */
  updatePassword: {
    parameters: {
      body: {
        body?: definitions['UserPasswordEditDto']
      }
      path: {
        userUid: string
      }
    }
    responses: {
      /** No Content */
      204: never
      /** Bad request */
      400: unknown
      /** Not authorized */
      401: unknown
      /** Forbidden */
      403: unknown
      /** Resource not found */
      404: unknown
      /** Method not allowed */
      405: unknown
      /** Timeout */
      408: unknown
      /** Gone */
      410: unknown
      /** Unsupported media type */
      415: unknown
      /** Too many requests */
      429: unknown
      /** Internal server error */
      500: unknown
      /** Not implemented */
      501: unknown
    }
  }
  sendLoginInfo: {
    parameters: {
      path: {
        userUid: string
      }
    }
    responses: {
      /** No Content */
      204: never
      /** Bad request */
      400: unknown
      /** Not authorized */
      401: unknown
      /** Forbidden */
      403: unknown
      /** Resource not found */
      404: unknown
      /** Method not allowed */
      405: unknown
      /** Timeout */
      408: unknown
      /** Gone */
      410: unknown
      /** Unsupported media type */
      415: unknown
      /** Too many requests */
      429: unknown
      /** Internal server error */
      500: unknown
      /** Not implemented */
      501: unknown
    }
  }
  cancelDeletion: {
    parameters: {
      path: {
        userUid: string
      }
    }
    responses: {
      /** successful operation */
      200: {
        schema: definitions['UserDto']
      }
      /** Bad request */
      400: unknown
      /** Not authorized */
      401: unknown
      /** Forbidden */
      403: unknown
      /** Resource not found */
      404: unknown
      /** Method not allowed */
      405: unknown
      /** Timeout */
      408: unknown
      /** Gone */
      410: unknown
      /** Unsupported media type */
      415: unknown
      /** Too many requests */
      429: unknown
      /** Internal server error */
      500: unknown
      /** Not implemented */
      501: unknown
    }
  }
  loginActivity: {
    parameters: {
      path: {
        userUid: string
      }
    }
    responses: {
      /** successful operation */
      200: {
        schema: definitions['UserStatisticsListDto']
      }
      /** Bad request */
      400: unknown
      /** Not authorized */
      401: unknown
      /** Forbidden */
      403: unknown
      /** Resource not found */
      404: unknown
      /** Method not allowed */
      405: unknown
      /** Timeout */
      408: unknown
      /** Gone */
      410: unknown
      /** Unsupported media type */
      415: unknown
      /** Too many requests */
      429: unknown
      /** Internal server error */
      500: unknown
      /** Not implemented */
      501: unknown
    }
  }
  getListOfUsersFiltered: {
    parameters: {
      query: {
        /** Filter for first name, that starts with value */
        firstName?: string
        /** Filter for last name, that starts with value */
        lastName?: string
        /** Filter for last name or first name, that starts with value */
        name?: string
        userName?: string
        email?: string
        /** Filter for last name, first name or email starting with the value */
        nameOrEmail?: string
        role?: ('ADMIN' | 'PROJECT_MANAGER' | 'LINGUIST' | 'GUEST' | 'SUBMITTER')[]
        includeDeleted?: boolean
        /** Page number, starting with 0, default 0 */
        pageNumber?: number
        /** Page size, accepts values between 1 and 50, default 50 */
        pageSize?: number
        sort?: ('ID' | 'LAST_NAME' | 'FIRST_NAME')[]
        order?: ('ASC' | 'DESC')[]
      }
    }
    responses: {
      /** successful operation */
      200: {
        schema: definitions['PageDtoUserDto']
      }
      /** Bad request */
      400: unknown
      /** Not authorized */
      401: unknown
      /** Forbidden */
      403: unknown
      /** Resource not found */
      404: unknown
      /** Method not allowed */
      405: unknown
      /** Timeout */
      408: unknown
      /** Gone */
      410: unknown
      /** Unsupported media type */
      415: unknown
      /** Too many requests */
      429: unknown
      /** Internal server error */
      500: unknown
      /** Not implemented */
      501: unknown
    }
  }
  listJobs: {
    parameters: {
      path: {
        userUid: string
      }
      query: {
        status?: (
          | 'NEW'
          | 'ACCEPTED'
          | 'DECLINED'
          | 'DELIVERED'
          | 'EMAILED'
          | 'COMPLETED'
          | 'CANCELLED'
        )[]
        projectUid?: string
        targetLang?: string[]
        workflowStepId?: number
        /** -1 for jobs that are overdue */
        dueInHours?: number
        filename?: string
        pageNumber?: number
        pageSize?: number
      }
    }
    responses: {
      /** successful operation */
      200: {
        schema: definitions['PageDtoAssignedJobDto']
      }
      /** Bad request */
      400: unknown
      /** Not authorized */
      401: unknown
      /** Forbidden */
      403: unknown
      /** Resource not found */
      404: unknown
      /** Method not allowed */
      405: unknown
      /** Timeout */
      408: unknown
      /** Gone */
      410: unknown
      /** Unsupported media type */
      415: unknown
      /** Too many requests */
      429: unknown
      /** Internal server error */
      500: unknown
      /** Not implemented */
      501: unknown
    }
  }
  listWorkflowSteps: {
    parameters: {
      path: {
        userUid: string
      }
      query: {
        status?: (
          | 'NEW'
          | 'ACCEPTED'
          | 'DECLINED'
          | 'DELIVERED'
          | 'EMAILED'
          | 'COMPLETED'
          | 'CANCELLED'
        )[]
        projectUid?: string
        targetLang?: string[]
        /** -1 for jobs that are overdue */
        dueInHours?: number
        filename?: string
        pageNumber?: number
        pageSize?: number
      }
    }
    responses: {
      /** successful operation */
      200: {
        schema: definitions['PageDtoWorkflowStepReference']
      }
      /** Bad request */
      400: unknown
      /** Not authorized */
      401: unknown
      /** Forbidden */
      403: unknown
      /** Resource not found */
      404: unknown
      /** Method not allowed */
      405: unknown
      /** Timeout */
      408: unknown
      /** Gone */
      410: unknown
      /** Unsupported media type */
      415: unknown
      /** Too many requests */
      429: unknown
      /** Internal server error */
      500: unknown
      /** Not implemented */
      501: unknown
    }
  }
  listTargetLangs: {
    parameters: {
      path: {
        userUid: string
      }
      query: {
        status?: (
          | 'NEW'
          | 'ACCEPTED'
          | 'DECLINED'
          | 'DELIVERED'
          | 'EMAILED'
          | 'COMPLETED'
          | 'CANCELLED'
        )[]
        projectUid?: string
        workflowStepId?: number
        /** -1 for jobs that are overdue */
        dueInHours?: number
        filename?: string
        pageNumber?: number
        pageSize?: number
      }
    }
    responses: {
      /** successful operation */
      200: {
        schema: definitions['PageDtoString']
      }
      /** Bad request */
      400: unknown
      /** Not authorized */
      401: unknown
      /** Forbidden */
      403: unknown
      /** Resource not found */
      404: unknown
      /** Method not allowed */
      405: unknown
      /** Timeout */
      408: unknown
      /** Gone */
      410: unknown
      /** Unsupported media type */
      415: unknown
      /** Too many requests */
      429: unknown
      /** Internal server error */
      500: unknown
      /** Not implemented */
      501: unknown
    }
  }
  'user-lastLogins': {
    parameters: {
      query: {
        userName?: string
        role?: ('ADMIN' | 'PROJECT_MANAGER' | 'LINGUIST' | 'GUEST' | 'SUBMITTER')[]
        sort?: ('ID' | 'LAST_LOGIN_DATE')[]
        order?: ('ASC' | 'DESC')[]
        /** Page number, starting with 0, default 0 */
        pageNumber?: number
        /** Page size, accepts values between 1 and 100, default 100 */
        pageSize?: number
      }
    }
    responses: {
      /** successful operation */
      200: {
        schema: definitions['PageDtoLastLoginDto']
      }
      /** Bad request */
      400: unknown
      /** Not authorized */
      401: unknown
      /** Forbidden */
      403: unknown
      /** Resource not found */
      404: unknown
      /** Method not allowed */
      405: unknown
      /** Timeout */
      408: unknown
      /** Gone */
      410: unknown
      /** Unsupported media type */
      415: unknown
      /** Too many requests */
      429: unknown
      /** Internal server error */
      500: unknown
      /** Not implemented */
      501: unknown
    }
  }
  getVendor: {
    parameters: {
      path: {
        vendorUid: string
      }
    }
    responses: {
      /** successful operation */
      200: {
        schema: definitions['VendorDto']
      }
      /** Bad request */
      400: unknown
      /** Not authorized */
      401: unknown
      /** Forbidden */
      403: unknown
      /** Resource not found */
      404: unknown
      /** Method not allowed */
      405: unknown
      /** Timeout */
      408: unknown
      /** Gone */
      410: unknown
      /** Unsupported media type */
      415: unknown
      /** Too many requests */
      429: unknown
      /** Internal server error */
      500: unknown
      /** Not implemented */
      501: unknown
    }
  }
  listVendors: {
    parameters: {
      query: {
        /** Page number, starting with 0, default 0 */
        pageNumber?: number
        /** Page size, accepts values between 1 and 50, default 50 */
        pageSize?: number
        /** Name or the vendor, for filtering */
        name?: string
      }
    }
    responses: {
      /** successful operation */
      200: {
        schema: definitions['PageDtoVendorDto']
      }
      /** Bad request */
      400: unknown
      /** Not authorized */
      401: unknown
      /** Forbidden */
      403: unknown
      /** Resource not found */
      404: unknown
      /** Method not allowed */
      405: unknown
      /** Timeout */
      408: unknown
      /** Gone */
      410: unknown
      /** Unsupported media type */
      415: unknown
      /** Too many requests */
      429: unknown
      /** Internal server error */
      500: unknown
      /** Not implemented */
      501: unknown
    }
  }
  createVendor: {
    parameters: {
      body: {
        body?: definitions['CreateVendorDto']
      }
    }
    responses: {
      /** Created */
      201: {
        schema: definitions['VendorDto']
      }
      /** Bad request */
      400: unknown
      /** Not authorized */
      401: unknown
      /** Forbidden */
      403: unknown
      /** Resource not found */
      404: unknown
      /** Method not allowed */
      405: unknown
      /** Timeout */
      408: unknown
      /** Gone */
      410: unknown
      /** Unsupported media type */
      415: unknown
      /** Too many requests */
      429: unknown
      /** Internal server error */
      500: unknown
      /** Not implemented */
      501: unknown
    }
  }
  getWebhookCallsList: {
    parameters: {
      query: {
        /** Page number, starting with 0, default 0 */
        pageNumber?: number
        /** Page size, accepts values between 1 and 50, default 50 */
        pageSize?: number
        /** List of Webhook events to filter by */
        events?: (
          | 'JOB_STATUS_CHANGED'
          | 'JOB_CREATED'
          | 'JOB_DELETED'
          | 'JOB_UNSHARED'
          | 'JOB_ASSIGNED'
          | 'JOB_DUE_DATE_CHANGED'
          | 'JOB_UPDATED'
          | 'JOB_TARGET_UPDATED'
          | 'JOB_EXPORTED'
          | 'JOB_UNEXPORTED'
          | 'PROJECT_CREATED'
          | 'PROJECT_DELETED'
          | 'PROJECT_UNSHARED'
          | 'PROJECT_STATUS_CHANGED'
          | 'PROJECT_DUE_DATE_CHANGED'
          | 'SHARED_PROJECT_ASSIGNED'
          | 'PROJECT_METADATA_UPDATED'
          | 'PRE_TRANSLATION_FINISHED'
          | 'ANALYSIS_CREATED'
          | 'CONTINUOUS_JOB_UPDATED'
          | 'PROJECT_TEMPLATE_CREATED'
          | 'PROJECT_TEMPLATE_UPDATED'
          | 'PROJECT_TEMPLATE_DELETED'
          | 'RAW_MT_CONVERTER_IMPORT_FINISHED'
          | 'RAW_MT_PRE_TRANSLATION_FINISHED'
        )[]
        /** Status of Webhook calls to filter by */
        status?: 'SUCCESS' | 'FAIL'
        /** UID of Webhook to filter by */
        webhookUid?: string
        /** UID of parent webhook call to filter by */
        parentUid?: string
      }
    }
    responses: {
      /** successful operation */
      200: {
        schema: definitions['PageDtoWebhookCallDto']
      }
      /** Bad request */
      400: unknown
      /** Not authorized */
      401: unknown
      /** Forbidden */
      403: unknown
      /** Resource not found */
      404: unknown
      /** Method not allowed */
      405: unknown
      /** Timeout */
      408: unknown
      /** Gone */
      410: unknown
      /** Unsupported media type */
      415: unknown
      /** Too many requests */
      429: unknown
      /** Internal server error */
      500: unknown
      /** Not implemented */
      501: unknown
    }
  }
  /** Replays given list of Webhook Calls in specified order in the request */
  replayWebhookCalls: {
    parameters: {
      body: {
        body?: definitions['ReplayRequestDto']
      }
    }
    responses: {
      /** Accepted */
      202: unknown
      /** Bad request */
      400: unknown
      /** Not authorized */
      401: unknown
      /** Forbidden */
      403: unknown
      /** Resource not found */
      404: unknown
      /** Method not allowed */
      405: unknown
      /** Timeout */
      408: unknown
      /** Gone */
      410: unknown
      /** Unsupported media type */
      415: unknown
      /** Too many requests */
      429: unknown
      /** Internal server error */
      500: unknown
      /** Not implemented */
      501: unknown
    }
  }
  /** Replays specified number of last Webhook calls from oldest to the newest one */
  replayLast: {
    parameters: {
      query: {
        /** Number of calls to be replayed */
        numberOfCalls?: number
        /** List of Webhook events to filter by */
        events?: (
          | 'JOB_STATUS_CHANGED'
          | 'JOB_CREATED'
          | 'JOB_DELETED'
          | 'JOB_UNSHARED'
          | 'JOB_ASSIGNED'
          | 'JOB_DUE_DATE_CHANGED'
          | 'JOB_UPDATED'
          | 'JOB_TARGET_UPDATED'
          | 'JOB_EXPORTED'
          | 'JOB_UNEXPORTED'
          | 'PROJECT_CREATED'
          | 'PROJECT_DELETED'
          | 'PROJECT_UNSHARED'
          | 'PROJECT_STATUS_CHANGED'
          | 'PROJECT_DUE_DATE_CHANGED'
          | 'SHARED_PROJECT_ASSIGNED'
          | 'PROJECT_METADATA_UPDATED'
          | 'PRE_TRANSLATION_FINISHED'
          | 'ANALYSIS_CREATED'
          | 'CONTINUOUS_JOB_UPDATED'
          | 'PROJECT_TEMPLATE_CREATED'
          | 'PROJECT_TEMPLATE_UPDATED'
          | 'PROJECT_TEMPLATE_DELETED'
          | 'RAW_MT_CONVERTER_IMPORT_FINISHED'
          | 'RAW_MT_PRE_TRANSLATION_FINISHED'
        )[]
        /** Status of Webhook calls to filter by */
        status?: 'SUCCESS' | 'FAIL'
      }
    }
    responses: {
      /** Accepted */
      202: unknown
      /** Bad request */
      400: unknown
      /** Not authorized */
      401: unknown
      /** Forbidden */
      403: unknown
      /** Resource not found */
      404: unknown
      /** Method not allowed */
      405: unknown
      /** Timeout */
      408: unknown
      /** Gone */
      410: unknown
      /** Unsupported media type */
      415: unknown
      /** Too many requests */
      429: unknown
      /** Internal server error */
      500: unknown
      /** Not implemented */
      501: unknown
    }
  }
  listWFSteps: {
    parameters: {
      query: {
        /** Page number, starting with 0, default 0 */
        pageNumber?: number
        /** Page size, accepts values between 1 and 50, default 50 */
        pageSize?: number
        sort?: 'ID' | 'NAME' | 'ORDER' | 'ABBR'
        order?: 'ASC' | 'DESC'
        /** Name of the workflow step */
        name?: string
        /** Abbreviation of workflow step */
        abbr?: string
      }
    }
    responses: {
      /** successful operation */
      200: {
        schema: definitions['PageDtoWorkflowStepDto']
      }
      /** Bad request */
      400: unknown
      /** Not authorized */
      401: unknown
      /** Forbidden */
      403: unknown
      /** Resource not found */
      404: unknown
      /** Method not allowed */
      405: unknown
      /** Timeout */
      408: unknown
      /** Gone */
      410: unknown
      /** Unsupported media type */
      415: unknown
      /** Too many requests */
      429: unknown
      /** Internal server error */
      500: unknown
      /** Not implemented */
      501: unknown
    }
  }
  createWFStep: {
    parameters: {
      body: {
        body?: definitions['CreateWorkflowStepDto']
      }
    }
    responses: {
      /** Created */
      201: {
        schema: definitions['WorkflowStepDto']
      }
      /** Bad request */
      400: unknown
      /** Not authorized */
      401: unknown
      /** Forbidden */
      403: unknown
      /** Resource not found */
      404: unknown
      /** Method not allowed */
      405: unknown
      /** Timeout */
      408: unknown
      /** Gone */
      410: unknown
      /** Unsupported media type */
      415: unknown
      /** Too many requests */
      429: unknown
      /** Internal server error */
      500: unknown
      /** Not implemented */
      501: unknown
    }
  }
  editWFStep: {
    parameters: {
      path: {
        workflowStepUid: string
      }
      body: {
        body?: definitions['EditWorkflowStepDto']
      }
    }
    responses: {
      /** successful operation */
      200: {
        schema: definitions['WorkflowStepDto']
      }
      /** Bad request */
      400: unknown
      /** Not authorized */
      401: unknown
      /** Forbidden */
      403: unknown
      /** Resource not found */
      404: unknown
      /** Method not allowed */
      405: unknown
      /** Timeout */
      408: unknown
      /** Gone */
      410: unknown
      /** Unsupported media type */
      415: unknown
      /** Too many requests */
      429: unknown
      /** Internal server error */
      500: unknown
      /** Not implemented */
      501: unknown
    }
  }
  /** Returns created analyses - batching analyses by number of segments (api.segment.count.approximation, default 100000), in case request contains more segments than maximum (api.segment.max.count, default 300000), returns 400 bad request. */
  createAnalyseAsync_1: {
    parameters: {
      body: {
        body?: definitions['CreateAnalyseAsyncV2Dto']
      }
    }
    responses: {
      /** successful operation */
      200: {
        schema: definitions['AsyncAnalyseListResponseV2Dto']
      }
      /** Bad request */
      400: unknown
      /** Not authorized */
      401: unknown
      /** Forbidden */
      403: unknown
      /** Resource not found */
      404: unknown
      /** Method not allowed */
      405: unknown
      /** Timeout */
      408: unknown
      /** Gone */
      410: unknown
      /** Unsupported media type */
      415: unknown
      /** Too many requests */
      429: unknown
      /** Internal server error */
      500: unknown
      /** Not implemented */
      501: unknown
    }
  }
  /**
   * If no netRateScheme is provided in
   * request, then netRateScheme associated with provider will be used if it exists, otherwise it will remain the same
   * as it was.
   */
  editAnalysis: {
    parameters: {
      path: {
        analyseUid: string
      }
      body: {
        body?: definitions['EditAnalyseV2Dto']
      }
    }
    responses: {
      /** successful operation */
      200: {
        schema: definitions['AnalyseV2Dto']
      }
      /** Bad request */
      400: unknown
      /** Not authorized */
      401: unknown
      /** Forbidden */
      403: unknown
      /** Resource not found */
      404: unknown
      /** Method not allowed */
      405: unknown
      /** Timeout */
      408: unknown
      /** Gone */
      410: unknown
      /** Unsupported media type */
      415: unknown
      /** Too many requests */
      429: unknown
      /** Internal server error */
      500: unknown
      /** Not implemented */
      501: unknown
    }
  }
  /**
   * If no netRateScheme is provided in request, then netRateScheme associated with provider will
   * be used if it exists, otherwise it will remain the same as it was.
   */
  'analyses-batchEdit-v2': {
    parameters: {
      body: {
        body?: definitions['BulkEditAnalyseV2Dto']
      }
    }
    responses: {
      /** successful operation */
      200: {
        schema: definitions['AnalysesV2Dto']
      }
      /** Bad request */
      400: unknown
      /** Not authorized */
      401: unknown
      /** Forbidden */
      403: unknown
      /** Resource not found */
      404: unknown
      /** Method not allowed */
      405: unknown
      /** Timeout */
      408: unknown
      /** Gone */
      410: unknown
      /** Unsupported media type */
      415: unknown
      /** Too many requests */
      429: unknown
      /** Internal server error */
      500: unknown
      /** Not implemented */
      501: unknown
    }
  }
  /** Returns updated job parts and projects */
  uploadBilingualFileV2: {
    parameters: {
      query: {
        saveToTransMemory?: 'All' | 'Confirmed' | 'None'
        setCompleted?: boolean
      }
      body: {
        /** Multipart request with files */
        multipart: definitions['UploadBilingualFileRequestDto']
      }
    }
    responses: {
      /** successful operation */
      200: {
        schema: definitions['ProjectJobPartsDto']
      }
      /** Bad request */
      400: unknown
      /** Not authorized */
      401: unknown
      /** Forbidden */
      403: unknown
      /** Resource not found */
      404: unknown
      /** Method not allowed */
      405: unknown
      /** Timeout */
      408: unknown
      /** Gone */
      410: unknown
      /** Unsupported media type */
      415: unknown
      /** Too many requests */
      429: unknown
      /** Internal server error */
      500: unknown
      /** Not implemented */
      501: unknown
    }
  }
  /** Download the file by referencing successfully finished async download request [Connector - Download file (async)](#operation/getFile_1). */
  getPreparedFile: {
    parameters: {
      path: {
        connectorId: string
        folder: string
        file: string
        taskId: string
      }
    }
    responses: {
      /** successful operation */
      200: {
        schema: definitions['InputStreamLength']
      }
      /** Bad request */
      400: unknown
      /** Not authorized */
      401: unknown
      /** Forbidden */
      403: unknown
      /** Resource not found */
      404: unknown
      /** Method not allowed */
      405: unknown
      /** Timeout */
      408: unknown
      /** Gone */
      410: unknown
      /** Unsupported media type */
      415: unknown
      /** Too many requests */
      429: unknown
      /** Internal server error */
      500: unknown
      /** Not implemented */
      501: unknown
    }
  }
  /** Upload a file to a subfolder of the selected connector */
  uploadFile_1: {
    parameters: {
      path: {
        connectorId: string
        folder: string
        fileName: string
      }
      query: {
        /** Mime type of the file to upload */
        mimeType?: string
      }
      header: {
        Memsource: string
        'Content-Type': 'multipart/form-data'
      }
      formData: {
        /** Translated file to upload */
        file: unknown
      }
    }
    responses: {
      /** successful operation */
      200: {
        schema: definitions['AsyncFileOpResponseDto']
      }
      /** Bad request */
      400: unknown
      /** Not authorized */
      401: unknown
      /** Forbidden */
      403: unknown
      /** Resource not found */
      404: unknown
      /** Method not allowed */
      405: unknown
      /** Timeout */
      408: unknown
      /** Gone */
      410: unknown
      /** Unsupported media type */
      415: unknown
      /** Too many requests */
      429: unknown
      /** Internal server error */
      500: unknown
      /** Not implemented */
      501: unknown
    }
  }
  /**
   * Create an asynchronous request to download a file from a (sub)folder of the selected connector.
   * After a callback with successful response is received, prepared file can be downloaded by [Download prepared file](#operation/getPreparedFile)
   * or [Create job from connector asynchronous download task](#operation/createJobFromAsyncDownloadTask).
   */
  getFile_1: {
    parameters: {
      path: {
        connectorId: string
        folder: string
        file: string
      }
      body: {
        body?: definitions['GetFileRequestParamsDto']
      }
    }
    responses: {
      /** successful operation */
      200: {
        schema: definitions['AsyncFileOpResponseDto']
      }
      /** Bad request */
      400: unknown
      /** Not authorized */
      401: unknown
      /** Forbidden */
      403: unknown
      /** Resource not found */
      404: unknown
      /** Method not allowed */
      405: unknown
      /** Timeout */
      408: unknown
      /** Gone */
      410: unknown
      /** Unsupported media type */
      415: unknown
      /** Too many requests */
      429: unknown
      /** Internal server error */
      500: unknown
      /** Not implemented */
      501: unknown
    }
  }
  downloadWorkflowChanges: {
    parameters: {
      body: {
        body?: definitions['WorkflowChangesDto']
      }
    }
    responses: {
      /** successful operation */
      200: {
        schema: definitions['Response']
      }
      /** Bad request */
      400: unknown
      /** Not authorized */
      401: unknown
      /** Forbidden */
      403: unknown
      /** Resource not found */
      404: unknown
      /** Method not allowed */
      405: unknown
      /** Timeout */
      408: unknown
      /** Gone */
      410: unknown
      /** Unsupported media type */
      415: unknown
      /** Too many requests */
      429: unknown
      /** Internal server error */
      500: unknown
      /** Not implemented */
      501: unknown
    }
  }
  createLqaConversation_1: {
    parameters: {
      path: {
        jobUid: string
      }
      body: {
        body?: definitions['CreateLqaConversationDto']
      }
    }
    responses: {
      /** Created */
      201: {
        schema: definitions['LQAConversationDto']
      }
      /** Bad request */
      400: unknown
      /** Not authorized */
      401: unknown
      /** Forbidden */
      403: unknown
      /** Resource not found */
      404: unknown
      /** Method not allowed */
      405: unknown
      /** Timeout */
      408: unknown
      /** Gone */
      410: unknown
      /** Unsupported media type */
      415: unknown
      /** Too many requests */
      429: unknown
      /** Internal server error */
      500: unknown
      /** Not implemented */
      501: unknown
    }
  }
  updateLqaConversation_1: {
    parameters: {
      path: {
        jobUid: string
        conversationId: string
      }
      body: {
        body?: definitions['EditLqaConversationDto']
      }
    }
    responses: {
      /** Updated */
      202: {
        schema: definitions['LQAConversationDto']
      }
      /** Bad request */
      400: unknown
      /** Not authorized */
      401: unknown
      /** Forbidden */
      403: unknown
      /** Resource not found */
      404: unknown
      /** Method not allowed */
      405: unknown
      /** Timeout */
      408: unknown
      /** Gone */
      410: unknown
      /** Unsupported media type */
      415: unknown
      /** Too many requests */
      429: unknown
      /** Internal server error */
      500: unknown
      /** Not implemented */
      501: unknown
    }
  }
  addLQAComment_1: {
    parameters: {
      path: {
        jobUid: string
        conversationId: string
      }
      body: {
        body?: definitions['AddCommentDto']
      }
    }
    responses: {
      /** Created */
      201: {
        schema: definitions['AddLqaCommentResultDto']
      }
      /** Bad request */
      400: unknown
      /** Not authorized */
      401: unknown
      /** Forbidden */
      403: unknown
      /** Resource not found */
      404: unknown
      /** Method not allowed */
      405: unknown
      /** Timeout */
      408: unknown
      /** Gone */
      410: unknown
      /** Unsupported media type */
      415: unknown
      /** Too many requests */
      429: unknown
      /** Internal server error */
      500: unknown
      /** Not implemented */
      501: unknown
    }
  }
  updateLQAComment_1: {
    parameters: {
      path: {
        jobUid: string
        conversationId: string
        commentId: string
      }
      body: {
        body?: definitions['AddCommentDto']
      }
    }
    responses: {
      /** Updated */
      202: {
        schema: definitions['LQAConversationDto']
      }
      /** Bad request */
      400: unknown
      /** Not authorized */
      401: unknown
      /** Forbidden */
      403: unknown
      /** Resource not found */
      404: unknown
      /** Method not allowed */
      405: unknown
      /** Timeout */
      408: unknown
      /** Gone */
      410: unknown
      /** Unsupported media type */
      415: unknown
      /** Too many requests */
      429: unknown
      /** Internal server error */
      500: unknown
      /** Not implemented */
      501: unknown
    }
  }
  getLqaProfileAuthorsV2: {
    parameters: {
      query: {
        /** Page number, starting with 0, default 0 */
        pageNumber?: number
        /** Page size, accepts values between 1 and 50, default 20 */
        pageSize?: number
      }
    }
    responses: {
      /** successful operation */
      200: {
        schema: definitions['PageDtoUserReference']
      }
      /** Bad request */
      400: unknown
      /** Not authorized */
      401: unknown
      /** Forbidden */
      403: unknown
      /** Resource not found */
      404: unknown
      /** Method not allowed */
      405: unknown
      /** Timeout */
      408: unknown
      /** Gone */
      410: unknown
      /** Unsupported media type */
      415: unknown
      /** Too many requests */
      429: unknown
      /** Internal server error */
      500: unknown
      /** Not implemented */
      501: unknown
    }
  }
  listProviders_3: {
    parameters: {
      path: {
        projectUid: string
      }
    }
    responses: {
      /** successful operation */
      200: {
        schema: definitions['ProviderListDtoV2']
      }
      /** Bad request */
      400: unknown
      /** Not authorized */
      401: unknown
      /** Forbidden */
      403: unknown
      /** Resource not found */
      404: unknown
      /** Method not allowed */
      405: unknown
      /** Timeout */
      408: unknown
      /** Gone */
      410: unknown
      /** Unsupported media type */
      415: unknown
      /** Too many requests */
      429: unknown
      /** Internal server error */
      500: unknown
      /** Not implemented */
      501: unknown
    }
  }
  setProjectQASettingsV2: {
    parameters: {
      path: {
        projectUid: string
      }
      body: {
        body?: definitions['EditQASettingsDtoV2']
      }
    }
    responses: {
      /** successful operation */
      200: {
        schema: definitions['QASettingsDtoV2']
      }
      /** Bad request */
      400: unknown
      /** Not authorized */
      401: unknown
      /** Forbidden */
      403: unknown
      /** Resource not found */
      404: unknown
      /** Method not allowed */
      405: unknown
      /** Timeout */
      408: unknown
      /** Gone */
      410: unknown
      /** Unsupported media type */
      415: unknown
      /** Too many requests */
      429: unknown
      /** Internal server error */
      500: unknown
      /** Not implemented */
      501: unknown
    }
  }
  createProjectFromTemplateV2: {
    parameters: {
      path: {
        templateUid: string
      }
      body: {
        body?: definitions['CreateProjectFromTemplateV2Dto']
      }
    }
    responses: {
      /** Created */
      201: {
        schema: definitions['AbstractProjectDtoV2']
      }
      /** Bad request */
      400: unknown
      /** Not authorized */
      401: unknown
      /** Forbidden */
      403: unknown
      /** Resource not found */
      404: unknown
      /** Method not allowed */
      405: unknown
      /** Timeout */
      408: unknown
      /** Gone */
      410: unknown
      /** Unsupported media type */
      415: unknown
      /** Too many requests */
      429: unknown
      /** Internal server error */
      500: unknown
      /** Not implemented */
      501: unknown
    }
  }
  createProjectFromTemplateV2Async: {
    parameters: {
      path: {
        templateUid: string
      }
      body: {
        body?: definitions['CreateProjectFromTemplateAsyncV2Dto']
      }
    }
    responses: {
      /** Accepted */
      202: {
        schema: definitions['AsyncRequestWrapperV2Dto']
      }
      /** Bad request */
      400: unknown
      /** Not authorized */
      401: unknown
      /** Forbidden */
      403: unknown
      /** Resource not found */
      404: unknown
      /** Method not allowed */
      405: unknown
      /** Timeout */
      408: unknown
      /** Gone */
      410: unknown
      /** Unsupported media type */
      415: unknown
      /** Too many requests */
      429: unknown
      /** Internal server error */
      500: unknown
      /** Not implemented */
      501: unknown
    }
  }
  getProjectAccessSettingsV2: {
    parameters: {
      path: {
        projectUid: string
      }
    }
    responses: {
      /** successful operation */
      200: {
        schema: definitions['ProjectSecuritySettingsDtoV2']
      }
      /** Bad request */
      400: unknown
      /** Not authorized */
      401: unknown
      /** Forbidden */
      403: unknown
      /** Resource not found */
      404: unknown
      /** Method not allowed */
      405: unknown
      /** Timeout */
      408: unknown
      /** Gone */
      410: unknown
      /** Unsupported media type */
      415: unknown
      /** Too many requests */
      429: unknown
      /** Internal server error */
      500: unknown
      /** Not implemented */
      501: unknown
    }
  }
  editProjectAccessSettingsV2: {
    parameters: {
      path: {
        projectUid: string
      }
      body: {
        body?: definitions['EditProjectSecuritySettingsDtoV2']
      }
    }
    responses: {
      /** successful operation */
      200: {
        schema: definitions['ProjectSecuritySettingsDtoV2']
      }
      /** Bad request */
      400: unknown
      /** Not authorized */
      401: unknown
      /** Forbidden */
      403: unknown
      /** Resource not found */
      404: unknown
      /** Method not allowed */
      405: unknown
      /** Timeout */
      408: unknown
      /** Gone */
      410: unknown
      /** Unsupported media type */
      415: unknown
      /** Too many requests */
      429: unknown
      /** Internal server error */
      500: unknown
      /** Not implemented */
      501: unknown
    }
  }
  getProjectWorkflowStepsV2: {
    parameters: {
      path: {
        projectUid: string
      }
      query: {
        /** Return only steps containing jobs assigned to the calling linguist. */
        withAssignedJobs?: boolean
      }
    }
    responses: {
      /** successful operation */
      200: {
        schema: definitions['ProjectWorkflowStepListDtoV2']
      }
      /** Bad request */
      400: unknown
      /** Not authorized */
      401: unknown
      /** Forbidden */
      403: unknown
      /** Resource not found */
      404: unknown
      /** Method not allowed */
      405: unknown
      /** Timeout */
      408: unknown
      /** Gone */
      410: unknown
      /** Unsupported media type */
      415: unknown
      /** Too many requests */
      429: unknown
      /** Internal server error */
      500: unknown
      /** Not implemented */
      501: unknown
    }
  }
  editProjectV2: {
    parameters: {
      path: {
        projectUid: string
      }
      body: {
        body?: definitions['EditProjectV2Dto']
      }
    }
    responses: {
      /** successful operation */
      200: {
        schema: definitions['AbstractProjectDtoV2']
      }
      /** Bad request */
      400: unknown
      /** Not authorized */
      401: unknown
      /** Forbidden */
      403: unknown
      /** Resource not found */
      404: unknown
      /** Method not allowed */
      405: unknown
      /** Timeout */
      408: unknown
      /** Gone */
      410: unknown
      /** Unsupported media type */
      415: unknown
      /** Too many requests */
      429: unknown
      /** Internal server error */
      500: unknown
      /** Not implemented */
      501: unknown
    }
  }
  listPartsV2: {
    parameters: {
      path: {
        projectUid: string
      }
      query: {
        pageNumber?: number
        pageSize?: number
        count?: boolean
        workflowLevel?: number
        status?: (
          | 'NEW'
          | 'ACCEPTED'
          | 'DECLINED'
          | 'REJECTED'
          | 'DELIVERED'
          | 'EMAILED'
          | 'COMPLETED'
          | 'CANCELLED'
        )[]
        assignedUser?: number
        dueInHours?: number
        filename?: string
        targetLang?: string
        assignedVendor?: number
        notReady?: boolean
      }
    }
    responses: {
      /** successful operation */
      200: {
        schema: definitions['PageDtoJobPartReferenceV2']
      }
      /** Bad request */
      400: unknown
      /** Not authorized */
      401: unknown
      /** Forbidden */
      403: unknown
      /** Resource not found */
      404: unknown
      /** Method not allowed */
      405: unknown
      /** Timeout */
      408: unknown
      /** Gone */
      410: unknown
      /** Unsupported media type */
      415: unknown
      /** Too many requests */
      429: unknown
      /** Internal server error */
      500: unknown
      /** Not implemented */
      501: unknown
    }
  }
  /** Returns enabled quality assurance checks and settings. */
  enabledQualityChecksForJob: {
    parameters: {
      path: {
        projectUid: string
      }
    }
    responses: {
      /** successful operation */
      200: {
        schema: definitions['QualityAssuranceChecksDtoV2']
      }
      /** Bad request */
      400: unknown
      /** Not authorized */
      401: unknown
      /** Forbidden */
      403: unknown
      /** Resource not found */
      404: unknown
      /** Method not allowed */
      405: unknown
      /** Timeout */
      408: unknown
      /** Gone */
      410: unknown
      /** Unsupported media type */
      415: unknown
      /** Too many requests */
      429: unknown
      /** Internal server error */
      500: unknown
      /** Not implemented */
      501: unknown
    }
  }
  /** Returns enabled quality assurance checks and settings for job. */
  enabledQualityChecksForJob_1: {
    parameters: {
      path: {
        projectUid: string
        jobUid: string
      }
    }
    responses: {
      /** successful operation */
      200: {
        schema: definitions['QualityAssuranceChecksDtoV2']
      }
      /** Bad request */
      400: unknown
      /** Not authorized */
      401: unknown
      /** Forbidden */
      403: unknown
      /** Resource not found */
      404: unknown
      /** Method not allowed */
      405: unknown
      /** Timeout */
      408: unknown
      /** Gone */
      410: unknown
      /** Unsupported media type */
      415: unknown
      /** Too many requests */
      429: unknown
      /** Internal server error */
      500: unknown
      /** Not implemented */
      501: unknown
    }
  }
  /**
   * Possible warning codes are:
   *   - `NOT_ACCEPTED_BY_LINGUIST` - Job is not accepted by linguist
   *   - `NOT_ASSIGNED_TO_LINGUIST` - Job is not assigned to linguist
   *   - `PDF` - One of requested jobs is PDF
   *   - `PREVIOUS_WORKFLOW_NOT_COMPLETED` - Previous workflow step is not completed
   *   - `PREVIOUS_WORKFLOW_NOT_COMPLETED_STRICT` - Previous workflow step is not completed and project has strictWorkflowFinish set to true
   *   - `IN_DELIVERED_STATE` - Jobs in DELIVERED state
   *   - `IN_COMPLETED_STATE` - Jobs in COMPLETED state
   *   - `IN_REJECTED_STATE` - Jobs in REJECTED state
   *
   * Possible error codes are:
   *   - `ASSIGNED_TO_OTHER_USER` - Job is accepted by other user
   *   - `NOT_UNIQUE_TARGET_LANG` - Requested jobs contains different target locales
   *   - `TOO_MANY_SEGMENTS` - Count of requested job's segments is higher than **40000**
   *   - `TOO_MANY_JOBS` - Count of requested jobs is higher than **290**
   *   - `COMPLETED_JOINED_WITH_OTHER` - Jobs in COMPLETED state cannot be joined with jobs in other states
   *   - `DELIVERED_JOINED_WITH_OTHER` - Jobs in DELIVERED state cannot be joined with jobs in other states
   *   - `REJECTED_JOINED_WITH_OTHER` - Jobs in REJECTED state cannot be joined with jobs in other states
   *
   * Warning response example:
   * ```
   * {
   *     "warnings": [
   *         {
   *             "message": "Not accepted by linguist",
   *             "args": {
   *                 "jobs": [
   *                     "abcd1234"
   *                 ]
   *             },
   *             "code": "NOT_ACCEPTED_BY_LINGUIST"
   *         },
   *         {
   *             "message": "Previous workflow step not completed",
   *             "args": {
   *                 "jobs": [
   *                     "abcd1234"
   *                 ]
   *             },
   *             "code": "PREVIOUS_WORKFLOW_NOT_COMPLETED"
   *         }
   *     ],
   *     "url": "/web/job/abcd1234-efgh5678/translate"
   * }
   * ```
   *
   * Error response example:
   * Status: `400 Bad Request`
   * ```
   * {
   *     "errorCode": "NOT_UNIQUE_TARGET_LANG",
   *     "errorDescription": "Only files with identical target languages can be joined",
   *     "errorDetails": [
   *         {
   *             "code": "NOT_UNIQUE_TARGET_LANG",
   *             "args": {
   *                 "targetLocales": [
   *                     "de",
   *                     "en"
   *                 ]
   *             },
   *             "message": "Only files with identical target languages can be joined"
   *         },
   *         {
   *             "code": "TOO_MANY_SEGMENTS",
   *             "args": {
   *                 "maxSegments": 40000,
   *                 "segments": 400009
   *             },
   *             "message": "Up to 40000 segments can be opened in the Memsource Web Editor, job has 400009 segments"
   *         }
   *     ]
   * }
   * ```
   */
  webEditorLinkV2: {
    parameters: {
      path: {
        projectUid: string
      }
      body: {
        body?: definitions['CreateWebEditorLinkDtoV2']
      }
    }
    responses: {
      /** successful operation */
      200: {
        schema: definitions['WebEditorLinkDtoV2']
      }
      /** Bad request */
      400: unknown
      /** Not authorized */
      401: unknown
      /** Forbidden */
      403: unknown
      /** Resource not found */
      404: unknown
      /** Method not allowed */
      405: unknown
      /** Timeout */
      408: unknown
      /** Gone */
      410: unknown
      /** Unsupported media type */
      415: unknown
      /** Too many requests */
      429: unknown
      /** Internal server error */
      500: unknown
      /** Not implemented */
      501: unknown
    }
  }
  pseudoTranslate_1: {
    parameters: {
      path: {
        projectUid: string
      }
      body: {
        body?: definitions['PseudoTranslateWrapperDto']
      }
    }
    responses: {
      /** No Content */
      204: never
      /** Bad request */
      400: unknown
      /** Not authorized */
      401: unknown
      /** Forbidden */
      403: unknown
      /** Resource not found */
      404: unknown
      /** Method not allowed */
      405: unknown
      /** Timeout */
      408: unknown
      /** Gone */
      410: unknown
      /** Unsupported media type */
      415: unknown
      /** Too many requests */
      429: unknown
      /** Internal server error */
      500: unknown
      /** Not implemented */
      501: unknown
    }
  }
  preTranslate_1: {
    parameters: {
      path: {
        projectUid: string
      }
      body: {
        body?: definitions['PreTranslateJobsV2Dto']
      }
    }
    responses: {
      /** Accepted */
      202: {
        schema: definitions['AsyncRequestWrapperV2Dto']
      }
      /** Bad request */
      400: unknown
      /** Not authorized */
      401: unknown
      /** Forbidden */
      403: unknown
      /** Resource not found */
      404: unknown
      /** Method not allowed */
      405: unknown
      /** Timeout */
      408: unknown
      /** Gone */
      410: unknown
      /** Unsupported media type */
      415: unknown
      /** Too many requests */
      429: unknown
      /** Internal server error */
      500: unknown
      /** Not implemented */
      501: unknown
    }
  }
  deleteAllTranslations_1: {
    parameters: {
      path: {
        projectUid: string
      }
      body: {
        body?: definitions['JobPartReadyDeleteTranslationDto']
      }
    }
    responses: {
      /** No Content */
      204: never
      /** Bad request */
      400: unknown
      /** Not authorized */
      401: unknown
      /** Forbidden */
      403: unknown
      /** Resource not found */
      404: unknown
      /** Method not allowed */
      405: unknown
      /** Timeout */
      408: unknown
      /** Gone */
      410: unknown
      /** Unsupported media type */
      415: unknown
      /** Too many requests */
      429: unknown
      /** Internal server error */
      500: unknown
      /** Not implemented */
      501: unknown
    }
  }
  listProviders_4: {
    parameters: {
      path: {
        projectUid: string
        jobUid: string
      }
    }
    responses: {
      /** successful operation */
      200: {
        schema: definitions['ProviderListDtoV2']
      }
      /** Bad request */
      400: unknown
      /** Not authorized */
      401: unknown
      /** Forbidden */
      403: unknown
      /** Resource not found */
      404: unknown
      /** Method not allowed */
      405: unknown
      /** Timeout */
      408: unknown
      /** Gone */
      410: unknown
      /** Unsupported media type */
      415: unknown
      /** Too many requests */
      429: unknown
      /** Internal server error */
      500: unknown
      /** Not implemented */
      501: unknown
    }
  }
  /**
   * This call will create async request for downloading target file with translation that can be downloaded when
   *     finished. This means even for other jobs that were created via 'split jobs' etc.
   */
  completedFile_1: {
    parameters: {
      path: {
        projectUid: string
        jobUid: string
      }
    }
    responses: {
      /** Accepted */
      202: {
        schema: definitions['AsyncRequestWrapperV2Dto']
      }
      /** Bad request */
      400: unknown
      /** Not authorized */
      401: unknown
      /** Forbidden */
      403: unknown
      /** Resource not found */
      404: unknown
      /** Method not allowed */
      405: unknown
      /** Timeout */
      408: unknown
      /** Gone */
      410: unknown
      /** Unsupported media type */
      415: unknown
      /** Too many requests */
      429: unknown
      /** Internal server error */
      500: unknown
      /** Not implemented */
      501: unknown
    }
  }
  /**
   * This call will return target file with translation. This means even for other jobs that were created via
   *     'split jobs' etc.
   */
  downloadCompletedFile: {
    parameters: {
      path: {
        projectUid: string
        jobUid: string
        asyncRequestId: string
      }
      query: {
        format?: 'ORIGINAL' | 'PDF'
      }
    }
    responses: {
      /** application/octet-stream */
      200: unknown
      /** Bad request */
      400: unknown
      /** Not authorized */
      401: unknown
      /** Forbidden */
      403: unknown
      /** Resource not found */
      404: unknown
      /** Method not allowed */
      405: unknown
      /** Timeout */
      408: unknown
      /** Gone */
      410: unknown
      /** Unsupported media type */
      415: unknown
      /** Too many requests */
      429: unknown
      /** Internal server error */
      500: unknown
      /** Not implemented */
      501: unknown
    }
  }
  addIgnoredWarnings_1: {
    parameters: {
      path: {
        projectUid: string
      }
      body: {
        body?: definitions['UpdateIgnoredWarningsDto']
      }
    }
    responses: {
      /** successful operation */
      200: {
        schema: definitions['UpdateIgnoredWarningsDto']
      }
      /** Bad request */
      400: unknown
      /** Not authorized */
      401: unknown
      /** Forbidden */
      403: unknown
      /** Resource not found */
      404: unknown
      /** Method not allowed */
      405: unknown
      /** Timeout */
      408: unknown
      /** Gone */
      410: unknown
      /** Unsupported media type */
      415: unknown
      /** Too many requests */
      429: unknown
      /** Internal server error */
      500: unknown
      /** Not implemented */
      501: unknown
    }
  }
  deleteIgnoredWarnings_1: {
    parameters: {
      path: {
        projectUid: string
      }
      body: {
        body?: definitions['UpdateIgnoredWarningsDto']
      }
    }
    responses: {
      /** No Content */
      204: never
      /** Bad request */
      400: unknown
      /** Not authorized */
      401: unknown
      /** Forbidden */
      403: unknown
      /** Resource not found */
      404: unknown
      /** Method not allowed */
      405: unknown
      /** Timeout */
      408: unknown
      /** Gone */
      410: unknown
      /** Unsupported media type */
      415: unknown
      /** Too many requests */
      429: unknown
      /** Internal server error */
      500: unknown
      /** Not implemented */
      501: unknown
    }
  }
  /**
   * The `json` request part allows sending additional data as JSON,
   * such as a text note that will be used for all the given reference files.
   * In case no `file` parts are sent, only 1 reference is created with the given note.
   * Either at least one file must be sent or the note must be specified.
   * Example:
   *
   * ```
   * {
   *     "note": "Sample text"
   * }
   * ```
   */
  createReferenceFiles: {
    parameters: {
      path: {
        projectUid: string
      }
      body: {
        /** Multipart request with files and JSON */
        multipart: definitions['CreateReferenceFilesRequest']
      }
    }
    responses: {
      /** Created */
      201: {
        schema: definitions['ReferenceFilesDto']
      }
      /** Bad request */
      400: unknown
      /** Not authorized */
      401: unknown
      /** Forbidden */
      403: unknown
      /** Resource not found */
      404: unknown
      /** Method not allowed */
      405: unknown
      /** Timeout */
      408: unknown
      /** Gone */
      410: unknown
      /** Unsupported media type */
      415: unknown
      /** Too many requests */
      429: unknown
      /** Internal server error */
      500: unknown
      /** Not implemented */
      501: unknown
    }
  }
  /**
   * If user wants to edit “All target languages” or "All workflow steps”,
   *                        but there are already varied TM settings for individual languages or steps,
   *                        then the user risks to overwrite these individual choices.
   */
  setProjectTemplateTransMemoriesV2: {
    parameters: {
      path: {
        projectTemplateUid: string
      }
      body: {
        body?: definitions['SetProjectTemplateTransMemoriesV2Dto']
      }
    }
    responses: {
      /** OK */
      200: {
        schema: definitions['ProjectTemplateTransMemoryListV2Dto']
      }
      /** Bad request */
      400: unknown
      /** Not authorized */
      401: unknown
      /** Forbidden */
      403: unknown
      /** Resource not found */
      404: unknown
      /** Method not allowed */
      405: unknown
      /** Timeout */
      408: unknown
      /** Gone */
      410: unknown
      /** Unsupported media type */
      415: unknown
      /** Too many requests */
      429: unknown
      /** Internal server error */
      500: unknown
      /** Not implemented */
      501: unknown
    }
  }
  /** Either WorkflowSettings or Units must be sent for billingUnit "Hour". */
  createQuoteV2: {
    parameters: {
      body: {
        body?: definitions['QuoteCreateV2Dto']
      }
    }
    responses: {
      /** successful operation */
      201: {
        schema: definitions['QuoteV2Dto']
      }
      /** Bad request */
      400: unknown
      /** Not authorized */
      401: unknown
      /** Forbidden */
      403: unknown
      /** Resource not found */
      404: unknown
      /** Method not allowed */
      405: unknown
      /** Timeout */
      408: unknown
      /** Gone */
      410: unknown
      /** Unsupported media type */
      415: unknown
      /** Too many requests */
      429: unknown
      /** Internal server error */
      500: unknown
      /** Not implemented */
      501: unknown
    }
  }
  /**
   * Terms can be imported from XLS/XLSX and TBX file formats into a term base.
   * See <a target="_blank" href="https://support.phrase.com/hc/en-us/articles/5709733372188">Phrase Help Center</a>
   */
  importTermBaseV2: {
    parameters: {
      body: {
        body?: definitions['InputStream']
      }
      header: {
        /** must match pattern `((inline|attachment); )?filename\*=UTF-8''(.+)` */
        'Content-Disposition': string
      }
      path: {
        termBaseUid: string
      }
      query: {
        charset?: string
        strictLangMatching?: boolean
        updateTerms?: boolean
      }
    }
    responses: {
      /** Bad request */
      400: unknown
      /** Not authorized */
      401: unknown
      /** Forbidden */
      403: unknown
      /** Resource not found */
      404: unknown
      /** Method not allowed */
      405: unknown
      /** Timeout */
      408: unknown
      /** Gone */
      410: unknown
      /** Unsupported media type */
      415: unknown
      /** Too many requests */
      429: unknown
      /** Internal server error */
      500: unknown
      /** Not implemented */
      501: unknown
    }
  }
  /** Use [this API](#operation/downloadSearchResult) to download result */
  exportV2: {
    parameters: {
      path: {
        transMemoryUid: string
      }
      body: {
        body?: definitions['ExportTMDto']
      }
    }
    responses: {
      /** successful operation */
      200: {
        schema: definitions['AsyncExportTMResponseDto']
      }
      /** Bad request */
      400: unknown
      /** Not authorized */
      401: unknown
      /** Forbidden */
      403: unknown
      /** Resource not found */
      404: unknown
      /** Method not allowed */
      405: unknown
      /** Timeout */
      408: unknown
      /** Gone */
      410: unknown
      /** Unsupported media type */
      415: unknown
      /** Too many requests */
      429: unknown
      /** Internal server error */
      500: unknown
      /** Not implemented */
      501: unknown
    }
  }
  /** This call is **asynchronous**, use [this API](#operation/getAsyncRequest) to check the result */
  clearTransMemoryV2: {
    parameters: {
      path: {
        transMemoryUid: string
      }
    }
    responses: {
      /** Accepted */
      202: unknown
      /** Bad request */
      400: unknown
      /** Not authorized */
      401: unknown
      /** Forbidden */
      403: unknown
      /** Resource not found */
      404: unknown
      /** Method not allowed */
      405: unknown
      /** Timeout */
      408: unknown
      /** Gone */
      410: unknown
      /** Unsupported media type */
      415: unknown
      /** Too many requests */
      429: unknown
      /** Internal server error */
      500: unknown
      /** Not implemented */
      501: unknown
    }
  }
  importTransMemoryV2: {
    parameters: {
      header: {
        'Content-Length'?: number
        /** must match pattern `((inline|attachment); )?filename\*=UTF-8''(.+)` */
        'Content-Disposition': string
      }
      path: {
        transMemoryUid: string
      }
      body: {
        body?: definitions['InputStream']
      }
      query: {
        strictLangMatching?: boolean
        stripNativeCodes?: boolean
      }
    }
    responses: {
      /** successful operation */
      202: {
        schema: definitions['AsyncRequestWrapperV2Dto']
      }
      /** Bad request */
      400: unknown
      /** Not authorized */
      401: unknown
      /** Forbidden */
      403: unknown
      /** Resource not found */
      404: unknown
      /** Method not allowed */
      405: unknown
      /** Timeout */
      408: unknown
      /** Gone */
      410: unknown
      /** Unsupported media type */
      415: unknown
      /** Too many requests */
      429: unknown
      /** Internal server error */
      500: unknown
      /** Not implemented */
      501: unknown
    }
  }
  getWebHookList_1: {
    parameters: {
      query: {
        /** Page number, starting with 0, default 0 */
        pageNumber?: number
        /** Page size, accepts values between 1 and 50, default 50 */
        pageSize?: number
        /** Filter by webhook name */
        name?: string
        /** Filter by enabled/disabled status */
        status?: 'ENABLED' | 'DISABLED'
        /** Filter by webhook URL */
        url?: string
        /** Filter by webhook events, any match is included */
        events?: (
          | 'JOB_STATUS_CHANGED'
          | 'JOB_CREATED'
          | 'JOB_DELETED'
          | 'JOB_UNSHARED'
          | 'JOB_ASSIGNED'
          | 'JOB_DUE_DATE_CHANGED'
          | 'JOB_UPDATED'
          | 'JOB_TARGET_UPDATED'
          | 'JOB_EXPORTED'
          | 'JOB_UNEXPORTED'
          | 'PROJECT_CREATED'
          | 'PROJECT_DELETED'
          | 'PROJECT_UNSHARED'
          | 'PROJECT_STATUS_CHANGED'
          | 'PROJECT_DUE_DATE_CHANGED'
          | 'SHARED_PROJECT_ASSIGNED'
          | 'PROJECT_METADATA_UPDATED'
          | 'PRE_TRANSLATION_FINISHED'
          | 'ANALYSIS_CREATED'
          | 'CONTINUOUS_JOB_UPDATED'
          | 'PROJECT_TEMPLATE_CREATED'
          | 'PROJECT_TEMPLATE_UPDATED'
          | 'PROJECT_TEMPLATE_DELETED'
          | 'RAW_MT_CONVERTER_IMPORT_FINISHED'
          | 'RAW_MT_PRE_TRANSLATION_FINISHED'
        )[]
        /** Filter by webhook creators UIDs */
        createdBy?: string[]
        /** Filter by webhook updaters UIDs */
        modifiedBy?: string[]
        /** Sort by this field */
        sortField?: 'NAME' | 'STATUS' | 'CREATED' | 'LAST_MODIFIED'
        /** Sort direction */
        sortTrend?: 'ASC' | 'DESC'
      }
    }
    responses: {
      /** successful operation */
      200: {
        schema: definitions['PageDtoWebHookDtoV2']
      }
      /** Bad request */
      400: unknown
      /** Not authorized */
      401: unknown
      /** Forbidden */
      403: unknown
      /** Resource not found */
      404: unknown
      /** Method not allowed */
      405: unknown
      /** Timeout */
      408: unknown
      /** Gone */
      410: unknown
      /** Unsupported media type */
      415: unknown
      /** Too many requests */
      429: unknown
      /** Internal server error */
      500: unknown
      /** Not implemented */
      501: unknown
    }
  }
  createWebHook_1: {
    parameters: {
      body: {
        body?: definitions['CreateWebHookDto']
      }
    }
    responses: {
      /** Created */
      201: {
        schema: definitions['WebHookDtoV2']
      }
      /** Bad request */
      400: unknown
      /** Not authorized */
      401: unknown
      /** Forbidden */
      403: unknown
      /** Resource not found */
      404: unknown
      /** Method not allowed */
      405: unknown
      /** Timeout */
      408: unknown
      /** Gone */
      410: unknown
      /** Unsupported media type */
      415: unknown
      /** Too many requests */
      429: unknown
      /** Internal server error */
      500: unknown
      /** Not implemented */
      501: unknown
    }
  }
  getWebHook_1: {
    parameters: {
      path: {
        webHookUid: string
      }
    }
    responses: {
      /** successful operation */
      200: {
        schema: definitions['WebHookDtoV2']
      }
      /** Bad request */
      400: unknown
      /** Not authorized */
      401: unknown
      /** Forbidden */
      403: unknown
      /** Resource not found */
      404: unknown
      /** Method not allowed */
      405: unknown
      /** Timeout */
      408: unknown
      /** Gone */
      410: unknown
      /** Unsupported media type */
      415: unknown
      /** Too many requests */
      429: unknown
      /** Internal server error */
      500: unknown
      /** Not implemented */
      501: unknown
    }
  }
  updateWebHook_1: {
    parameters: {
      path: {
        webHookUid: string
      }
      body: {
        body?: definitions['CreateWebHookDto']
      }
    }
    responses: {
      /** successful operation */
      200: {
        schema: definitions['WebHookDtoV2']
      }
      /** Bad request */
      400: unknown
      /** Not authorized */
      401: unknown
      /** Forbidden */
      403: unknown
      /** Resource not found */
      404: unknown
      /** Method not allowed */
      405: unknown
      /** Timeout */
      408: unknown
      /** Gone */
      410: unknown
      /** Unsupported media type */
      415: unknown
      /** Too many requests */
      429: unknown
      /** Internal server error */
      500: unknown
      /** Not implemented */
      501: unknown
    }
  }
  deleteWebHook_1: {
    parameters: {
      path: {
        webHookUid: string
      }
    }
    responses: {
      /** No Content */
      204: never
      /** Bad request */
      400: unknown
      /** Not authorized */
      401: unknown
      /** Forbidden */
      403: unknown
      /** Resource not found */
      404: unknown
      /** Method not allowed */
      405: unknown
      /** Timeout */
      408: unknown
      /** Gone */
      410: unknown
      /** Unsupported media type */
      415: unknown
      /** Too many requests */
      429: unknown
      /** Internal server error */
      500: unknown
      /** Not implemented */
      501: unknown
    }
  }
  getWebhookPreviews: {
    parameters: {
      query: {
        /** Filter by webhook events */
        events?: (
          | 'JOB_STATUS_CHANGED'
          | 'JOB_CREATED'
          | 'JOB_DELETED'
          | 'JOB_UNSHARED'
          | 'JOB_ASSIGNED'
          | 'JOB_DUE_DATE_CHANGED'
          | 'JOB_UPDATED'
          | 'JOB_TARGET_UPDATED'
          | 'JOB_EXPORTED'
          | 'JOB_UNEXPORTED'
          | 'PROJECT_CREATED'
          | 'PROJECT_DELETED'
          | 'PROJECT_UNSHARED'
          | 'PROJECT_STATUS_CHANGED'
          | 'PROJECT_DUE_DATE_CHANGED'
          | 'SHARED_PROJECT_ASSIGNED'
          | 'PROJECT_METADATA_UPDATED'
          | 'PRE_TRANSLATION_FINISHED'
          | 'ANALYSIS_CREATED'
          | 'CONTINUOUS_JOB_UPDATED'
          | 'PROJECT_TEMPLATE_CREATED'
          | 'PROJECT_TEMPLATE_UPDATED'
          | 'PROJECT_TEMPLATE_DELETED'
          | 'RAW_MT_CONVERTER_IMPORT_FINISHED'
          | 'RAW_MT_PRE_TRANSLATION_FINISHED'
        )[]
      }
    }
    responses: {
      /** successful operation */
      200: {
        schema: definitions['WebhookPreviewsDto']
      }
      /** Bad request */
      400: unknown
      /** Not authorized */
      401: unknown
      /** Forbidden */
      403: unknown
      /** Resource not found */
      404: unknown
      /** Method not allowed */
      405: unknown
      /** Timeout */
      408: unknown
      /** Gone */
      410: unknown
      /** Unsupported media type */
      415: unknown
      /** Too many requests */
      429: unknown
      /** Internal server error */
      500: unknown
      /** Not implemented */
      501: unknown
    }
  }
  sendTestWebhook: {
    parameters: {
      path: {
        /** UID of the webhook */
        webhookUid: string
      }
      query: {
        /** Event of test webhook */
        event:
          | 'JOB_STATUS_CHANGED'
          | 'JOB_CREATED'
          | 'JOB_DELETED'
          | 'JOB_UNSHARED'
          | 'JOB_ASSIGNED'
          | 'JOB_DUE_DATE_CHANGED'
          | 'JOB_UPDATED'
          | 'JOB_TARGET_UPDATED'
          | 'JOB_EXPORTED'
          | 'JOB_UNEXPORTED'
          | 'PROJECT_CREATED'
          | 'PROJECT_DELETED'
          | 'PROJECT_UNSHARED'
          | 'PROJECT_STATUS_CHANGED'
          | 'PROJECT_DUE_DATE_CHANGED'
          | 'SHARED_PROJECT_ASSIGNED'
          | 'PROJECT_METADATA_UPDATED'
          | 'PRE_TRANSLATION_FINISHED'
          | 'ANALYSIS_CREATED'
          | 'CONTINUOUS_JOB_UPDATED'
          | 'PROJECT_TEMPLATE_CREATED'
          | 'PROJECT_TEMPLATE_UPDATED'
          | 'PROJECT_TEMPLATE_DELETED'
          | 'RAW_MT_CONVERTER_IMPORT_FINISHED'
          | 'RAW_MT_PRE_TRANSLATION_FINISHED'
      }
    }
    responses: {
      /** Test webhook sent */
      201: unknown
      /** Bad request */
      400: unknown
      /** Not authorized */
      401: unknown
      /** Forbidden */
      403: unknown
      /** Resource not found */
      404: unknown
      /** Method not allowed */
      405: unknown
      /** Timeout */
      408: unknown
      /** Gone */
      410: unknown
      /** Unsupported media type */
      415: unknown
      /** Too many requests */
      429: unknown
      /** Internal server error */
      500: unknown
      /** Not implemented */
      501: unknown
    }
  }
  /** Search in text in all read term bases assigned to the job */
  searchTermsInTextByJobV2: {
    parameters: {
      path: {
        jobUid: string
        projectUid: string
      }
      body: {
        body?: definitions['SearchTbInTextByJobRequestDto']
      }
    }
    responses: {
      /** successful operation */
      200: {
        schema: definitions['SearchInTextResponseList2Dto']
      }
      /** Bad request */
      400: unknown
      /** Not authorized */
      401: unknown
      /** Forbidden */
      403: unknown
      /** Resource not found */
      404: unknown
      /** Method not allowed */
      405: unknown
      /** Timeout */
      408: unknown
      /** Gone */
      410: unknown
      /** Unsupported media type */
      415: unknown
      /** Too many requests */
      429: unknown
      /** Internal server error */
      500: unknown
      /** Not implemented */
      501: unknown
    }
  }
  /** Search all read term bases assigned to the job */
  searchTermsByJob_1: {
    parameters: {
      path: {
        jobUid: string
        projectUid: string
      }
      body: {
        body?: definitions['SearchTbByJobRequestDto']
      }
    }
    responses: {
      /** successful operation */
      200: {
        schema: definitions['SearchTbResponseListDto']
      }
      /** Bad request */
      400: unknown
      /** Not authorized */
      401: unknown
      /** Forbidden */
      403: unknown
      /** Resource not found */
      404: unknown
      /** Method not allowed */
      405: unknown
      /** Timeout */
      408: unknown
      /** Gone */
      410: unknown
      /** Unsupported media type */
      415: unknown
      /** Too many requests */
      429: unknown
      /** Internal server error */
      500: unknown
      /** Not implemented */
      501: unknown
    }
  }
  getAnalyseV3: {
    parameters: {
      path: {
        analyseUid: string
      }
    }
    responses: {
      /** successful operation */
      200: {
        schema: definitions['AnalyseV3Dto']
      }
      /** Bad request */
      400: unknown
      /** Not authorized */
      401: unknown
      /** Forbidden */
      403: unknown
      /** Resource not found */
      404: unknown
      /** Method not allowed */
      405: unknown
      /** Timeout */
      408: unknown
      /** Gone */
      410: unknown
      /** Unsupported media type */
      415: unknown
      /** Too many requests */
      429: unknown
      /** Internal server error */
      500: unknown
      /** Not implemented */
      501: unknown
    }
  }
  login_1: {
    parameters: {
      body: {
        body?: definitions['LoginV3Dto']
      }
    }
    responses: {
      /** successful operation */
      200: {
        schema: definitions['LoginResponseV3Dto']
      }
      /** Bad request */
      400: unknown
      /** Not authorized */
      401: unknown
      /** Forbidden */
      403: unknown
      /** Resource not found */
      404: unknown
      /** Method not allowed */
      405: unknown
      /** Timeout */
      408: unknown
      /** Gone */
      410: unknown
      /** Unsupported media type */
      415: unknown
      /** Too many requests */
      429: unknown
      /** Internal server error */
      500: unknown
      /** Not implemented */
      501: unknown
    }
  }
  loginToSession_2: {
    parameters: {
      body: {
        body?: definitions['LoginToSessionV3Dto']
      }
    }
    responses: {
      /** successful operation */
      200: {
        schema: definitions['LoginToSessionResponseV3Dto']
      }
      /** Bad request */
      400: unknown
      /** Not authorized */
      401: unknown
      /** Forbidden */
      403: unknown
      /** Resource not found */
      404: unknown
      /** Method not allowed */
      405: unknown
      /** Timeout */
      408: unknown
      /** Gone */
      410: unknown
      /** Unsupported media type */
      415: unknown
      /** Too many requests */
      429: unknown
      /** Internal server error */
      500: unknown
      /** Not implemented */
      501: unknown
    }
  }
  /** Available only for admin */
  loginOther_1: {
    parameters: {
      body: {
        body?: definitions['LoginOtherV3Dto']
      }
    }
    responses: {
      /** successful operation */
      200: {
        schema: definitions['LoginResponseV3Dto']
      }
      /** Bad request */
      400: unknown
      /** Not authorized */
      401: unknown
      /** Forbidden */
      403: unknown
      /** Resource not found */
      404: unknown
      /** Method not allowed */
      405: unknown
      /** Timeout */
      408: unknown
      /** Gone */
      410: unknown
      /** Unsupported media type */
      415: unknown
      /** Too many requests */
      429: unknown
      /** Internal server error */
      500: unknown
      /** Not implemented */
      501: unknown
    }
  }
  /** Allows partial update, not breaking whole batch if single job fails and returns list of errors */
  patchUpdateJobParts: {
    parameters: {
      body: {
        body?: definitions['JobPartPatchBatchDto']
      }
    }
    responses: {
      /** successful operation */
      200: {
        schema: definitions['JobPartPatchResultDto']
      }
      /** Bad request */
      400: unknown
      /** Not authorized */
      401: unknown
      /** Forbidden */
      403: unknown
      /** Resource not found */
      404: unknown
      /** Method not allowed */
      405: unknown
      /** Timeout */
      408: unknown
      /** Gone */
      410: unknown
      /** Unsupported media type */
      415: unknown
      /** Too many requests */
      429: unknown
      /** Internal server error */
      500: unknown
      /** Not implemented */
      501: unknown
    }
  }
  searchByJob3: {
    parameters: {
      path: {
        projectUid: string
        jobUid: string
      }
      body: {
        body?: definitions['SearchTMByJobRequestDtoV3']
      }
    }
    responses: {
      /** successful operation */
      200: {
        schema: definitions['SearchResponseListTmDtoV3']
      }
      /** Bad request */
      400: unknown
      /** Not authorized */
      401: unknown
      /** Forbidden */
      403: unknown
      /** Resource not found */
      404: unknown
      /** Method not allowed */
      405: unknown
      /** Timeout */
      408: unknown
      /** Gone */
      410: unknown
      /** Unsupported media type */
      415: unknown
      /** Too many requests */
      429: unknown
      /** Internal server error */
      500: unknown
      /** Not implemented */
      501: unknown
    }
  }
  wildCardSearchByJob3: {
    parameters: {
      path: {
        projectUid: string
        jobUid: string
      }
      body: {
        body?: definitions['WildCardSearchByJobRequestDtoV3']
      }
    }
    responses: {
      /** successful operation */
      200: {
        schema: definitions['SearchResponseListTmDtoV3']
      }
      /** Bad request */
      400: unknown
      /** Not authorized */
      401: unknown
      /** Forbidden */
      403: unknown
      /** Resource not found */
      404: unknown
      /** Method not allowed */
      405: unknown
      /** Timeout */
      408: unknown
      /** Gone */
      410: unknown
      /** Unsupported media type */
      415: unknown
      /** Too many requests */
      429: unknown
      /** Internal server error */
      500: unknown
      /** Not implemented */
      501: unknown
    }
  }
  addPlainComment_2: {
    parameters: {
      path: {
        jobUid: string
        conversationId: string
      }
      body: {
        body?: definitions['AddCommentDto']
      }
    }
    responses: {
      /** Created */
      201: {
        schema: definitions['AddPlainCommentResultDto']
      }
      /** Bad request */
      400: unknown
      /** Not authorized */
      401: unknown
      /** Forbidden */
      403: unknown
      /** Resource not found */
      404: unknown
      /** Method not allowed */
      405: unknown
      /** Timeout */
      408: unknown
      /** Gone */
      410: unknown
      /** Unsupported media type */
      415: unknown
      /** Too many requests */
      429: unknown
      /** Internal server error */
      500: unknown
      /** Not implemented */
      501: unknown
    }
  }
  createSegmentTargetConversation_1: {
    parameters: {
      path: {
        jobUid: string
      }
      body: {
        body?: definitions['CreatePlainConversationDto']
      }
    }
    responses: {
      /** Created */
      201: {
        schema: definitions['PlainConversationDto']
      }
      /** Bad request */
      400: unknown
      /** Not authorized */
      401: unknown
      /** Forbidden */
      403: unknown
      /** Resource not found */
      404: unknown
      /** Method not allowed */
      405: unknown
      /** Timeout */
      408: unknown
      /** Gone */
      410: unknown
      /** Unsupported media type */
      415: unknown
      /** Too many requests */
      429: unknown
      /** Internal server error */
      500: unknown
      /** Not implemented */
      501: unknown
    }
  }
  updatePlainComment_1: {
    parameters: {
      path: {
        jobUid: string
        conversationId: string
        commentId: string
      }
      body: {
        body?: definitions['AddCommentDto']
      }
    }
    responses: {
      /** Updated */
      202: {
        schema: definitions['PlainConversationDto']
      }
      /** Bad request */
      400: unknown
      /** Not authorized */
      401: unknown
      /** Forbidden */
      403: unknown
      /** Resource not found */
      404: unknown
      /** Method not allowed */
      405: unknown
      /** Timeout */
      408: unknown
      /** Gone */
      410: unknown
      /** Unsupported media type */
      415: unknown
      /** Too many requests */
      429: unknown
      /** Internal server error */
      500: unknown
      /** Not implemented */
      501: unknown
    }
  }
  getPreTranslateSettingsForProject_2: {
    parameters: {
      path: {
        projectUid: string
      }
    }
    responses: {
      /** successful operation */
      200: {
        schema: definitions['PreTranslateSettingsV3Dto']
      }
      /** Bad request */
      400: unknown
      /** Not authorized */
      401: unknown
      /** Forbidden */
      403: unknown
      /** Resource not found */
      404: unknown
      /** Method not allowed */
      405: unknown
      /** Timeout */
      408: unknown
      /** Gone */
      410: unknown
      /** Unsupported media type */
      415: unknown
      /** Too many requests */
      429: unknown
      /** Internal server error */
      500: unknown
      /** Not implemented */
      501: unknown
    }
  }
  editProjectPreTranslateSettings_2: {
    parameters: {
      path: {
        projectUid: string
      }
      body: {
        body?: definitions['PreTranslateSettingsV3Dto']
      }
    }
    responses: {
      /** successful operation */
      200: {
        schema: definitions['PreTranslateSettingsV3Dto']
      }
      /** Bad request */
      400: unknown
      /** Not authorized */
      401: unknown
      /** Forbidden */
      403: unknown
      /** Resource not found */
      404: unknown
      /** Method not allowed */
      405: unknown
      /** Timeout */
      408: unknown
      /** Gone */
      410: unknown
      /** Unsupported media type */
      415: unknown
      /** Too many requests */
      429: unknown
      /** Internal server error */
      500: unknown
      /** Not implemented */
      501: unknown
    }
  }
  listByProjectV3: {
    parameters: {
      path: {
        projectUid: string
      }
      query: {
        /** Name to search by */
        name?: string
        /** Uid to search by */
        uid?: string
        pageNumber?: number
        /** Page size, accepts values between 1 and 50, default 50 */
        pageSize?: number
        /** Sorting field */
        sort?: 'DATE_CREATED'
        /** Sorting order */
        order?: 'asc' | 'desc'
        onlyOwnerOrg?: boolean
      }
    }
    responses: {
      /** successful operation */
      200: {
        schema: definitions['PageDtoAnalyseReference']
      }
      /** Bad request */
      400: unknown
      /** Not authorized */
      401: unknown
      /** Forbidden */
      403: unknown
      /** Resource not found */
      404: unknown
      /** Method not allowed */
      405: unknown
      /** Timeout */
      408: unknown
      /** Gone */
      410: unknown
      /** Unsupported media type */
      415: unknown
      /** Too many requests */
      429: unknown
      /** Internal server error */
      500: unknown
      /** Not implemented */
      501: unknown
    }
  }
  createProjectV3: {
    parameters: {
      body: {
        body?: definitions['CreateProjectV3Dto']
      }
    }
    responses: {
      /** Created */
      201: {
        schema: definitions['AbstractProjectDtoV2']
      }
      /** Bad request */
      400: unknown
      /** Not authorized */
      401: unknown
      /** Forbidden */
      403: unknown
      /** Resource not found */
      404: unknown
      /** Method not allowed */
      405: unknown
      /** Timeout */
      408: unknown
      /** Gone */
      410: unknown
      /** Unsupported media type */
      415: unknown
      /** Too many requests */
      429: unknown
      /** Internal server error */
      500: unknown
      /** Not implemented */
      501: unknown
    }
  }
  /** Call "Get QA settings" endpoint to get the list of enabled QA checks */
  runQaForJobPartV3: {
    parameters: {
      path: {
        projectUid: string
        jobUid: string
      }
      body: {
        body?: definitions['QualityAssuranceRunDtoV3']
      }
    }
    responses: {
      /** successful operation */
      200: {
        schema: definitions['QualityAssuranceResponseDto']
      }
      /** Bad request */
      400: unknown
      /** Not authorized */
      401: unknown
      /** Forbidden */
      403: unknown
      /** Resource not found */
      404: unknown
      /** Method not allowed */
      405: unknown
      /** Timeout */
      408: unknown
      /** Gone */
      410: unknown
      /** Unsupported media type */
      415: unknown
      /** Too many requests */
      429: unknown
      /** Internal server error */
      500: unknown
      /** Not implemented */
      501: unknown
    }
  }
  /** Call "Get QA settings" endpoint to get the list of enabled QA checks */
  runQaForJobPartsV3: {
    parameters: {
      path: {
        projectUid: string
      }
      body: {
        body?: definitions['QualityAssuranceBatchRunDtoV3']
      }
    }
    responses: {
      /** successful operation */
      200: {
        schema: definitions['QualityAssuranceResponseDto']
      }
      /** Bad request */
      400: unknown
      /** Not authorized */
      401: unknown
      /** Forbidden */
      403: unknown
      /** Resource not found */
      404: unknown
      /** Method not allowed */
      405: unknown
      /** Timeout */
      408: unknown
      /** Gone */
      410: unknown
      /** Unsupported media type */
      415: unknown
      /** Too many requests */
      429: unknown
      /** Internal server error */
      500: unknown
      /** Not implemented */
      501: unknown
    }
  }
  /** By default runs only fast running checks. Source and target language of jobs have to match. */
  runQaForSegmentsV3: {
    parameters: {
      path: {
        projectUid: string
      }
      body: {
        body?: definitions['QualityAssuranceSegmentsRunDtoV3']
      }
    }
    responses: {
      /** successful operation */
      200: {
        schema: definitions['QualityAssuranceResponseDto']
      }
      /** Bad request */
      400: unknown
      /** Not authorized */
      401: unknown
      /** Forbidden */
      403: unknown
      /** Resource not found */
      404: unknown
      /** Method not allowed */
      405: unknown
      /** Timeout */
      408: unknown
      /** Gone */
      410: unknown
      /** Unsupported media type */
      415: unknown
      /** Too many requests */
      429: unknown
      /** Internal server error */
      500: unknown
      /** Not implemented */
      501: unknown
    }
  }
  listPartAnalyseV3: {
    parameters: {
      path: {
        projectUid: string
        jobUid: string
      }
      query: {
        pageNumber?: number
        pageSize?: number
      }
    }
    responses: {
      /** successful operation */
      200: {
        schema: definitions['PageDtoAnalyseReference']
      }
      /** Bad request */
      400: unknown
      /** Not authorized */
      401: unknown
      /** Forbidden */
      403: unknown
      /** Resource not found */
      404: unknown
      /** Method not allowed */
      405: unknown
      /** Timeout */
      408: unknown
      /** Gone */
      410: unknown
      /** Unsupported media type */
      415: unknown
      /** Too many requests */
      429: unknown
      /** Internal server error */
      500: unknown
      /** Not implemented */
      501: unknown
    }
  }
  exportToOnlineRepository: {
    parameters: {
      path: {
        projectUid: string
      }
      body: {
        body?: definitions['JobExportActionDto']
      }
    }
    responses: {
      /** successful operation */
      200: {
        schema: definitions['JobExportResponseDto']
      }
      /** Bad request */
      400: unknown
      /** Not authorized */
      401: unknown
      /** Forbidden */
      403: unknown
      /** Resource not found */
      404: unknown
      /** Method not allowed */
      405: unknown
      /** Timeout */
      408: unknown
      /** Gone */
      410: unknown
      /** Unsupported media type */
      415: unknown
      /** Too many requests */
      429: unknown
      /** Internal server error */
      500: unknown
      /** Not implemented */
      501: unknown
    }
  }
  getPreTranslateSettingsForProjectTemplate_2: {
    parameters: {
      path: {
        projectTemplateUid: string
      }
    }
    responses: {
      /** successful operation */
      200: {
        schema: definitions['PreTranslateSettingsV3Dto']
      }
      /** Bad request */
      400: unknown
      /** Not authorized */
      401: unknown
      /** Forbidden */
      403: unknown
      /** Resource not found */
      404: unknown
      /** Method not allowed */
      405: unknown
      /** Timeout */
      408: unknown
      /** Gone */
      410: unknown
      /** Unsupported media type */
      415: unknown
      /** Too many requests */
      429: unknown
      /** Internal server error */
      500: unknown
      /** Not implemented */
      501: unknown
    }
  }
  updatePreTranslateSettingsForProjectTemplate_2: {
    parameters: {
      path: {
        projectTemplateUid: string
      }
      body: {
        body?: definitions['PreTranslateSettingsV3Dto']
      }
    }
    responses: {
      /** successful operation */
      200: {
        schema: definitions['PreTranslateSettingsV3Dto']
      }
      /** Bad request */
      400: unknown
      /** Not authorized */
      401: unknown
      /** Forbidden */
      403: unknown
      /** Resource not found */
      404: unknown
      /** Method not allowed */
      405: unknown
      /** Timeout */
      408: unknown
      /** Gone */
      410: unknown
      /** Unsupported media type */
      415: unknown
      /** Too many requests */
      429: unknown
      /** Internal server error */
      500: unknown
      /** Not implemented */
      501: unknown
    }
  }
  getProjectTemplateTransMemories_2: {
    parameters: {
      query: {
        /** Filter project translation memories by target language */
        targetLang?: string
        /** Filter project translation memories by workflow step */
        wfStepUid?: string
      }
      path: {
        projectTemplateUid: string
      }
    }
    responses: {
      /** successful operation */
      200: {
        schema: definitions['ProjectTemplateTransMemoryListDtoV3']
      }
      /** Bad request */
      400: unknown
      /** Not authorized */
      401: unknown
      /** Forbidden */
      403: unknown
      /** Resource not found */
      404: unknown
      /** Method not allowed */
      405: unknown
      /** Timeout */
      408: unknown
      /** Gone */
      410: unknown
      /** Unsupported media type */
      415: unknown
      /** Too many requests */
      429: unknown
      /** Internal server error */
      500: unknown
      /** Not implemented */
      501: unknown
    }
  }
  getProjectTransMemories_1: {
    parameters: {
      query: {
        /** Filter project translation memories by target language */
        targetLang?: string
        /** Filter project translation memories by workflow step */
        wfStepUid?: string
      }
      path: {
        projectUid: string
      }
    }
    responses: {
      /** successful operation */
      200: {
        schema: definitions['ProjectTransMemoryListDtoV3']
      }
      /** Bad request */
      400: unknown
      /** Not authorized */
      401: unknown
      /** Forbidden */
      403: unknown
      /** Resource not found */
      404: unknown
      /** Method not allowed */
      405: unknown
      /** Timeout */
      408: unknown
      /** Gone */
      410: unknown
      /** Unsupported media type */
      415: unknown
      /** Too many requests */
      429: unknown
      /** Internal server error */
      500: unknown
      /** Not implemented */
      501: unknown
    }
  }
  /**
   * If user wants to edit “All target languages” or "All workflow steps”,
   *                        but there are already varied TM settings for individual languages or steps,
   *                        then the user risks to overwrite these individual choices.
   */
  setProjectTransMemoriesV3: {
    parameters: {
      path: {
        projectUid: string
      }
      body: {
        body?: definitions['SetProjectTransMemoriesV3Dto']
      }
    }
    responses: {
      /** OK */
      200: {
        schema: definitions['ProjectTransMemoryListDtoV3']
      }
      /** Bad request */
      400: unknown
      /** Not authorized */
      401: unknown
      /** Forbidden */
      403: unknown
      /** Resource not found */
      404: unknown
      /** Method not allowed */
      405: unknown
      /** Timeout */
      408: unknown
      /** Gone */
      410: unknown
      /** Unsupported media type */
      415: unknown
      /** Too many requests */
      429: unknown
      /** Internal server error */
      500: unknown
      /** Not implemented */
      501: unknown
    }
  }
  createUserV3: {
    parameters: {
      body: {
        body?: definitions['AbstractUserCreateDto']
      }
      query: {
        sendInvitation?: boolean
      }
    }
    responses: {
      /** Created */
      201: {
        schema: definitions['UserDetailsDtoV3']
      }
      /** Bad request */
      400: unknown
      /** Not authorized */
      401: unknown
      /** Forbidden */
      403: unknown
      /** Resource not found */
      404: unknown
      /** Method not allowed */
      405: unknown
      /** Timeout */
      408: unknown
      /** Gone */
      410: unknown
      /** Unsupported media type */
      415: unknown
      /** Too many requests */
      429: unknown
      /** Internal server error */
      500: unknown
      /** Not implemented */
      501: unknown
    }
  }
  getUserV3: {
    parameters: {
      path: {
        userUid: string
      }
    }
    responses: {
      /** successful operation */
      200: {
        schema: definitions['UserDetailsDtoV3']
      }
      /** Bad request */
      400: unknown
      /** Not authorized */
      401: unknown
      /** Forbidden */
      403: unknown
      /** Resource not found */
      404: unknown
      /** Method not allowed */
      405: unknown
      /** Timeout */
      408: unknown
      /** Gone */
      410: unknown
      /** Unsupported media type */
      415: unknown
      /** Too many requests */
      429: unknown
      /** Internal server error */
      500: unknown
      /** Not implemented */
      501: unknown
    }
  }
  updateUserV3: {
    parameters: {
      body: {
        body?: definitions['AbstractUserEditDto']
      }
      path: {
        userUid: string
      }
    }
    responses: {
      /** successful operation */
      200: {
        schema: definitions['UserDetailsDtoV3']
      }
      /** Bad request */
      400: unknown
      /** Not authorized */
      401: unknown
      /** Forbidden */
      403: unknown
      /** Resource not found */
      404: unknown
      /** Method not allowed */
      405: unknown
      /** Timeout */
      408: unknown
      /** Gone */
      410: unknown
      /** Unsupported media type */
      415: unknown
      /** Too many requests */
      429: unknown
      /** Internal server error */
      500: unknown
      /** Not implemented */
      501: unknown
    }
  }
  disableTwoFactorAuthV3: {
    parameters: {
      path: {
        userUid: string
      }
    }
    responses: {
      /** successful operation */
      200: {
        schema: definitions['UserDetailsDtoV3']
      }
      /** Bad request */
      400: unknown
      /** Not authorized */
      401: unknown
      /** Forbidden */
      403: unknown
      /** Resource not found */
      404: unknown
      /** Method not allowed */
      405: unknown
      /** Timeout */
      408: unknown
      /** Gone */
      410: unknown
      /** Unsupported media type */
      415: unknown
      /** Too many requests */
      429: unknown
      /** Internal server error */
      500: unknown
      /** Not implemented */
      501: unknown
    }
  }
}

export interface external {}
